var ACL_ADD_FILE: acl_perm_t {
  get {
    return
  }
}
var ACL_ADD_SUBDIRECTORY: acl_perm_t {
  get {
    return
  }
}
var ACL_APPEND_DATA: acl_perm_t {
  get {
    return
  }
}
var ACL_CHANGE_OWNER: acl_perm_t {
  get {
    return
  }
}
var ACL_DELETE: acl_perm_t {
  get {
    return
  }
}
var ACL_DELETE_CHILD: acl_perm_t {
  get {
    return
  }
}
var ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_ENTRY_FILE_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_ENTRY_INHERITED: acl_flag_t {
  get {
    return
  }
}
var ACL_ENTRY_LIMIT_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_ENTRY_ONLY_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_EXECUTE: acl_perm_t {
  get {
    return
  }
}
var ACL_EXTENDED_ALLOW: acl_tag_t {
  get {
    return
  }
}
var ACL_EXTENDED_DENY: acl_tag_t {
  get {
    return
  }
}
var ACL_FIRST_ENTRY: acl_entry_id_t {
  get {
    return
  }
}
var ACL_FLAG_DEFER_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_FLAG_NO_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_LAST_ENTRY: acl_entry_id_t {
  get {
    return
  }
}
var ACL_LIST_DIRECTORY: acl_perm_t {
  get {
    return
  }
}
var ACL_NEXT_ENTRY: acl_entry_id_t {
  get {
    return
  }
}
var ACL_READ_ATTRIBUTES: acl_perm_t {
  get {
    return
  }
}
var ACL_READ_DATA: acl_perm_t {
  get {
    return
  }
}
var ACL_READ_EXTATTRIBUTES: acl_perm_t {
  get {
    return
  }
}
var ACL_READ_SECURITY: acl_perm_t {
  get {
    return
  }
}
var ACL_SEARCH: acl_perm_t {
  get {
    return
  }
}
var ACL_SYNCHRONIZE: acl_perm_t {
  get {
    return
  }
}
var ACL_TYPE_ACCESS: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_AFS: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_CODA: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_DEFAULT: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_EXTENDED: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_NTFS: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_NWFS: acl_type_t {
  get {
    return
  }
}
var ACL_UNDEFINED_TAG: acl_tag_t {
  get {
    return
  }
}
var ACL_WRITE_ATTRIBUTES: acl_perm_t {
  get {
    return
  }
}
var ACL_WRITE_DATA: acl_perm_t {
  get {
    return
  }
}
var ACL_WRITE_EXTATTRIBUTES: acl_perm_t {
  get {
    return
  }
}
var ACL_WRITE_SECURITY: acl_perm_t {
  get {
    return
  }
}
struct ACTION {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
typealias AbsoluteTime = UnsignedWide
struct BTHeaderRec {
  var treeDepth: UInt16
  var rootNode: UInt32
  var leafRecords: UInt32
  var firstLeafNode: UInt32
  var lastLeafNode: UInt32
  var nodeSize: UInt16
  var maxKeyLength: UInt16
  var totalNodes: UInt32
  var freeNodes: UInt32
  var reserved1: UInt16
  var clumpSize: UInt32
  var btreeType: UInt8
  var keyCompareType: UInt8
  var attributes: UInt32
  var reserved3: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(treeDepth: UInt16, rootNode: UInt32, leafRecords: UInt32, firstLeafNode: UInt32, lastLeafNode: UInt32, nodeSize: UInt16, maxKeyLength: UInt16, totalNodes: UInt32, freeNodes: UInt32, reserved1: UInt16, clumpSize: UInt32, btreeType: UInt8, keyCompareType: UInt8, attributes: UInt32, reserved3: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
struct BTNodeDescriptor {
  var fLink: UInt32
  var bLink: UInt32
  var kind: Int8
  var height: UInt8
  var numRecords: UInt16
  var reserved: UInt16
  init(fLink: UInt32, bLink: UInt32, kind: Int8, height: UInt8, numRecords: UInt16, reserved: UInt16)
}
struct BTreeKeyLimits {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
typealias Boolean = CUnsignedChar
typealias Byte = UInt8
typealias ByteCount = CUnsignedLong
typealias ByteOffset = CUnsignedLong
typealias BytePtr = UnsafePointer<UInt8>
typealias CharParameter = CShort
typealias CompTimeValue = wide
typealias ConstHFSUniStr255Param = UnsafePointer<HFSUniStr255>
typealias ConstLogicalAddress = COpaquePointer
typealias ConstStr15Param = UnsafePointer<CUnsignedChar>
typealias ConstStr255Param = UnsafePointer<CUnsignedChar>
typealias ConstStr27Param = UnsafePointer<CUnsignedChar>
typealias ConstStr31Param = UnsafePointer<CUnsignedChar>
typealias ConstStr32Param = UnsafePointer<CUnsignedChar>
typealias ConstStr63Param = UnsafePointer<CUnsignedChar>
typealias ConstStrFileNameParam = ConstStr63Param
typealias ConstStringPtr = UnsafePointer<CUnsignedChar>
struct DBM {
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct DIR {
  var __dd_fd: CInt
  var __dd_loc: CLong
  var __dd_size: CLong
  var __dd_buf: UnsafePointer<CChar>
  var __dd_len: CInt
  var __dd_seek: CLong
  var __dd_rewind: CLong
  var __dd_flags: CInt
  var __dd_lock: __darwin_pthread_mutex_t
  var __dd_td: COpaquePointer
  init(__dd_fd: CInt, __dd_loc: CLong, __dd_size: CLong, __dd_buf: UnsafePointer<CChar>, __dd_len: CInt, __dd_seek: CLong, __dd_rewind: CLong, __dd_flags: CInt, __dd_lock: __darwin_pthread_mutex_t, __dd_td: COpaquePointer)
}
func DebugStr(debuggerMsg: CConstPointer<CUnsignedChar>)
func DebugStr(debuggerMsg: CConstPointer<CUnsignedChar>)
func Debugger()
func Debugger()
typealias Dl_info = dl_info
typealias Duration = Int32
var ENTER: ACTION {
  get {
    return
  }
}
typealias ENTRY = entry
typealias FILE = __sFILE
var FILESEC_ACL: filesec_property_t {
  get {
    return
  }
}
var FILESEC_ACL_ALLOCSIZE: filesec_property_t {
  get {
    return
  }
}
var FILESEC_ACL_RAW: filesec_property_t {
  get {
    return
  }
}
var FILESEC_GROUP: filesec_property_t {
  get {
    return
  }
}
var FILESEC_GRPUUID: filesec_property_t {
  get {
    return
  }
}
var FILESEC_MODE: filesec_property_t {
  get {
    return
  }
}
var FILESEC_OWNER: filesec_property_t {
  get {
    return
  }
}
var FILESEC_UUID: filesec_property_t {
  get {
    return
  }
}
var FIND: ACTION {
  get {
    return
  }
}
struct FTW {
  var base: CInt
  var level: CInt
  init(base: CInt, level: CInt)
}
typealias Fixed = Int32
struct FixedPoint {
  var x: Fixed
  var y: Fixed
  init(x: Fixed, y: Fixed)
}
typealias FixedPtr = UnsafePointer<Fixed>
struct FixedRect {
  var left: Fixed
  var top: Fixed
  var right: Fixed
  var bottom: Fixed
  init(left: Fixed, top: Fixed, right: Fixed, bottom: Fixed)
}
struct Float32Point {
  var x: Float32
  var y: Float32
  init(x: Float32, y: Float32)
}
struct Float80 {
  var exp: Int16
  var man: (UInt16, UInt16, UInt16, UInt16)
  init(exp: Int16, man: (UInt16, UInt16, UInt16, UInt16))
}
struct Float96 {
  var exp: (Int16, Int16)
  var man: (UInt16, UInt16, UInt16, UInt16)
  init(exp: (Int16, Int16), man: (UInt16, UInt16, UInt16, UInt16))
}
struct FndrDirInfo {
  var frFlags: CUnsignedShort
  var opaque: Int16
  init(frFlags: CUnsignedShort, opaque: Int16)
}
struct FndrExtendedDirInfo {
  var document_id: UInt32
  var date_added: UInt32
  var extended_flags: UInt16
  var reserved3: UInt16
  var write_gen_counter: UInt32
  init(document_id: UInt32, date_added: UInt32, extended_flags: UInt16, reserved3: UInt16, write_gen_counter: UInt32)
}
struct FndrExtendedFileInfo {
  var document_id: UInt32
  var date_added: UInt32
  var extended_flags: UInt16
  var reserved2: UInt16
  var write_gen_counter: UInt32
  init(document_id: UInt32, date_added: UInt32, extended_flags: UInt16, reserved2: UInt16, write_gen_counter: UInt32)
}
struct FndrFileInfo {
  var fdType: UInt32
  var fdCreator: UInt32
  var fdFlags: UInt16
  var opaque: Int16
  init(fdType: UInt32, fdCreator: UInt32, fdFlags: UInt16, opaque: Int16)
}
struct FndrOpaqueInfo {
  var opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  init(opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8))
}
typealias FourCharCode = UInt32
typealias Fract = Int32
typealias FractPtr = UnsafePointer<Fract>
struct HFSCatalogFile {
  var recordType: Int16
  var flags: UInt8
  var fileType: Int8
  var userInfo: FndrFileInfo
  var fileID: UInt32
  var dataStartBlock: UInt16
  var dataLogicalSize: Int32
  var dataPhysicalSize: Int32
  var rsrcStartBlock: UInt16
  var rsrcLogicalSize: Int32
  var rsrcPhysicalSize: Int32
  var createDate: UInt32
  var modifyDate: UInt32
  var backupDate: UInt32
  var finderInfo: FndrOpaqueInfo
  var clumpSize: UInt16
  var dataExtents: HFSExtentRecord
  var rsrcExtents: HFSExtentRecord
  var reserved: UInt32
  init(recordType: Int16, flags: UInt8, fileType: Int8, userInfo: FndrFileInfo, fileID: UInt32, dataStartBlock: UInt16, dataLogicalSize: Int32, dataPhysicalSize: Int32, rsrcStartBlock: UInt16, rsrcLogicalSize: Int32, rsrcPhysicalSize: Int32, createDate: UInt32, modifyDate: UInt32, backupDate: UInt32, finderInfo: FndrOpaqueInfo, clumpSize: UInt16, dataExtents: HFSExtentRecord, rsrcExtents: HFSExtentRecord, reserved: UInt32)
}
struct HFSCatalogFolder {
  var recordType: Int16
  var flags: UInt16
  var valence: UInt16
  var folderID: UInt32
  var createDate: UInt32
  var modifyDate: UInt32
  var backupDate: UInt32
  var userInfo: FndrDirInfo
  var finderInfo: FndrOpaqueInfo
  var reserved: (UInt32, UInt32, UInt32, UInt32)
  init(recordType: Int16, flags: UInt16, valence: UInt16, folderID: UInt32, createDate: UInt32, modifyDate: UInt32, backupDate: UInt32, userInfo: FndrDirInfo, finderInfo: FndrOpaqueInfo, reserved: (UInt32, UInt32, UInt32, UInt32))
}
struct HFSCatalogKey {
  var keyLength: UInt8
  var reserved: UInt8
  var parentID: UInt32
  var nodeName: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  init(keyLength: UInt8, reserved: UInt8, parentID: UInt32, nodeName: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
struct HFSCatalogThread {
  var recordType: Int16
  var reserved: (Int32, Int32)
  var parentID: UInt32
  var nodeName: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  init(recordType: Int16, reserved: (Int32, Int32), parentID: UInt32, nodeName: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
struct HFSExtentDescriptor {
  var startBlock: UInt16
  var blockCount: UInt16
  init(startBlock: UInt16, blockCount: UInt16)
}
struct HFSExtentKey {
  var keyLength: UInt8
  var forkType: UInt8
  var fileID: UInt32
  var startBlock: UInt16
  init(keyLength: UInt8, forkType: UInt8, fileID: UInt32, startBlock: UInt16)
}
typealias HFSExtentRecord = (HFSExtentDescriptor, HFSExtentDescriptor, HFSExtentDescriptor)
struct HFSMasterDirectoryBlock {
  var drSigWord: UInt16
  var drCrDate: UInt32
  var drLsMod: UInt32
  var drAtrb: UInt16
  var drNmFls: UInt16
  var drVBMSt: UInt16
  var drAllocPtr: UInt16
  var drNmAlBlks: UInt16
  var drAlBlkSiz: UInt32
  var drClpSiz: UInt32
  var drAlBlSt: UInt16
  var drNxtCNID: UInt32
  var drFreeBks: UInt16
  var drVN: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var drVolBkUp: UInt32
  var drVSeqNum: UInt16
  var drWrCnt: UInt32
  var drXTClpSiz: UInt32
  var drCTClpSiz: UInt32
  var drNmRtDirs: UInt16
  var drFilCnt: UInt32
  var drDirCnt: UInt32
  var drFndrInfo: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  var drEmbedSigWord: UInt16
  var drEmbedExtent: HFSExtentDescriptor
  var drXTFlSize: UInt32
  var drXTExtRec: HFSExtentRecord
  var drCTFlSize: UInt32
  var drCTExtRec: HFSExtentRecord
  init(drSigWord: UInt16, drCrDate: UInt32, drLsMod: UInt32, drAtrb: UInt16, drNmFls: UInt16, drVBMSt: UInt16, drAllocPtr: UInt16, drNmAlBlks: UInt16, drAlBlkSiz: UInt32, drClpSiz: UInt32, drAlBlSt: UInt16, drNxtCNID: UInt32, drFreeBks: UInt16, drVN: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), drVolBkUp: UInt32, drVSeqNum: UInt16, drWrCnt: UInt32, drXTClpSiz: UInt32, drCTClpSiz: UInt32, drNmRtDirs: UInt16, drFilCnt: UInt32, drDirCnt: UInt32, drFndrInfo: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32), drEmbedSigWord: UInt16, drEmbedExtent: HFSExtentDescriptor, drXTFlSize: UInt32, drXTExtRec: HFSExtentRecord, drCTFlSize: UInt32, drCTExtRec: HFSExtentRecord)
}
struct HFSPlusAttrData {
  var recordType: UInt32
  var reserved: (UInt32, UInt32)
  var attrSize: UInt32
  var attrData: (UInt8, UInt8)
  init(recordType: UInt32, reserved: (UInt32, UInt32), attrSize: UInt32, attrData: (UInt8, UInt8))
}
struct HFSPlusAttrExtents {
  var recordType: UInt32
  var reserved: UInt32
  var extents: HFSPlusExtentRecord
  init(recordType: UInt32, reserved: UInt32, extents: HFSPlusExtentRecord)
}
struct HFSPlusAttrForkData {
  var recordType: UInt32
  var reserved: UInt32
  var theFork: HFSPlusForkData
  init(recordType: UInt32, reserved: UInt32, theFork: HFSPlusForkData)
}
struct HFSPlusAttrInlineData {
  var recordType: UInt32
  var reserved: UInt32
  var logicalSize: UInt32
  var userData: (UInt8, UInt8)
  init(recordType: UInt32, reserved: UInt32, logicalSize: UInt32, userData: (UInt8, UInt8))
}
struct HFSPlusAttrKey {
  var keyLength: UInt16
  var pad: UInt16
  var fileID: UInt32
  var startBlock: UInt32
  var attrNameLen: UInt16
  var attrName: (UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16)
  init(keyLength: UInt16, pad: UInt16, fileID: UInt32, startBlock: UInt32, attrNameLen: UInt16, attrName: (UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16))
}
struct HFSPlusBSDInfo {
  var ownerID: UInt32
  var groupID: UInt32
  var adminFlags: UInt8
  var ownerFlags: UInt8
  var fileMode: UInt16
  init(ownerID: UInt32, groupID: UInt32, adminFlags: UInt8, ownerFlags: UInt8, fileMode: UInt16)
}
struct HFSPlusCatalogFile {
  var recordType: Int16
  var flags: UInt16
  var reserved1: UInt32
  var fileID: UInt32
  var createDate: UInt32
  var contentModDate: UInt32
  var attributeModDate: UInt32
  var accessDate: UInt32
  var backupDate: UInt32
  var bsdInfo: HFSPlusBSDInfo
  var userInfo: FndrFileInfo
  var finderInfo: FndrOpaqueInfo
  var textEncoding: UInt32
  var reserved2: UInt32
  var dataFork: HFSPlusForkData
  var resourceFork: HFSPlusForkData
  init(recordType: Int16, flags: UInt16, reserved1: UInt32, fileID: UInt32, createDate: UInt32, contentModDate: UInt32, attributeModDate: UInt32, accessDate: UInt32, backupDate: UInt32, bsdInfo: HFSPlusBSDInfo, userInfo: FndrFileInfo, finderInfo: FndrOpaqueInfo, textEncoding: UInt32, reserved2: UInt32, dataFork: HFSPlusForkData, resourceFork: HFSPlusForkData)
}
struct HFSPlusCatalogFolder {
  var recordType: Int16
  var flags: UInt16
  var valence: UInt32
  var folderID: UInt32
  var createDate: UInt32
  var contentModDate: UInt32
  var attributeModDate: UInt32
  var accessDate: UInt32
  var backupDate: UInt32
  var bsdInfo: HFSPlusBSDInfo
  var userInfo: FndrDirInfo
  var finderInfo: FndrOpaqueInfo
  var textEncoding: UInt32
  var folderCount: UInt32
  init(recordType: Int16, flags: UInt16, valence: UInt32, folderID: UInt32, createDate: UInt32, contentModDate: UInt32, attributeModDate: UInt32, accessDate: UInt32, backupDate: UInt32, bsdInfo: HFSPlusBSDInfo, userInfo: FndrDirInfo, finderInfo: FndrOpaqueInfo, textEncoding: UInt32, folderCount: UInt32)
}
struct HFSPlusCatalogKey {
  var keyLength: UInt16
  var parentID: UInt32
  var nodeName: HFSUniStr255
  init(keyLength: UInt16, parentID: UInt32, nodeName: HFSUniStr255)
}
struct HFSPlusCatalogThread {
  var recordType: Int16
  var reserved: Int16
  var parentID: UInt32
  var nodeName: HFSUniStr255
  init(recordType: Int16, reserved: Int16, parentID: UInt32, nodeName: HFSUniStr255)
}
struct HFSPlusExtentDescriptor {
  var startBlock: UInt32
  var blockCount: UInt32
  init(startBlock: UInt32, blockCount: UInt32)
}
struct HFSPlusExtentKey {
  var keyLength: UInt16
  var forkType: UInt8
  var pad: UInt8
  var fileID: UInt32
  var startBlock: UInt32
  init(keyLength: UInt16, forkType: UInt8, pad: UInt8, fileID: UInt32, startBlock: UInt32)
}
typealias HFSPlusExtentRecord = (HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor)
struct HFSPlusForkData {
  var logicalSize: UInt64
  var clumpSize: UInt32
  var totalBlocks: UInt32
  var extents: HFSPlusExtentRecord
  init(logicalSize: UInt64, clumpSize: UInt32, totalBlocks: UInt32, extents: HFSPlusExtentRecord)
}
struct HFSPlusVolumeHeader {
  var signature: UInt16
  var version: UInt16
  var attributes: UInt32
  var lastMountedVersion: UInt32
  var journalInfoBlock: UInt32
  var createDate: UInt32
  var modifyDate: UInt32
  var backupDate: UInt32
  var checkedDate: UInt32
  var fileCount: UInt32
  var folderCount: UInt32
  var blockSize: UInt32
  var totalBlocks: UInt32
  var freeBlocks: UInt32
  var nextAllocation: UInt32
  var rsrcClumpSize: UInt32
  var dataClumpSize: UInt32
  var nextCatalogID: UInt32
  var writeCount: UInt32
  var encodingsBitmap: UInt64
  var finderInfo: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var allocationFile: HFSPlusForkData
  var extentsFile: HFSPlusForkData
  var catalogFile: HFSPlusForkData
  var attributesFile: HFSPlusForkData
  var startupFile: HFSPlusForkData
  init(signature: UInt16, version: UInt16, attributes: UInt32, lastMountedVersion: UInt32, journalInfoBlock: UInt32, createDate: UInt32, modifyDate: UInt32, backupDate: UInt32, checkedDate: UInt32, fileCount: UInt32, folderCount: UInt32, blockSize: UInt32, totalBlocks: UInt32, freeBlocks: UInt32, nextAllocation: UInt32, rsrcClumpSize: UInt32, dataClumpSize: UInt32, nextCatalogID: UInt32, writeCount: UInt32, encodingsBitmap: UInt64, finderInfo: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), allocationFile: HFSPlusForkData, extentsFile: HFSPlusForkData, catalogFile: HFSPlusForkData, attributesFile: HFSPlusForkData, startupFile: HFSPlusForkData)
}
struct HFSUniStr255 {
  var length: UInt16
  var unicode: (UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16)
  init(length: UInt16, unicode: (UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16))
}
typealias Handle = UnsafePointer<Ptr>
typealias ItemCount = CUnsignedLong
struct JournalInfoBlock {
  var flags: UInt32
  var device_signature: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  var offset: UInt64
  var size: UInt64
  var ext_jnl_uuid: uuid_string_t
  var machine_serial_num: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var reserved: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(flags: UInt32, device_signature: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32), offset: UInt64, size: UInt64, ext_jnl_uuid: uuid_string_t, machine_serial_num: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), reserved: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
var KERNEL_AUDIT_TOKEN: audit_token_t
var KERNEL_SECURITY_TOKEN: security_token_t
var LATENCY_QOS_TIER_0: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_1: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_2: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_3: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_4: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_5: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos {
  get {
    return
  }
}
typealias LangCode = Int16
typealias LogicalAddress = COpaquePointer
var NDR_record: NDR_record_t
struct NDR_record_t {
  var mig_vers: CUnsignedChar
  var if_vers: CUnsignedChar
  var reserved1: CUnsignedChar
  var mig_encoding: CUnsignedChar
  var int_rep: CUnsignedChar
  var char_rep: CUnsignedChar
  var float_rep: CUnsignedChar
  var reserved2: CUnsignedChar
  init(mig_vers: CUnsignedChar, if_vers: CUnsignedChar, reserved1: CUnsignedChar, mig_encoding: CUnsignedChar, int_rep: CUnsignedChar, char_rep: CUnsignedChar, float_rep: CUnsignedChar, reserved2: CUnsignedChar)
}
struct NXByteOrder {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
@availability(*, unavailable) func NXConvertHostDoubleToSwapped(x: CDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXConvertHostDoubleToSwapped(x: CDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXConvertHostFloatToSwapped(x: CFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXConvertHostFloatToSwapped(x: CFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXConvertSwappedDoubleToHost(x: NXSwappedDouble) -> CDouble
@availability(*, unavailable) func NXConvertSwappedDoubleToHost(x: NXSwappedDouble) -> CDouble
@availability(*, unavailable) func NXConvertSwappedFloatToHost(x: NXSwappedFloat) -> CFloat
@availability(*, unavailable) func NXConvertSwappedFloatToHost(x: NXSwappedFloat) -> CFloat
func NXHostByteOrder() -> NXByteOrder
func NXHostByteOrder() -> NXByteOrder
@availability(*, unavailable) func NXSwapBigDoubleToHost(x: NXSwappedDouble) -> CDouble
@availability(*, unavailable) func NXSwapBigDoubleToHost(x: NXSwappedDouble) -> CDouble
@availability(*, unavailable) func NXSwapBigFloatToHost(x: NXSwappedFloat) -> CFloat
@availability(*, unavailable) func NXSwapBigFloatToHost(x: NXSwappedFloat) -> CFloat
@availability(*, unavailable) func NXSwapBigIntToHost(x: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapBigIntToHost(x: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapBigLongLongToHost(x: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapBigLongLongToHost(x: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapBigLongToHost(x: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapBigLongToHost(x: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapBigShortToHost(x: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapBigShortToHost(x: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapDouble(x: NXSwappedDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapDouble(x: NXSwappedDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapFloat(x: NXSwappedFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapFloat(x: NXSwappedFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapHostDoubleToBig(x: CDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapHostDoubleToBig(x: CDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapHostDoubleToLittle(x: CDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapHostDoubleToLittle(x: CDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapHostFloatToBig(x: CFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapHostFloatToBig(x: CFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapHostFloatToLittle(x: CFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapHostFloatToLittle(x: CFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapHostIntToBig(x: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapHostIntToBig(x: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapHostIntToLittle(x: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapHostIntToLittle(x: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapHostLongLongToBig(x: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapHostLongLongToBig(x: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapHostLongLongToLittle(x: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapHostLongLongToLittle(x: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapHostLongToBig(x: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapHostLongToBig(x: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapHostLongToLittle(x: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapHostLongToLittle(x: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapHostShortToBig(x: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapHostShortToBig(x: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapHostShortToLittle(x: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapHostShortToLittle(x: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapInt(inv: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapInt(inv: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapLittleDoubleToHost(x: NXSwappedDouble) -> CDouble
@availability(*, unavailable) func NXSwapLittleDoubleToHost(x: NXSwappedDouble) -> CDouble
@availability(*, unavailable) func NXSwapLittleFloatToHost(x: NXSwappedFloat) -> CFloat
@availability(*, unavailable) func NXSwapLittleFloatToHost(x: NXSwappedFloat) -> CFloat
@availability(*, unavailable) func NXSwapLittleIntToHost(x: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapLittleIntToHost(x: CUnsignedInt) -> CUnsignedInt
@availability(*, unavailable) func NXSwapLittleLongLongToHost(x: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapLittleLongLongToHost(x: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapLittleLongToHost(x: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapLittleLongToHost(x: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapLittleShortToHost(x: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapLittleShortToHost(x: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapLong(inv: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapLong(inv: CUnsignedLong) -> CUnsignedLong
@availability(*, unavailable) func NXSwapLongLong(inv: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapLongLong(inv: CUnsignedLongLong) -> CUnsignedLongLong
@availability(*, unavailable) func NXSwapShort(inv: CUnsignedShort) -> CUnsignedShort
@availability(*, unavailable) func NXSwapShort(inv: CUnsignedShort) -> CUnsignedShort
typealias NXSwappedDouble = CUnsignedLongLong
typealias NXSwappedFloat = CUnsignedLong
var NX_BigEndian: NXByteOrder {
  get {
    return
  }
}
var NX_LittleEndian: NXByteOrder {
  get {
    return
  }
}
var NX_UnknownByteOrder: NXByteOrder {
  get {
    return
  }
}
struct NumVersion {
  var nonRelRev: UInt8
  var stage: UInt8
  var minorAndBugRev: UInt8
  var majorRev: UInt8
  init(nonRelRev: UInt8, stage: UInt8, minorAndBugRev: UInt8, majorRev: UInt8)
}
typealias NumVersionVariantHandle = UnsafePointer<NumVersionVariantPtr>
typealias NumVersionVariantPtr = COpaquePointer
func OSAtomicAdd32(__theAmount: Int32, __theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicAdd32(__theAmount: Int32, __theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicAdd32Barrier(__theAmount: Int32, __theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicAdd32Barrier(__theAmount: Int32, __theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicAdd64(__theAmount: Int64, __theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicAdd64(__theAmount: Int64, __theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicAdd64Barrier(__theAmount: Int64, __theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicAdd64Barrier(__theAmount: Int64, __theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicAnd32(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicAnd32(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicAnd32Barrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicAnd32Barrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicAnd32Orig(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicAnd32Orig(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicAnd32OrigBarrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicAnd32OrigBarrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicCompareAndSwap32(__oldValue: Int32, __newValue: Int32, __theValue: UnsafePointer<Int32>) -> CBool
func OSAtomicCompareAndSwap32(__oldValue: Int32, __newValue: Int32, __theValue: UnsafePointer<Int32>) -> CBool
func OSAtomicCompareAndSwap32Barrier(__oldValue: Int32, __newValue: Int32, __theValue: UnsafePointer<Int32>) -> CBool
func OSAtomicCompareAndSwap32Barrier(__oldValue: Int32, __newValue: Int32, __theValue: UnsafePointer<Int32>) -> CBool
func OSAtomicCompareAndSwap64(__oldValue: Int64, __newValue: Int64, __theValue: UnsafePointer<Int64>) -> CBool
func OSAtomicCompareAndSwap64(__oldValue: Int64, __newValue: Int64, __theValue: UnsafePointer<Int64>) -> CBool
func OSAtomicCompareAndSwap64Barrier(__oldValue: Int64, __newValue: Int64, __theValue: UnsafePointer<Int64>) -> CBool
func OSAtomicCompareAndSwap64Barrier(__oldValue: Int64, __newValue: Int64, __theValue: UnsafePointer<Int64>) -> CBool
func OSAtomicCompareAndSwapInt(__oldValue: CInt, __newValue: CInt, __theValue: UnsafePointer<CInt>) -> CBool
func OSAtomicCompareAndSwapInt(__oldValue: CInt, __newValue: CInt, __theValue: UnsafePointer<CInt>) -> CBool
func OSAtomicCompareAndSwapIntBarrier(__oldValue: CInt, __newValue: CInt, __theValue: UnsafePointer<CInt>) -> CBool
func OSAtomicCompareAndSwapIntBarrier(__oldValue: CInt, __newValue: CInt, __theValue: UnsafePointer<CInt>) -> CBool
func OSAtomicCompareAndSwapLong(__oldValue: CLong, __newValue: CLong, __theValue: UnsafePointer<CLong>) -> CBool
func OSAtomicCompareAndSwapLong(__oldValue: CLong, __newValue: CLong, __theValue: UnsafePointer<CLong>) -> CBool
func OSAtomicCompareAndSwapLongBarrier(__oldValue: CLong, __newValue: CLong, __theValue: UnsafePointer<CLong>) -> CBool
func OSAtomicCompareAndSwapLongBarrier(__oldValue: CLong, __newValue: CLong, __theValue: UnsafePointer<CLong>) -> CBool
func OSAtomicCompareAndSwapPtr(__oldValue: CMutableVoidPointer, __newValue: CMutableVoidPointer, __theValue: UnsafePointer<COpaquePointer>) -> CBool
func OSAtomicCompareAndSwapPtr(__oldValue: CMutableVoidPointer, __newValue: CMutableVoidPointer, __theValue: UnsafePointer<COpaquePointer>) -> CBool
func OSAtomicCompareAndSwapPtrBarrier(__oldValue: CMutableVoidPointer, __newValue: CMutableVoidPointer, __theValue: UnsafePointer<COpaquePointer>) -> CBool
func OSAtomicCompareAndSwapPtrBarrier(__oldValue: CMutableVoidPointer, __newValue: CMutableVoidPointer, __theValue: UnsafePointer<COpaquePointer>) -> CBool
func OSAtomicDecrement32(__theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicDecrement32(__theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicDecrement32Barrier(__theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicDecrement32Barrier(__theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicDecrement64(__theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicDecrement64(__theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicDecrement64Barrier(__theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicDecrement64Barrier(__theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicDequeue(__list: COpaquePointer, __offset: UInt) -> COpaquePointer
func OSAtomicDequeue(__list: COpaquePointer, __offset: UInt) -> COpaquePointer
func OSAtomicEnqueue(__list: COpaquePointer, __new: CMutableVoidPointer, __offset: UInt)
func OSAtomicEnqueue(__list: COpaquePointer, __new: CMutableVoidPointer, __offset: UInt)
func OSAtomicFifoDequeue(__list: COpaquePointer, __offset: UInt) -> COpaquePointer
func OSAtomicFifoDequeue(__list: COpaquePointer, __offset: UInt) -> COpaquePointer
func OSAtomicFifoEnqueue(__list: COpaquePointer, __new: CMutableVoidPointer, __offset: UInt)
func OSAtomicFifoEnqueue(__list: COpaquePointer, __new: CMutableVoidPointer, __offset: UInt)
func OSAtomicIncrement32(__theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicIncrement32(__theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicIncrement32Barrier(__theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicIncrement32Barrier(__theValue: UnsafePointer<Int32>) -> Int32
func OSAtomicIncrement64(__theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicIncrement64(__theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicIncrement64Barrier(__theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicIncrement64Barrier(__theValue: UnsafePointer<Int64>) -> Int64
func OSAtomicOr32(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicOr32(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicOr32Barrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicOr32Barrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicOr32Orig(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicOr32Orig(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicOr32OrigBarrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicOr32OrigBarrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicTestAndClear(__n: UInt32, __theAddress: COpaquePointer) -> CBool
func OSAtomicTestAndClear(__n: UInt32, __theAddress: COpaquePointer) -> CBool
func OSAtomicTestAndClearBarrier(__n: UInt32, __theAddress: COpaquePointer) -> CBool
func OSAtomicTestAndClearBarrier(__n: UInt32, __theAddress: COpaquePointer) -> CBool
func OSAtomicTestAndSet(__n: UInt32, __theAddress: COpaquePointer) -> CBool
func OSAtomicTestAndSet(__n: UInt32, __theAddress: COpaquePointer) -> CBool
func OSAtomicTestAndSetBarrier(__n: UInt32, __theAddress: COpaquePointer) -> CBool
func OSAtomicTestAndSetBarrier(__n: UInt32, __theAddress: COpaquePointer) -> CBool
func OSAtomicXor32(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicXor32(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicXor32Barrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicXor32Barrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicXor32Orig(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicXor32Orig(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicXor32OrigBarrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
func OSAtomicXor32OrigBarrier(__theMask: UInt32, __theValue: UnsafePointer<UInt32>) -> Int32
var OSBigEndian: Int {
  get {
    return
  }
}
typealias OSErr = Int16
func OSHostByteOrder() -> Int32
func OSHostByteOrder() -> Int32
var OSLittleEndian: Int {
  get {
    return
  }
}
func OSMemoryBarrier()
func OSMemoryBarrier()
func OSReadSwapInt16(base: COpaquePointer, byteOffset: UInt) -> UInt16
func OSReadSwapInt16(base: COpaquePointer, byteOffset: UInt) -> UInt16
func OSReadSwapInt32(base: COpaquePointer, byteOffset: UInt) -> UInt32
func OSReadSwapInt32(base: COpaquePointer, byteOffset: UInt) -> UInt32
func OSReadSwapInt64(base: COpaquePointer, byteOffset: UInt) -> UInt64
func OSReadSwapInt64(base: COpaquePointer, byteOffset: UInt) -> UInt64
typealias OSSpinLock = Int32
func OSSpinLockLock(__lock: UnsafePointer<OSSpinLock>)
func OSSpinLockLock(__lock: UnsafePointer<OSSpinLock>)
func OSSpinLockTry(__lock: UnsafePointer<OSSpinLock>) -> CBool
func OSSpinLockTry(__lock: UnsafePointer<OSSpinLock>) -> CBool
func OSSpinLockUnlock(__lock: UnsafePointer<OSSpinLock>)
func OSSpinLockUnlock(__lock: UnsafePointer<OSSpinLock>)
typealias OSStatus = Int32
typealias OSType = FourCharCode
typealias OSTypePtr = UnsafePointer<OSType>
var OSUnknownByteOrder: Int {
  get {
    return
  }
}
func OSWriteSwapInt16(base: COpaquePointer, byteOffset: UInt, data: UInt16)
func OSWriteSwapInt16(base: COpaquePointer, byteOffset: UInt, data: UInt16)
func OSWriteSwapInt32(base: COpaquePointer, byteOffset: UInt, data: UInt32)
func OSWriteSwapInt32(base: COpaquePointer, byteOffset: UInt, data: UInt32)
func OSWriteSwapInt64(base: COpaquePointer, byteOffset: UInt, data: UInt64)
func OSWriteSwapInt64(base: COpaquePointer, byteOffset: UInt, data: UInt64)
typealias OptionBits = UInt32
typealias PBVersion = UInt32
typealias PRefCon = COpaquePointer
var P_ALL: idtype_t {
  get {
    return
  }
}
var P_PGID: idtype_t {
  get {
    return
  }
}
var P_PID: idtype_t {
  get {
    return
  }
}
typealias PhysicalAddress = COpaquePointer
struct Point {
  var v: CShort
  var h: CShort
  init(v: CShort, h: CShort)
}
typealias PointPtr = UnsafePointer<Point>
typealias ProcHandle = COpaquePointer
struct ProcessSerialNumber {
  var highLongOfPSN: UInt32
  var lowLongOfPSN: UInt32
  init(highLongOfPSN: UInt32, lowLongOfPSN: UInt32)
}
typealias ProcessSerialNumberPtr = UnsafePointer<ProcessSerialNumber>
typealias Ptr = UnsafePointer<CChar>
var QOS_CLASS_BACKGROUND: qos_class_t {
  get {
    return
  }
}
var QOS_CLASS_DEFAULT: qos_class_t {
  get {
    return
  }
}
var QOS_CLASS_UNSPECIFIED: qos_class_t {
  get {
    return
  }
}
var QOS_CLASS_USER_INITIATED: qos_class_t {
  get {
    return
  }
}
var QOS_CLASS_USER_INTERACTIVE: qos_class_t {
  get {
    return
  }
}
var QOS_CLASS_UTILITY: qos_class_t {
  get {
    return
  }
}
struct Rect {
  var top: CShort
  var left: CShort
  var bottom: CShort
  var right: CShort
  init(top: CShort, left: CShort, bottom: CShort, right: CShort)
}
typealias RectPtr = UnsafePointer<Rect>
typealias RegionCode = Int16
typealias ResType = FourCharCode
typealias ResTypePtr = UnsafePointer<ResType>
var SOCKINFO_GENERIC: Int {
  get {
    return
  }
}
var SOCKINFO_IN: Int {
  get {
    return
  }
}
var SOCKINFO_KERN_CTL: Int {
  get {
    return
  }
}
var SOCKINFO_KERN_EVENT: Int {
  get {
    return
  }
}
var SOCKINFO_NDRV: Int {
  get {
    return
  }
}
var SOCKINFO_TCP: Int {
  get {
    return
  }
}
var SOCKINFO_UN: Int {
  get {
    return
  }
}
typealias SRefCon = COpaquePointer
typealias ScriptCode = Int16
typealias ShortFixed = CShort
typealias ShortFixedPtr = UnsafePointer<ShortFixed>
typealias SignedByte = Int8
typealias Size = CLong
typealias Str15 = (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
typealias Str255 = (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
typealias Str27 = (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
typealias Str31 = (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
typealias Str32 = (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
typealias Str32Field = (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
typealias Str63 = (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
typealias StrFileName = Str63
typealias StringHandle = UnsafePointer<StringPtr>
typealias StringPtr = UnsafePointer<CUnsignedChar>
typealias Style = CUnsignedChar
typealias StyleField = Style
typealias StyleParameter = CShort
func SysBreak()
func SysBreak()
func SysBreakFunc(debuggerMsg: CConstPointer<CUnsignedChar>)
func SysBreakFunc(debuggerMsg: CConstPointer<CUnsignedChar>)
func SysBreakStr(debuggerMsg: CConstPointer<CUnsignedChar>)
func SysBreakStr(debuggerMsg: CConstPointer<CUnsignedChar>)
var TASK_BACKGROUND_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_CONTROL_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_DEFAULT_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_FOREGROUND_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_GRAPHICS_SERVER: task_role {
  get {
    return
  }
}
var TASK_NONUI_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_RENICED: task_role {
  get {
    return
  }
}
var TASK_THROTTLE_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_UNSPECIFIED: task_role {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_0: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_1: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_2: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_3: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_4: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_5: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos {
  get {
    return
  }
}
typealias TimeBase = COpaquePointer
struct TimeRecord {
  var value: CompTimeValue
  var scale: TimeScale
  var base: TimeBase
  init(value: CompTimeValue, scale: TimeScale, base: TimeBase)
}
typealias TimeScale = Int32
typealias TimeValue = Int32
typealias TimeValue64 = Int64
var UIO_READ: uio_rw {
  get {
    return
  }
}
var UIO_WRITE: uio_rw {
  get {
    return
  }
}
typealias UNDServerRef = mach_port_t
typealias URefCon = COpaquePointer
typealias UTF16Char = UInt16
typealias UTF32Char = UInt32
typealias UTF8Char = UInt8
typealias UniChar = UInt16
typealias UniCharCount = CUnsignedLong
typealias UniCharCountPtr = UnsafePointer<UniCharCount>
typealias UniCharPtr = UnsafePointer<UniChar>
typealias UnicodeScalarValue = UInt32
typealias UniversalProcHandle = COpaquePointer
typealias UnsignedFixed = UInt32
typealias UnsignedFixedPtr = UnsafePointer<UnsignedFixed>
struct UnsignedWide {
  var lo: UInt32
  var hi: UInt32
  init(lo: UInt32, hi: UInt32)
}
typealias UnsignedWidePtr = UnsafePointer<UnsignedWide>
typealias VHSelect = Int8
struct VISIT {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
struct VersRec {
  var numericVersion: NumVersion
  var countryCode: CShort
  var shortVersion: Str255
  var reserved: Str255
  init(numericVersion: NumVersion, countryCode: CShort, shortVersion: Str255, reserved: Str255)
}
typealias VersRecHndl = UnsafePointer<VersRecPtr>
typealias VersRecPtr = UnsafePointer<VersRec>
typealias WidePtr = UnsafePointer<wide>
func _Block_copy(aBlock: CConstVoidPointer) -> COpaquePointer
func _Block_copy(aBlock: CConstVoidPointer) -> COpaquePointer
func _Block_object_assign(_: CMutableVoidPointer, _: CConstVoidPointer, _: CInt)
func _Block_object_assign(_: CMutableVoidPointer, _: CConstVoidPointer, _: CInt)
func _Block_object_dispose(_: CConstVoidPointer, _: CInt)
func _Block_object_dispose(_: CConstVoidPointer, _: CInt)
func _Block_release(aBlock: CConstVoidPointer)
func _Block_release(aBlock: CConstVoidPointer)
var _CurrentRuneLocale: UnsafePointer<_RuneLocale>
var _DefaultRuneLocale: _RuneLocale
@noreturn func _Exit(_: CInt)
@noreturn func _Exit(_: CInt)
var _FE_DFL_DISABLE_SSE_DENORMS_ENV: fenv_t
var _FE_DFL_ENV: fenv_t
var _NSConcreteGlobalBlock: (COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer)
var _NSConcreteStackBlock: (COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer)
func _OSReadInt16(base: COpaquePointer, byteOffset: UInt) -> UInt16
func _OSReadInt16(base: COpaquePointer, byteOffset: UInt) -> UInt16
func _OSReadInt32(base: COpaquePointer, byteOffset: UInt) -> UInt32
func _OSReadInt32(base: COpaquePointer, byteOffset: UInt) -> UInt32
func _OSReadInt64(base: COpaquePointer, byteOffset: UInt) -> UInt64
func _OSReadInt64(base: COpaquePointer, byteOffset: UInt) -> UInt64
func _OSSwapInt16(_data: __uint16_t) -> __uint16_t
func _OSSwapInt16(_data: __uint16_t) -> __uint16_t
func _OSSwapInt32(_data: __uint32_t) -> __uint32_t
func _OSSwapInt32(_data: __uint32_t) -> __uint32_t
func _OSSwapInt64(_data: __uint64_t) -> __uint64_t
func _OSSwapInt64(_data: __uint64_t) -> __uint64_t
func _OSWriteInt16(base: COpaquePointer, byteOffset: UInt, data: UInt16)
func _OSWriteInt16(base: COpaquePointer, byteOffset: UInt, data: UInt16)
func _OSWriteInt32(base: COpaquePointer, byteOffset: UInt, data: UInt32)
func _OSWriteInt32(base: COpaquePointer, byteOffset: UInt, data: UInt32)
func _OSWriteInt64(base: COpaquePointer, byteOffset: UInt, data: UInt64)
func _OSWriteInt64(base: COpaquePointer, byteOffset: UInt, data: UInt64)
struct _RuneCharClass {
  var __name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __mask: __uint32_t
  init(__name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __mask: __uint32_t)
}
struct _RuneEntry {
  var __min: __darwin_rune_t
  var __max: __darwin_rune_t
  var __map: __darwin_rune_t
  var __types: UnsafePointer<__uint32_t>
  init(__min: __darwin_rune_t, __max: __darwin_rune_t, __map: __darwin_rune_t, __types: UnsafePointer<__uint32_t>)
}
struct _RuneLocale {
  var __magic: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __encoding: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __invalid_rune: __darwin_rune_t
  var __runetype: (__uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t)
  var __maplower: (__darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t)
  var __mapupper: (__darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t)
  var __runetype_ext: _RuneRange
  var __maplower_ext: _RuneRange
  var __mapupper_ext: _RuneRange
  var __variable: COpaquePointer
  var __variable_len: CInt
  var __ncharclasses: CInt
  var __charclasses: UnsafePointer<_RuneCharClass>
  init(__magic: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __encoding: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __invalid_rune: __darwin_rune_t, __runetype: (__uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t), __maplower: (__darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t), __mapupper: (__darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t), __runetype_ext: _RuneRange, __maplower_ext: _RuneRange, __mapupper_ext: _RuneRange, __variable: COpaquePointer, __variable_len: CInt, __ncharclasses: CInt, __charclasses: UnsafePointer<_RuneCharClass>)
}
struct _RuneRange {
  var __nranges: CInt
  var __ranges: UnsafePointer<_RuneEntry>
  init(__nranges: CInt, __ranges: UnsafePointer<_RuneEntry>)
}
func __NDR_convert__mig_reply_error_t(x: CMutablePointer<mig_reply_error_t>)
func __NDR_convert__mig_reply_error_t(x: CMutablePointer<mig_reply_error_t>)
struct __Reply___host_page_size_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var out_page_size: vm_size_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, out_page_size: vm_size_t)
}
struct __Reply___mach_make_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: memory_object_size_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, size: memory_object_size_t)
}
struct __Reply__act_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, old_stateCnt: mach_msg_type_number_t, old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Reply__act_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__clock_alarm_reply_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__clock_alarm_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__clock_get_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var clock_attrCnt: mach_msg_type_number_t
  var clock_attr: (CInt)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, clock_attrCnt: mach_msg_type_number_t, clock_attr: (CInt))
}
struct __Reply__clock_get_time_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var cur_time: mach_timespec_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, cur_time: mach_timespec_t)
}
struct __Reply__clock_set_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__clock_set_time_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__etap_trace_thread_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__exception_raise_state_identity_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var flavor: CInt
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, flavor: CInt, new_stateCnt: mach_msg_type_number_t, new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Reply__exception_raise_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var flavor: CInt
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, flavor: CInt, new_stateCnt: mach_msg_type_number_t, new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Reply__exception_raise_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__get_dp_control_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_create_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_default_memory_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_get_UNDServer_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_get_boot_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var boot_infoOffset: mach_msg_type_number_t
  var boot_infoCnt: mach_msg_type_number_t
  var boot_info: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, boot_infoOffset: mach_msg_type_number_t, boot_infoCnt: mach_msg_type_number_t, boot_info: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct __Reply__host_get_clock_control_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_get_clock_service_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_get_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, masksCnt: mach_msg_type_number_t, masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t), old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t), old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t))
}
struct __Reply__host_get_io_master_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_get_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var host_info_outCnt: mach_msg_type_number_t
  var host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, host_info_outCnt: mach_msg_type_number_t, host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__host_kernel_version_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var kernel_versionOffset: mach_msg_type_number_t
  var kernel_versionCnt: mach_msg_type_number_t
  var kernel_version: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, kernel_versionOffset: mach_msg_type_number_t, kernel_versionCnt: mach_msg_type_number_t, kernel_version: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct __Reply__host_lockgroup_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var lockgroup_infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, lockgroup_infoCnt: mach_msg_type_number_t)
}
struct __Reply__host_priv_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var host_info_outCnt: mach_msg_type_number_t
  var host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, host_info_outCnt: mach_msg_type_number_t, host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__host_processor_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var out_processor_count: natural_t
  var out_processor_infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, out_processor_count: natural_t, out_processor_infoCnt: mach_msg_type_number_t)
}
struct __Reply__host_processor_set_priv_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_processor_sets_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var processor_setsCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, processor_setsCnt: mach_msg_type_number_t)
}
struct __Reply__host_processors_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var out_processor_listCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, out_processor_listCnt: mach_msg_type_number_t)
}
struct __Reply__host_reboot_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__host_register_mach_voucher_attr_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var new_key: mach_voucher_attr_key_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, new_key: mach_voucher_attr_key_t)
}
struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_request_notification_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__host_security_create_task_token_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__host_security_set_task_token_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__host_set_UNDServer_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__host_set_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__host_set_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__host_statistics64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var host_info64_outCnt: mach_msg_type_number_t
  var host_info64_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, host_info64_outCnt: mach_msg_type_number_t, host_info64_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__host_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var host_info_outCnt: mach_msg_type_number_t
  var host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, host_info_outCnt: mach_msg_type_number_t, host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__host_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, masksCnt: mach_msg_type_number_t, masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t), old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t), old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t))
}
struct __Reply__host_virtual_physical_table_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, infoCnt: mach_msg_type_number_t)
}
struct __Reply__host_zone_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var namesCnt: mach_msg_type_number_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, namesCnt: mach_msg_type_number_t, infoCnt: mach_msg_type_number_t)
}
struct __Reply__kext_request_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var response_dataCnt: mach_msg_type_number_t
  var log_dataCnt: mach_msg_type_number_t
  var op_result: kern_return_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, response_dataCnt: mach_msg_type_number_t, log_dataCnt: mach_msg_type_number_t, op_result: kern_return_t)
}
struct __Reply__kmod_control_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var dataCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, dataCnt: mach_msg_type_number_t)
}
struct __Reply__kmod_create_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var module: kmod_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, module: kmod_t)
}
struct __Reply__kmod_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__kmod_get_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var modulesCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, modulesCnt: mach_msg_type_number_t)
}
struct __Reply__lock_acquire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__lock_handoff_accept_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__lock_handoff_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__lock_make_stable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__lock_release_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__lock_set_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__lock_set_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__lock_try_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_make_memory_entry_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: memory_object_size_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, size: memory_object_size_t)
}
struct __Reply__mach_make_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: vm_size_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, size: vm_size_t)
}
struct __Reply__mach_memory_object_memory_entry_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__mach_memory_object_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__mach_port_allocate_full_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, name: mach_port_name_t)
}
struct __Reply__mach_port_allocate_name_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_allocate_qos_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, name: mach_port_name_t)
}
struct __Reply__mach_port_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, name: mach_port_name_t)
}
struct __Reply__mach_port_construct_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, name: mach_port_name_t)
}
struct __Reply__mach_port_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_destruct_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_dnrequest_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var dnr_total: CUnsignedInt
  var dnr_used: CUnsignedInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, dnr_total: CUnsignedInt, dnr_used: CUnsignedInt)
}
struct __Reply__mach_port_extract_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_extract_right_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__mach_port_get_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var port_info_outCnt: mach_msg_type_number_t
  var port_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, port_info_outCnt: mach_msg_type_number_t, port_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__mach_port_get_context_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var context: mach_port_context_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, context: mach_port_context_t)
}
struct __Reply__mach_port_get_refs_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var refs: mach_port_urefs_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, refs: mach_port_urefs_t)
}
struct __Reply__mach_port_get_set_status_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var membersCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, membersCnt: mach_msg_type_number_t)
}
struct __Reply__mach_port_get_srights_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var srights: mach_port_rights_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, srights: mach_port_rights_t)
}
struct __Reply__mach_port_guard_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_insert_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_insert_right_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_kernel_object_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var object_type: CUnsignedInt
  var object_addr: CUnsignedInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, object_type: CUnsignedInt, object_addr: CUnsignedInt)
}
struct __Reply__mach_port_kobject_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var object_type: natural_t
  var object_addr: mach_vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, object_type: natural_t, object_addr: mach_vm_address_t)
}
struct __Reply__mach_port_mod_refs_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_move_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_names_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var namesCnt: mach_msg_type_number_t
  var typesCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, namesCnt: mach_msg_type_number_t, typesCnt: mach_msg_type_number_t)
}
struct __Reply__mach_port_peek_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var request_seqnop: mach_port_seqno_t
  var msg_sizep: mach_msg_size_t
  var msg_idp: mach_msg_id_t
  var trailer_infopCnt: mach_msg_type_number_t
  var trailer_infop: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, request_seqnop: mach_port_seqno_t, msg_sizep: mach_msg_size_t, msg_idp: mach_msg_id_t, trailer_infopCnt: mach_msg_type_number_t, trailer_infop: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct __Reply__mach_port_rename_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_request_notification_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__mach_port_set_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_set_context_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_set_mscount_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_set_seqno_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_port_space_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var space_info: ipc_info_space_t
  var table_infoCnt: mach_msg_type_number_t
  var tree_infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, space_info: ipc_info_space_t, table_infoCnt: mach_msg_type_number_t, tree_infoCnt: mach_msg_type_number_t)
}
struct __Reply__mach_port_type_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var ptype: mach_port_type_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, ptype: mach_port_type_t)
}
struct __Reply__mach_port_unguard_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_ports_lookup_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var init_port_setCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, init_port_setCnt: mach_msg_type_number_t)
}
struct __Reply__mach_ports_register_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_vm_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: mach_vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: mach_vm_address_t)
}
struct __Reply__mach_vm_behavior_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_vm_copy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_vm_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_vm_inherit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_vm_machine_attribute_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var value: vm_machine_attribute_val_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, value: vm_machine_attribute_val_t)
}
struct __Reply__mach_vm_map_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: mach_vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: mach_vm_address_t)
}
struct __Reply__mach_vm_msync_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_vm_page_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var infoCnt: mach_msg_type_number_t
  var info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, infoCnt: mach_msg_type_number_t, info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt))
}
struct __Reply__mach_vm_page_query_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var disposition: integer_t
  var ref_count: integer_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, disposition: integer_t, ref_count: integer_t)
}
struct __Reply__mach_vm_protect_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_vm_purgable_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var state: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, state: CInt)
}
struct __Reply__mach_vm_read_list_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var data_list: mach_vm_read_entry_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, data_list: mach_vm_read_entry_t)
}
struct __Reply__mach_vm_read_overwrite_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var outsize: mach_vm_size_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, outsize: mach_vm_size_t)
}
struct __Reply__mach_vm_read_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var dataCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, dataCnt: mach_msg_type_number_t)
}
struct __Reply__mach_vm_region_info_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var region: vm_info_region_64_t
  var objectsCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, region: vm_info_region_64_t, objectsCnt: mach_msg_type_number_t)
}
struct __Reply__mach_vm_region_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var region: vm_info_region_t
  var objectsCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, region: vm_info_region_t, objectsCnt: mach_msg_type_number_t)
}
struct __Reply__mach_vm_region_recurse_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  var info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: mach_vm_address_t, size: mach_vm_size_t, nesting_depth: natural_t, infoCnt: mach_msg_type_number_t, info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt))
}
struct __Reply__mach_vm_region_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var infoCnt: mach_msg_type_number_t
  var info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, infoCnt: mach_msg_type_number_t, info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt))
}
struct __Reply__mach_vm_remap_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var target_address: mach_vm_address_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, target_address: mach_vm_address_t, cur_protection: vm_prot_t, max_protection: vm_prot_t)
}
struct __Reply__mach_vm_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_vm_write_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__mach_zone_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var namesCnt: mach_msg_type_number_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, namesCnt: mach_msg_type_number_t, infoCnt: mach_msg_type_number_t)
}
struct __Reply__processor_assign_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__processor_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__processor_exit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__processor_get_assignment_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__processor_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var processor_info_outCnt: mach_msg_type_number_t
  var processor_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, processor_info_outCnt: mach_msg_type_number_t, processor_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__processor_set_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__processor_set_default_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__processor_set_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__processor_set_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var info_outCnt: mach_msg_type_number_t
  var info_out: (integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, info_outCnt: mach_msg_type_number_t, info_out: (integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__processor_set_max_priority_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__processor_set_policy_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__processor_set_policy_disable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__processor_set_policy_enable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__processor_set_stack_usage_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var ltotal: CUnsignedInt
  var space: vm_size_t
  var resident: vm_size_t
  var maxusage: vm_size_t
  var maxstack: vm_offset_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, ltotal: CUnsignedInt, space: vm_size_t, resident: vm_size_t, maxusage: vm_size_t, maxstack: vm_offset_t)
}
struct __Reply__processor_set_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var info_outCnt: mach_msg_type_number_t
  var info_out: (integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, info_outCnt: mach_msg_type_number_t, info_out: (integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__processor_set_tasks_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var task_listCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, task_listCnt: mach_msg_type_number_t)
}
struct __Reply__processor_set_threads_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var thread_listCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, thread_listCnt: mach_msg_type_number_t)
}
struct __Reply__processor_start_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__semaphore_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__semaphore_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__set_dp_control_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_assign_default_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_assign_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__task_get_assignment_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__task_get_emulation_vector_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var vector_start: CInt
  var emulation_vectorCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, vector_start: CInt, emulation_vectorCnt: mach_msg_type_number_t)
}
struct __Reply__task_get_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, masksCnt: mach_msg_type_number_t, masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t), old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t), old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t))
}
struct __Reply__task_get_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__task_get_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__task_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, old_stateCnt: mach_msg_type_number_t, old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Reply__task_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var task_info_outCnt: mach_msg_type_number_t
  var task_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, task_info_outCnt: mach_msg_type_number_t, task_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__task_policy_get_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  var get_default: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, policy_infoCnt: mach_msg_type_number_t, policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t), get_default: boolean_t)
}
struct __Reply__task_policy_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_purgable_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var stats: task_purgable_info_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, stats: task_purgable_info_t)
}
struct __Reply__task_resume2_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_resume_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_sample_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_emulation_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_emulation_vector_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_phys_footprint_limit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var old_limit: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, old_limit: CInt)
}
struct __Reply__task_set_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_port_space_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_ras_pc_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_suspend2_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__task_suspend_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, masksCnt: mach_msg_type_number_t, masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t), old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t), old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t))
}
struct __Reply__task_swap_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__task_terminate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_threads_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var act_listCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, act_listCnt: mach_msg_type_number_t)
}
struct __Reply__task_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__task_zone_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var namesCnt: mach_msg_type_number_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, namesCnt: mach_msg_type_number_t, infoCnt: mach_msg_type_number_t)
}
struct __Reply__thread_abort_safely_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_abort_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_assign_default_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_assign_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_create_running_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__thread_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__thread_depress_abort_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_get_assignment_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__thread_get_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, masksCnt: mach_msg_type_number_t, masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t), old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t), old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t))
}
struct __Reply__thread_get_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__thread_get_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__thread_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, old_stateCnt: mach_msg_type_number_t, old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Reply__thread_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var thread_info_outCnt: mach_msg_type_number_t
  var thread_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, thread_info_outCnt: mach_msg_type_number_t, thread_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Reply__thread_policy_get_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  var get_default: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, policy_infoCnt: mach_msg_type_number_t, policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t), get_default: boolean_t)
}
struct __Reply__thread_policy_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_resume_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_sample_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_set_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_set_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_set_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_set_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_suspend_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, masksCnt: mach_msg_type_number_t, masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t), old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t), old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t))
}
struct __Reply__thread_swap_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Reply__thread_terminate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__thread_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__vm_allocate_cpm_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: vm_address_t)
}
struct __Reply__vm_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: vm_address_t)
}
struct __Reply__vm_behavior_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__vm_copy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__vm_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__vm_inherit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__vm_machine_attribute_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var value: vm_machine_attribute_val_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, value: vm_machine_attribute_val_t)
}
struct __Reply__vm_map_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: vm_address_t)
}
struct __Reply__vm_map_page_query_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var disposition: integer_t
  var ref_count: integer_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, disposition: integer_t, ref_count: integer_t)
}
struct __Reply__vm_map_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: vm_address_t)
}
struct __Reply__vm_mapped_pages_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var pagesCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, pagesCnt: mach_msg_type_number_t)
}
struct __Reply__vm_msync_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__vm_protect_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__vm_purgable_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var state: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, state: CInt)
}
struct __Reply__vm_read_list_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var data_list: vm_read_entry_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, data_list: vm_read_entry_t)
}
struct __Reply__vm_read_overwrite_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var outsize: vm_size_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, outsize: vm_size_t)
}
struct __Reply__vm_read_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var dataCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, dataCnt: mach_msg_type_number_t)
}
struct __Reply__vm_region_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var infoCnt: mach_msg_type_number_t
  var info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, infoCnt: mach_msg_type_number_t, info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt))
}
struct __Reply__vm_region_recurse_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
  var size: vm_size_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  var info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: vm_address_t, size: vm_size_t, nesting_depth: natural_t, infoCnt: mach_msg_type_number_t, info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt))
}
struct __Reply__vm_region_recurse_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
  var size: vm_size_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  var info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, address: vm_address_t, size: vm_size_t, nesting_depth: natural_t, infoCnt: mach_msg_type_number_t, info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt))
}
struct __Reply__vm_region_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var infoCnt: mach_msg_type_number_t
  var info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, infoCnt: mach_msg_type_number_t, info: (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt))
}
struct __Reply__vm_remap_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var target_address: vm_address_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t, target_address: vm_address_t, cur_protection: vm_prot_t, max_protection: vm_prot_t)
}
struct __Reply__vm_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Reply__vm_write_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
struct __Request___host_page_size_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request___mach_make_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: memory_object_size_t
  var offset: memory_object_offset_t
  var permission: vm_prot_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, size: memory_object_size_t, offset: memory_object_offset_t, permission: vm_prot_t)
}
struct __Request__act_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: CInt
  var old_stateCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: CInt, old_stateCnt: mach_msg_type_number_t)
}
struct __Request__act_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: CInt
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: CInt, new_stateCnt: mach_msg_type_number_t, new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Request__clock_alarm_reply_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var alarm_code: kern_return_t
  var alarm_type: alarm_type_t
  var alarm_time: mach_timespec_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, alarm_code: kern_return_t, alarm_type: alarm_type_t, alarm_time: mach_timespec_t)
}
struct __Request__clock_alarm_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var alarm_type: alarm_type_t
  var alarm_time: mach_timespec_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, alarm_type: alarm_type_t, alarm_time: mach_timespec_t)
}
struct __Request__clock_get_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: clock_flavor_t
  var clock_attrCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: clock_flavor_t, clock_attrCnt: mach_msg_type_number_t)
}
struct __Request__clock_get_time_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__clock_set_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: clock_flavor_t
  var clock_attrCnt: mach_msg_type_number_t
  var clock_attr: (CInt)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: clock_flavor_t, clock_attrCnt: mach_msg_type_number_t, clock_attr: (CInt))
}
struct __Request__clock_set_time_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var new_time: mach_timespec_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, new_time: mach_timespec_t)
}
struct __Request__etap_trace_thread_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var trace_status: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, trace_status: boolean_t)
}
struct __Request__exception_raise_state_identity_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception: exception_type_t
  var codeCnt: mach_msg_type_number_t
  var code: (integer_t, integer_t)
  var flavor: CInt
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, exception: exception_type_t, codeCnt: mach_msg_type_number_t, code: (integer_t, integer_t), flavor: CInt, old_stateCnt: mach_msg_type_number_t, old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Request__exception_raise_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var exception: exception_type_t
  var codeCnt: mach_msg_type_number_t
  var code: (integer_t, integer_t)
  var flavor: CInt
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, exception: exception_type_t, codeCnt: mach_msg_type_number_t, code: (integer_t, integer_t), flavor: CInt, old_stateCnt: mach_msg_type_number_t, old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Request__exception_raise_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception: exception_type_t
  var codeCnt: mach_msg_type_number_t
  var code: (integer_t, integer_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, exception: exception_type_t, codeCnt: mach_msg_type_number_t, code: (integer_t, integer_t))
}
struct __Request__get_dp_control_port_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_create_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var recipesCnt: mach_msg_type_number_t
  var recipes: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, recipesCnt: mach_msg_type_number_t, recipes: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
struct __Request__host_default_memory_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var cluster_size: memory_object_cluster_size_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, cluster_size: memory_object_cluster_size_t)
}
struct __Request__host_get_UNDServer_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_get_boot_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_get_clock_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var clock_id: clock_id_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, clock_id: clock_id_t)
}
struct __Request__host_get_clock_service_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var clock_id: clock_id_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, clock_id: clock_id_t)
}
struct __Request__host_get_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, exception_mask: exception_mask_t)
}
struct __Request__host_get_io_master_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_get_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var node: CInt
  var which: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, node: CInt, which: CInt)
}
struct __Request__host_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: host_flavor_t
  var host_info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: host_flavor_t, host_info_outCnt: mach_msg_type_number_t)
}
struct __Request__host_kernel_version_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_lockgroup_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_priv_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: host_flavor_t
  var host_info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: host_flavor_t, host_info_outCnt: mach_msg_type_number_t)
}
struct __Request__host_processor_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: processor_flavor_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: processor_flavor_t)
}
struct __Request__host_processor_set_priv_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__host_processor_sets_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_processors_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_reboot_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var options: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, options: CInt)
}
struct __Request__host_register_mach_voucher_attr_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var default_value: mach_voucher_attr_value_handle_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, default_value: mach_voucher_attr_value_handle_t)
}
struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var default_value: mach_voucher_attr_value_handle_t
  var key: mach_voucher_attr_key_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, default_value: mach_voucher_attr_value_handle_t, key: mach_voucher_attr_key_t)
}
struct __Request__host_request_notification_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var notify_type: host_flavor_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, notify_type: host_flavor_t)
}
struct __Request__host_security_create_task_token_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var sec_token: security_token_t
  var audit_token: audit_token_t
  var ledgersCnt: mach_msg_type_number_t
  var inherit_memory: boolean_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, sec_token: security_token_t, audit_token: audit_token_t, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t)
}
struct __Request__host_security_set_task_token_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var sec_token: security_token_t
  var audit_token: audit_token_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, sec_token: security_token_t, audit_token: audit_token_t)
}
struct __Request__host_set_UNDServer_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__host_set_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, exception_mask: exception_mask_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t)
}
struct __Request__host_set_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var which: CInt
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, which: CInt)
}
struct __Request__host_statistics64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: host_flavor_t
  var host_info64_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: host_flavor_t, host_info64_outCnt: mach_msg_type_number_t)
}
struct __Request__host_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: host_flavor_t
  var host_info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: host_flavor_t, host_info_outCnt: mach_msg_type_number_t)
}
struct __Request__host_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, exception_mask: exception_mask_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t)
}
struct __Request__host_virtual_physical_table_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__host_zone_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__kext_request_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var user_log_flags: UInt32
  var request_dataCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, user_log_flags: UInt32, request_dataCnt: mach_msg_type_number_t)
}
struct __Request__kmod_control_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var module: kmod_t
  var flavor: kmod_control_flavor_t
  var dataCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, module: kmod_t, flavor: kmod_control_flavor_t, dataCnt: mach_msg_type_number_t)
}
struct __Request__kmod_create_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var info: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, info: vm_address_t)
}
struct __Request__kmod_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var module: kmod_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, module: kmod_t)
}
struct __Request__kmod_get_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__lock_acquire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, lock_id: CInt)
}
struct __Request__lock_handoff_accept_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, lock_id: CInt)
}
struct __Request__lock_handoff_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, lock_id: CInt)
}
struct __Request__lock_make_stable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, lock_id: CInt)
}
struct __Request__lock_release_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, lock_id: CInt)
}
struct __Request__lock_set_create_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var n_ulocks: CInt
  var policy: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, n_ulocks: CInt, policy: CInt)
}
struct __Request__lock_set_destroy_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__lock_try_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, lock_id: CInt)
}
struct __Request__mach_make_memory_entry_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: memory_object_size_t
  var offset: memory_object_offset_t
  var permission: vm_prot_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, size: memory_object_size_t, offset: memory_object_offset_t, permission: vm_prot_t)
}
struct __Request__mach_make_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: vm_size_t
  var offset: vm_offset_t
  var permission: vm_prot_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, size: vm_size_t, offset: vm_offset_t, permission: vm_prot_t)
}
struct __Request__mach_memory_object_memory_entry_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var internal: boolean_t
  var size: memory_object_size_t
  var permission: vm_prot_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, internal: boolean_t, size: memory_object_size_t, permission: vm_prot_t)
}
struct __Request__mach_memory_object_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var internal: boolean_t
  var size: vm_size_t
  var permission: vm_prot_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, internal: boolean_t, size: vm_size_t, permission: vm_prot_t)
}
struct __Request__mach_port_allocate_full_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var right: mach_port_right_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, right: mach_port_right_t, name: mach_port_name_t)
}
struct __Request__mach_port_allocate_name_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var right: mach_port_right_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, right: mach_port_right_t, name: mach_port_name_t)
}
struct __Request__mach_port_allocate_qos_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var right: mach_port_right_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, right: mach_port_right_t)
}
struct __Request__mach_port_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var right: mach_port_right_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, right: mach_port_right_t)
}
struct __Request__mach_port_construct_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var context: mach_port_context_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, context: mach_port_context_t)
}
struct __Request__mach_port_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_destruct_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var srdelta: mach_port_delta_t
  var guard: mach_port_context_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: mach_port_context_t)
}
struct __Request__mach_port_dnrequest_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_extract_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var pset: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, pset: mach_port_name_t)
}
struct __Request__mach_port_extract_right_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var msgt_name: mach_msg_type_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, msgt_name: mach_msg_type_name_t)
}
struct __Request__mach_port_get_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var flavor: mach_port_flavor_t
  var port_info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info_outCnt: mach_msg_type_number_t)
}
struct __Request__mach_port_get_context_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_get_refs_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var right: mach_port_right_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, right: mach_port_right_t)
}
struct __Request__mach_port_get_set_status_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_get_srights_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_guard_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var guard: mach_port_context_t
  var strict: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, guard: mach_port_context_t, strict: boolean_t)
}
struct __Request__mach_port_insert_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var pset: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, pset: mach_port_name_t)
}
struct __Request__mach_port_insert_right_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_kernel_object_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_kobject_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_mod_refs_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var right: mach_port_right_t
  var delta: mach_port_delta_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t)
}
struct __Request__mach_port_move_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var member: mach_port_name_t
  var after: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, member: mach_port_name_t, after: mach_port_name_t)
}
struct __Request__mach_port_names_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__mach_port_peek_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var trailer_type: mach_msg_trailer_type_t
  var request_seqnop: mach_port_seqno_t
  var trailer_infopCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, trailer_type: mach_msg_trailer_type_t, request_seqnop: mach_port_seqno_t, trailer_infopCnt: mach_msg_type_number_t)
}
struct __Request__mach_port_rename_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var old_name: mach_port_name_t
  var new_name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, old_name: mach_port_name_t, new_name: mach_port_name_t)
}
struct __Request__mach_port_request_notification_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var msgid: mach_msg_id_t
  var sync: mach_port_mscount_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, name: mach_port_name_t, msgid: mach_msg_id_t, sync: mach_port_mscount_t)
}
struct __Request__mach_port_set_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var flavor: mach_port_flavor_t
  var port_infoCnt: mach_msg_type_number_t
  var port_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_infoCnt: mach_msg_type_number_t, port_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Request__mach_port_set_context_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var context: mach_port_context_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, context: mach_port_context_t)
}
struct __Request__mach_port_set_mscount_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var mscount: mach_port_mscount_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, mscount: mach_port_mscount_t)
}
struct __Request__mach_port_set_seqno_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var seqno: mach_port_seqno_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, seqno: mach_port_seqno_t)
}
struct __Request__mach_port_space_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__mach_port_type_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t)
}
struct __Request__mach_port_unguard_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var guard: mach_port_context_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, name: mach_port_name_t, guard: mach_port_context_t)
}
struct __Request__mach_ports_lookup_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__mach_ports_register_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var init_port_setCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, init_port_setCnt: mach_msg_type_number_t)
}
struct __Request__mach_vm_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var flags: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, flags: CInt)
}
struct __Request__mach_vm_behavior_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var new_behavior: vm_behavior_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, new_behavior: vm_behavior_t)
}
struct __Request__mach_vm_copy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var source_address: mach_vm_address_t
  var size: mach_vm_size_t
  var dest_address: mach_vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, source_address: mach_vm_address_t, size: mach_vm_size_t, dest_address: mach_vm_address_t)
}
struct __Request__mach_vm_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t)
}
struct __Request__mach_vm_inherit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var new_inheritance: vm_inherit_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, new_inheritance: vm_inherit_t)
}
struct __Request__mach_vm_machine_attribute_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var attribute: vm_machine_attribute_t
  var value: vm_machine_attribute_val_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, attribute: vm_machine_attribute_t, value: vm_machine_attribute_val_t)
}
struct __Request__mach_vm_map_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var mask: mach_vm_offset_t
  var flags: CInt
  var offset: memory_object_offset_t
  var copy: boolean_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: CInt, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t)
}
struct __Request__mach_vm_msync_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var sync_flags: vm_sync_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, sync_flags: vm_sync_t)
}
struct __Request__mach_vm_page_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var flavor: vm_page_info_flavor_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, flavor: vm_page_info_flavor_t, infoCnt: mach_msg_type_number_t)
}
struct __Request__mach_vm_page_query_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var offset: mach_vm_offset_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, offset: mach_vm_offset_t)
}
struct __Request__mach_vm_protect_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var set_maximum: boolean_t
  var new_protection: vm_prot_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t)
}
struct __Request__mach_vm_purgable_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var control: vm_purgable_t
  var state: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, control: vm_purgable_t, state: CInt)
}
struct __Request__mach_vm_read_list_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var data_list: mach_vm_read_entry_t
  var count: natural_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, data_list: mach_vm_read_entry_t, count: natural_t)
}
struct __Request__mach_vm_read_overwrite_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var data: mach_vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, data: mach_vm_address_t)
}
struct __Request__mach_vm_read_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t)
}
struct __Request__mach_vm_region_info_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t)
}
struct __Request__mach_vm_region_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t)
}
struct __Request__mach_vm_region_recurse_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, nesting_depth: natural_t, infoCnt: mach_msg_type_number_t)
}
struct __Request__mach_vm_region_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var flavor: vm_region_flavor_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: mach_vm_address_t, flavor: vm_region_flavor_t, infoCnt: mach_msg_type_number_t)
}
struct __Request__mach_vm_remap_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var target_address: mach_vm_address_t
  var size: mach_vm_size_t
  var mask: mach_vm_offset_t
  var flags: CInt
  var src_address: mach_vm_address_t
  var copy: boolean_t
  var inheritance: vm_inherit_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, target_address: mach_vm_address_t, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: CInt, src_address: mach_vm_address_t, copy: boolean_t, inheritance: vm_inherit_t)
}
struct __Request__mach_vm_wire_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var desired_access: vm_prot_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: mach_vm_address_t, size: mach_vm_size_t, desired_access: vm_prot_t)
}
struct __Request__mach_vm_write_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var dataCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: mach_vm_address_t, dataCnt: mach_msg_type_number_t)
}
struct __Request__mach_zone_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_assign_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var wait: boolean_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, wait: boolean_t)
}
struct __Request__processor_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var processor_cmdCnt: mach_msg_type_number_t
  var processor_cmd: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, processor_cmdCnt: mach_msg_type_number_t, processor_cmd: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Request__processor_exit_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_get_assignment_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: processor_flavor_t
  var processor_info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: processor_flavor_t, processor_info_outCnt: mach_msg_type_number_t)
}
struct __Request__processor_set_create_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_set_default_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_set_destroy_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_set_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: CInt
  var info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: CInt, info_outCnt: mach_msg_type_number_t)
}
struct __Request__processor_set_max_priority_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var max_priority: CInt
  var change_threads: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, max_priority: CInt, change_threads: boolean_t)
}
struct __Request__processor_set_policy_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: processor_set_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var change: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: processor_set_flavor_t, policy_infoCnt: mach_msg_type_number_t, policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t), change: boolean_t)
}
struct __Request__processor_set_policy_disable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: CInt
  var change_threads: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, policy: CInt, change_threads: boolean_t)
}
struct __Request__processor_set_policy_enable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, policy: CInt)
}
struct __Request__processor_set_stack_usage_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_set_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: processor_set_flavor_t
  var info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: processor_set_flavor_t, info_outCnt: mach_msg_type_number_t)
}
struct __Request__processor_set_tasks_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_set_threads_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__processor_start_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__semaphore_create_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: CInt
  var value: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, policy: CInt, value: CInt)
}
struct __Request__semaphore_destroy_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__set_dp_control_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__task_assign_default_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var assign_threads: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, assign_threads: boolean_t)
}
struct __Request__task_assign_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var assign_threads: boolean_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, assign_threads: boolean_t)
}
struct __Request__task_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var ledgersCnt: mach_msg_type_number_t
  var inherit_memory: boolean_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t)
}
struct __Request__task_get_assignment_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_get_emulation_vector_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_get_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, exception_mask: exception_mask_t)
}
struct __Request__task_get_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var which: mach_voucher_selector_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, which: mach_voucher_selector_t)
}
struct __Request__task_get_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var which_port: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, which_port: CInt)
}
struct __Request__task_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var old_stateCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: thread_state_flavor_t, old_stateCnt: mach_msg_type_number_t)
}
struct __Request__task_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: task_flavor_t
  var task_info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: task_flavor_t, task_info_outCnt: mach_msg_type_number_t)
}
struct __Request__task_policy_get_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: task_policy_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var get_default: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: task_policy_flavor_t, policy_infoCnt: mach_msg_type_number_t, get_default: boolean_t)
}
struct __Request__task_policy_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: task_policy_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: task_policy_flavor_t, policy_infoCnt: mach_msg_type_number_t, policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Request__task_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: policy_t
  var baseCnt: mach_msg_type_number_t
  var base: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var set_limit: boolean_t
  var change: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, policy: policy_t, baseCnt: mach_msg_type_number_t, base: (integer_t, integer_t, integer_t, integer_t, integer_t), set_limit: boolean_t, change: boolean_t)
}
struct __Request__task_purgable_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_resume2_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_resume_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_sample_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__task_set_emulation_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var routine_entry_pt: vm_address_t
  var routine_number: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, routine_entry_pt: vm_address_t, routine_number: CInt)
}
struct __Request__task_set_emulation_vector_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var vector_start: CInt
  var emulation_vectorCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, vector_start: CInt, emulation_vectorCnt: mach_msg_type_number_t)
}
struct __Request__task_set_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, exception_mask: exception_mask_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t)
}
struct __Request__task_set_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: task_flavor_t
  var task_info_inCnt: mach_msg_type_number_t
  var task_info_in: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: task_flavor_t, task_info_inCnt: mach_msg_type_number_t, task_info_in: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Request__task_set_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__task_set_phys_footprint_limit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var new_limit: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, new_limit: CInt)
}
struct __Request__task_set_policy_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var policy: policy_t
  var baseCnt: mach_msg_type_number_t
  var base: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var limitCnt: mach_msg_type_number_t
  var limit: (integer_t)
  var change: boolean_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, policy: policy_t, baseCnt: mach_msg_type_number_t, base: (integer_t, integer_t, integer_t, integer_t, integer_t), limitCnt: mach_msg_type_number_t, limit: (integer_t), change: boolean_t)
}
struct __Request__task_set_port_space_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var table_entries: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, table_entries: CInt)
}
struct __Request__task_set_ras_pc_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var basepc: vm_address_t
  var boundspc: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, basepc: vm_address_t, boundspc: vm_address_t)
}
struct __Request__task_set_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var which_port: CInt
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, which_port: CInt)
}
struct __Request__task_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: thread_state_flavor_t, new_stateCnt: mach_msg_type_number_t, new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Request__task_suspend2_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_suspend_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, exception_mask: exception_mask_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t)
}
struct __Request__task_swap_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__task_terminate_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_threads_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__task_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var must_wire: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, must_wire: boolean_t)
}
struct __Request__task_zone_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_abort_safely_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_abort_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_assign_default_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_assign_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__thread_create_running_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: thread_state_flavor_t, new_stateCnt: mach_msg_type_number_t, new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Request__thread_create_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_depress_abort_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_get_assignment_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_get_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, exception_mask: exception_mask_t)
}
struct __Request__thread_get_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var which: mach_voucher_selector_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, which: mach_voucher_selector_t)
}
struct __Request__thread_get_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var which_port: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, which_port: CInt)
}
struct __Request__thread_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var old_stateCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: thread_state_flavor_t, old_stateCnt: mach_msg_type_number_t)
}
struct __Request__thread_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_flavor_t
  var thread_info_outCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: thread_flavor_t, thread_info_outCnt: mach_msg_type_number_t)
}
struct __Request__thread_policy_get_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_policy_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var get_default: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: thread_policy_flavor_t, policy_infoCnt: mach_msg_type_number_t, get_default: boolean_t)
}
struct __Request__thread_policy_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_policy_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: thread_policy_flavor_t, policy_infoCnt: mach_msg_type_number_t, policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t))
}
struct __Request__thread_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: policy_t
  var baseCnt: mach_msg_type_number_t
  var base: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var set_limit: boolean_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, policy: policy_t, baseCnt: mach_msg_type_number_t, base: (integer_t, integer_t, integer_t, integer_t, integer_t), set_limit: boolean_t)
}
struct __Request__thread_resume_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_sample_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__thread_set_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, exception_mask: exception_mask_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t)
}
struct __Request__thread_set_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__thread_set_policy_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var policy: policy_t
  var baseCnt: mach_msg_type_number_t
  var base: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var limitCnt: mach_msg_type_number_t
  var limit: (integer_t)
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, policy: policy_t, baseCnt: mach_msg_type_number_t, base: (integer_t, integer_t, integer_t, integer_t, integer_t), limitCnt: mach_msg_type_number_t, limit: (integer_t))
}
struct __Request__thread_set_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var which_port: CInt
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, which_port: CInt)
}
struct __Request__thread_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
  init(Head: mach_msg_header_t, NDR: NDR_record_t, flavor: thread_state_flavor_t, new_stateCnt: mach_msg_type_number_t, new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t))
}
struct __Request__thread_suspend_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, exception_mask: exception_mask_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t)
}
struct __Request__thread_swap_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t)
}
struct __Request__thread_terminate_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__thread_wire_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var wired: boolean_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, wired: boolean_t)
}
struct __Request__vm_allocate_cpm_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var flags: CInt
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, flags: CInt)
}
struct __Request__vm_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var flags: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, flags: CInt)
}
struct __Request__vm_behavior_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var new_behavior: vm_behavior_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, new_behavior: vm_behavior_t)
}
struct __Request__vm_copy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var source_address: vm_address_t
  var size: vm_size_t
  var dest_address: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, source_address: vm_address_t, size: vm_size_t, dest_address: vm_address_t)
}
struct __Request__vm_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t)
}
struct __Request__vm_inherit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var new_inheritance: vm_inherit_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, new_inheritance: vm_inherit_t)
}
struct __Request__vm_machine_attribute_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var attribute: vm_machine_attribute_t
  var value: vm_machine_attribute_val_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, attribute: vm_machine_attribute_t, value: vm_machine_attribute_val_t)
}
struct __Request__vm_map_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var mask: vm_address_t
  var flags: CInt
  var offset: memory_object_offset_t
  var copy: boolean_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, mask: vm_address_t, flags: CInt, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t)
}
struct __Request__vm_map_page_query_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var offset: vm_offset_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, offset: vm_offset_t)
}
struct __Request__vm_map_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var mask: vm_address_t
  var flags: CInt
  var offset: vm_offset_t
  var copy: boolean_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, mask: vm_address_t, flags: CInt, offset: vm_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t)
}
struct __Request__vm_mapped_pages_info_t {
  var Head: mach_msg_header_t
  init(Head: mach_msg_header_t)
}
struct __Request__vm_msync_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var sync_flags: vm_sync_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, sync_flags: vm_sync_t)
}
struct __Request__vm_protect_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var set_maximum: boolean_t
  var new_protection: vm_prot_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t)
}
struct __Request__vm_purgable_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var control: vm_purgable_t
  var state: CInt
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, control: vm_purgable_t, state: CInt)
}
struct __Request__vm_read_list_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var data_list: vm_read_entry_t
  var count: natural_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, data_list: vm_read_entry_t, count: natural_t)
}
struct __Request__vm_read_overwrite_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var data: vm_address_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, data: vm_address_t)
}
struct __Request__vm_read_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t)
}
struct __Request__vm_region_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var flavor: vm_region_flavor_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, flavor: vm_region_flavor_t, infoCnt: mach_msg_type_number_t)
}
struct __Request__vm_region_recurse_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, nesting_depth: natural_t, infoCnt: mach_msg_type_number_t)
}
struct __Request__vm_region_recurse_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, nesting_depth: natural_t, infoCnt: mach_msg_type_number_t)
}
struct __Request__vm_region_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var flavor: vm_region_flavor_t
  var infoCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, address: vm_address_t, flavor: vm_region_flavor_t, infoCnt: mach_msg_type_number_t)
}
struct __Request__vm_remap_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var target_address: vm_address_t
  var size: vm_size_t
  var mask: vm_address_t
  var flags: CInt
  var src_address: vm_address_t
  var copy: boolean_t
  var inheritance: vm_inherit_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, target_address: vm_address_t, size: vm_size_t, mask: vm_address_t, flags: CInt, src_address: vm_address_t, copy: boolean_t, inheritance: vm_inherit_t)
}
struct __Request__vm_wire_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var desired_access: vm_prot_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: vm_address_t, size: vm_size_t, desired_access: vm_prot_t)
}
struct __Request__vm_write_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var dataCnt: mach_msg_type_number_t
  init(Head: mach_msg_header_t, msgh_body: mach_msg_body_t, NDR: NDR_record_t, address: vm_address_t, dataCnt: mach_msg_type_number_t)
}
func ___runetype(_: __darwin_ct_rune_t) -> CUnsignedLong
func ___runetype(_: __darwin_ct_rune_t) -> CUnsignedLong
func ___tolower(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func ___tolower(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func ___toupper(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func ___toupper(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func __builtin_bswap32(_: CUnsignedInt) -> CUnsignedInt
func __builtin_bswap32(_: CUnsignedInt) -> CUnsignedInt
func __builtin_bswap64(_: CUnsignedLongLong) -> CUnsignedLongLong
func __builtin_bswap64(_: CUnsignedLongLong) -> CUnsignedLongLong
func __builtin_constant_p() -> CInt
func __builtin_constant_p() -> CInt
func __builtin_fabs(_: CDouble) -> CDouble
func __builtin_fabs(_: CDouble) -> CDouble
func __builtin_fabsf(_: CFloat) -> CFloat
func __builtin_fabsf(_: CFloat) -> CFloat
func __builtin_inf() -> CDouble
func __builtin_inf() -> CDouble
func __builtin_inff() -> CFloat
func __builtin_inff() -> CFloat
func __cospi(_: CDouble) -> CDouble
func __cospi(_: CDouble) -> CDouble
func __cospif(_: CFloat) -> CFloat
func __cospif(_: CFloat) -> CFloat
typealias __darwin_blkcnt_t = __int64_t
typealias __darwin_blksize_t = __int32_t
typealias __darwin_clock_t = CUnsignedLong
typealias __darwin_ct_rune_t = CInt
typealias __darwin_dev_t = __int32_t
func __darwin_fd_isset(_n: CInt, _p: CConstPointer<fd_set>) -> CInt
func __darwin_fd_isset(_n: CInt, _p: CConstPointer<fd_set>) -> CInt
typealias __darwin_fsblkcnt_t = CUnsignedInt
typealias __darwin_fsfilcnt_t = CUnsignedInt
typealias __darwin_gid_t = __uint32_t
struct __darwin_i386_avx_state {
  var __fpu_reserved: (CInt, CInt)
  var __fpu_ftw: __uint8_t
  var __fpu_rsrv1: __uint8_t
  var __fpu_fop: __uint16_t
  var __fpu_ip: __uint32_t
  var __fpu_cs: __uint16_t
  var __fpu_rsrv2: __uint16_t
  var __fpu_dp: __uint32_t
  var __fpu_ds: __uint16_t
  var __fpu_rsrv3: __uint16_t
  var __fpu_mxcsr: __uint32_t
  var __fpu_mxcsrmask: __uint32_t
  var __fpu_stmm0: __darwin_mmst_reg
  var __fpu_stmm1: __darwin_mmst_reg
  var __fpu_stmm2: __darwin_mmst_reg
  var __fpu_stmm3: __darwin_mmst_reg
  var __fpu_stmm4: __darwin_mmst_reg
  var __fpu_stmm5: __darwin_mmst_reg
  var __fpu_stmm6: __darwin_mmst_reg
  var __fpu_stmm7: __darwin_mmst_reg
  var __fpu_xmm0: __darwin_xmm_reg
  var __fpu_xmm1: __darwin_xmm_reg
  var __fpu_xmm2: __darwin_xmm_reg
  var __fpu_xmm3: __darwin_xmm_reg
  var __fpu_xmm4: __darwin_xmm_reg
  var __fpu_xmm5: __darwin_xmm_reg
  var __fpu_xmm6: __darwin_xmm_reg
  var __fpu_xmm7: __darwin_xmm_reg
  var __fpu_rsrv4: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __fpu_reserved1: CInt
  var __avx_reserved1: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __fpu_ymmh0: __darwin_xmm_reg
  var __fpu_ymmh1: __darwin_xmm_reg
  var __fpu_ymmh2: __darwin_xmm_reg
  var __fpu_ymmh3: __darwin_xmm_reg
  var __fpu_ymmh4: __darwin_xmm_reg
  var __fpu_ymmh5: __darwin_xmm_reg
  var __fpu_ymmh6: __darwin_xmm_reg
  var __fpu_ymmh7: __darwin_xmm_reg
  init(__fpu_reserved: (CInt, CInt), __fpu_ftw: __uint8_t, __fpu_rsrv1: __uint8_t, __fpu_fop: __uint16_t, __fpu_ip: __uint32_t, __fpu_cs: __uint16_t, __fpu_rsrv2: __uint16_t, __fpu_dp: __uint32_t, __fpu_ds: __uint16_t, __fpu_rsrv3: __uint16_t, __fpu_mxcsr: __uint32_t, __fpu_mxcsrmask: __uint32_t, __fpu_stmm0: __darwin_mmst_reg, __fpu_stmm1: __darwin_mmst_reg, __fpu_stmm2: __darwin_mmst_reg, __fpu_stmm3: __darwin_mmst_reg, __fpu_stmm4: __darwin_mmst_reg, __fpu_stmm5: __darwin_mmst_reg, __fpu_stmm6: __darwin_mmst_reg, __fpu_stmm7: __darwin_mmst_reg, __fpu_xmm0: __darwin_xmm_reg, __fpu_xmm1: __darwin_xmm_reg, __fpu_xmm2: __darwin_xmm_reg, __fpu_xmm3: __darwin_xmm_reg, __fpu_xmm4: __darwin_xmm_reg, __fpu_xmm5: __darwin_xmm_reg, __fpu_xmm6: __darwin_xmm_reg, __fpu_xmm7: __darwin_xmm_reg, __fpu_rsrv4: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __fpu_reserved1: CInt, __avx_reserved1: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __fpu_ymmh0: __darwin_xmm_reg, __fpu_ymmh1: __darwin_xmm_reg, __fpu_ymmh2: __darwin_xmm_reg, __fpu_ymmh3: __darwin_xmm_reg, __fpu_ymmh4: __darwin_xmm_reg, __fpu_ymmh5: __darwin_xmm_reg, __fpu_ymmh6: __darwin_xmm_reg, __fpu_ymmh7: __darwin_xmm_reg)
}
struct __darwin_i386_exception_state {
  var __trapno: __uint16_t
  var __cpu: __uint16_t
  var __err: __uint32_t
  var __faultvaddr: __uint32_t
  init(__trapno: __uint16_t, __cpu: __uint16_t, __err: __uint32_t, __faultvaddr: __uint32_t)
}
struct __darwin_i386_float_state {
  var __fpu_reserved: (CInt, CInt)
  var __fpu_ftw: __uint8_t
  var __fpu_rsrv1: __uint8_t
  var __fpu_fop: __uint16_t
  var __fpu_ip: __uint32_t
  var __fpu_cs: __uint16_t
  var __fpu_rsrv2: __uint16_t
  var __fpu_dp: __uint32_t
  var __fpu_ds: __uint16_t
  var __fpu_rsrv3: __uint16_t
  var __fpu_mxcsr: __uint32_t
  var __fpu_mxcsrmask: __uint32_t
  var __fpu_stmm0: __darwin_mmst_reg
  var __fpu_stmm1: __darwin_mmst_reg
  var __fpu_stmm2: __darwin_mmst_reg
  var __fpu_stmm3: __darwin_mmst_reg
  var __fpu_stmm4: __darwin_mmst_reg
  var __fpu_stmm5: __darwin_mmst_reg
  var __fpu_stmm6: __darwin_mmst_reg
  var __fpu_stmm7: __darwin_mmst_reg
  var __fpu_xmm0: __darwin_xmm_reg
  var __fpu_xmm1: __darwin_xmm_reg
  var __fpu_xmm2: __darwin_xmm_reg
  var __fpu_xmm3: __darwin_xmm_reg
  var __fpu_xmm4: __darwin_xmm_reg
  var __fpu_xmm5: __darwin_xmm_reg
  var __fpu_xmm6: __darwin_xmm_reg
  var __fpu_xmm7: __darwin_xmm_reg
  var __fpu_rsrv4: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __fpu_reserved1: CInt
  init(__fpu_reserved: (CInt, CInt), __fpu_ftw: __uint8_t, __fpu_rsrv1: __uint8_t, __fpu_fop: __uint16_t, __fpu_ip: __uint32_t, __fpu_cs: __uint16_t, __fpu_rsrv2: __uint16_t, __fpu_dp: __uint32_t, __fpu_ds: __uint16_t, __fpu_rsrv3: __uint16_t, __fpu_mxcsr: __uint32_t, __fpu_mxcsrmask: __uint32_t, __fpu_stmm0: __darwin_mmst_reg, __fpu_stmm1: __darwin_mmst_reg, __fpu_stmm2: __darwin_mmst_reg, __fpu_stmm3: __darwin_mmst_reg, __fpu_stmm4: __darwin_mmst_reg, __fpu_stmm5: __darwin_mmst_reg, __fpu_stmm6: __darwin_mmst_reg, __fpu_stmm7: __darwin_mmst_reg, __fpu_xmm0: __darwin_xmm_reg, __fpu_xmm1: __darwin_xmm_reg, __fpu_xmm2: __darwin_xmm_reg, __fpu_xmm3: __darwin_xmm_reg, __fpu_xmm4: __darwin_xmm_reg, __fpu_xmm5: __darwin_xmm_reg, __fpu_xmm6: __darwin_xmm_reg, __fpu_xmm7: __darwin_xmm_reg, __fpu_rsrv4: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __fpu_reserved1: CInt)
}
struct __darwin_i386_thread_state {
  var __eax: CUnsignedInt
  var __ebx: CUnsignedInt
  var __ecx: CUnsignedInt
  var __edx: CUnsignedInt
  var __edi: CUnsignedInt
  var __esi: CUnsignedInt
  var __ebp: CUnsignedInt
  var __esp: CUnsignedInt
  var __ss: CUnsignedInt
  var __eflags: CUnsignedInt
  var __eip: CUnsignedInt
  var __cs: CUnsignedInt
  var __ds: CUnsignedInt
  var __es: CUnsignedInt
  var __fs: CUnsignedInt
  var __gs: CUnsignedInt
  init(__eax: CUnsignedInt, __ebx: CUnsignedInt, __ecx: CUnsignedInt, __edx: CUnsignedInt, __edi: CUnsignedInt, __esi: CUnsignedInt, __ebp: CUnsignedInt, __esp: CUnsignedInt, __ss: CUnsignedInt, __eflags: CUnsignedInt, __eip: CUnsignedInt, __cs: CUnsignedInt, __ds: CUnsignedInt, __es: CUnsignedInt, __fs: CUnsignedInt, __gs: CUnsignedInt)
}
typealias __darwin_id_t = __uint32_t
typealias __darwin_ino64_t = __uint64_t
typealias __darwin_ino_t = __darwin_ino64_t
typealias __darwin_intptr_t = CLong
typealias __darwin_mach_port_name_t = __darwin_natural_t
typealias __darwin_mach_port_t = __darwin_mach_port_name_t
struct __darwin_mcontext32 {
  var __es: __darwin_i386_exception_state
  var __ss: __darwin_i386_thread_state
  var __fs: __darwin_i386_float_state
  init(__es: __darwin_i386_exception_state, __ss: __darwin_i386_thread_state, __fs: __darwin_i386_float_state)
}
struct __darwin_mcontext64 {
  var __es: __darwin_x86_exception_state64
  var __ss: __darwin_x86_thread_state64
  var __fs: __darwin_x86_float_state64
  init(__es: __darwin_x86_exception_state64, __ss: __darwin_x86_thread_state64, __fs: __darwin_x86_float_state64)
}
struct __darwin_mcontext_avx32 {
  var __es: __darwin_i386_exception_state
  var __ss: __darwin_i386_thread_state
  var __fs: __darwin_i386_avx_state
  init(__es: __darwin_i386_exception_state, __ss: __darwin_i386_thread_state, __fs: __darwin_i386_avx_state)
}
struct __darwin_mcontext_avx64 {
  var __es: __darwin_x86_exception_state64
  var __ss: __darwin_x86_thread_state64
  var __fs: __darwin_x86_avx_state64
  init(__es: __darwin_x86_exception_state64, __ss: __darwin_x86_thread_state64, __fs: __darwin_x86_avx_state64)
}
struct __darwin_mmst_reg {
  var __mmst_reg: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __mmst_rsrv: (CChar, CChar, CChar, CChar, CChar, CChar)
  init(__mmst_reg: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __mmst_rsrv: (CChar, CChar, CChar, CChar, CChar, CChar))
}
typealias __darwin_mode_t = __uint16_t
typealias __darwin_natural_t = CUnsignedInt
typealias __darwin_nl_item = CInt
typealias __darwin_off_t = __int64_t
typealias __darwin_pid_t = __int32_t
typealias __darwin_pthread_attr_t = _opaque_pthread_attr_t
typealias __darwin_pthread_cond_t = _opaque_pthread_cond_t
typealias __darwin_pthread_condattr_t = _opaque_pthread_condattr_t
struct __darwin_pthread_handler_rec {
  var __arg: COpaquePointer
  var __next: UnsafePointer<__darwin_pthread_handler_rec>
  init(__arg: COpaquePointer, __next: UnsafePointer<__darwin_pthread_handler_rec>)
}
typealias __darwin_pthread_key_t = CUnsignedLong
typealias __darwin_pthread_mutex_t = _opaque_pthread_mutex_t
typealias __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t
typealias __darwin_pthread_once_t = _opaque_pthread_once_t
typealias __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t
typealias __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t
typealias __darwin_pthread_t = UnsafePointer<_opaque_pthread_t>
typealias __darwin_ptrdiff_t = CLong
typealias __darwin_rune_t = __darwin_wchar_t
struct __darwin_sigaltstack {
  var ss_sp: COpaquePointer
  var ss_size: __darwin_size_t
  var ss_flags: CInt
  init(ss_sp: COpaquePointer, ss_size: __darwin_size_t, ss_flags: CInt)
}
typealias __darwin_sigset_t = __uint32_t
typealias __darwin_size_t = CUnsignedLong
typealias __darwin_socklen_t = __uint32_t
typealias __darwin_ssize_t = CLong
typealias __darwin_suseconds_t = __int32_t
typealias __darwin_time_t = CLong
struct __darwin_ucontext {
  var uc_onstack: CInt
  var uc_sigmask: __darwin_sigset_t
  var uc_stack: __darwin_sigaltstack
  var uc_link: UnsafePointer<__darwin_ucontext>
  var uc_mcsize: __darwin_size_t
  var uc_mcontext: UnsafePointer<__darwin_mcontext64>
  init(uc_onstack: CInt, uc_sigmask: __darwin_sigset_t, uc_stack: __darwin_sigaltstack, uc_link: UnsafePointer<__darwin_ucontext>, uc_mcsize: __darwin_size_t, uc_mcontext: UnsafePointer<__darwin_mcontext64>)
}
struct __darwin_ucontext64 {
  var uc_onstack: CInt
  var uc_sigmask: __darwin_sigset_t
  var uc_stack: __darwin_sigaltstack
  var uc_link: UnsafePointer<__darwin_ucontext64>
  var uc_mcsize: __darwin_size_t
  var uc_mcontext64: UnsafePointer<__darwin_mcontext64>
  init(uc_onstack: CInt, uc_sigmask: __darwin_sigset_t, uc_stack: __darwin_sigaltstack, uc_link: UnsafePointer<__darwin_ucontext64>, uc_mcsize: __darwin_size_t, uc_mcontext64: UnsafePointer<__darwin_mcontext64>)
}
typealias __darwin_uid_t = __uint32_t
typealias __darwin_useconds_t = __uint32_t
typealias __darwin_uuid_string_t = (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
typealias __darwin_uuid_t = (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
typealias __darwin_va_list = __builtin_va_list
typealias __darwin_wchar_t = CInt
typealias __darwin_wctrans_t = CInt
typealias __darwin_wctype_t = __uint32_t
typealias __darwin_wint_t = CInt
struct __darwin_x86_avx_state64 {
  var __fpu_reserved: (CInt, CInt)
  var __fpu_ftw: __uint8_t
  var __fpu_rsrv1: __uint8_t
  var __fpu_fop: __uint16_t
  var __fpu_ip: __uint32_t
  var __fpu_cs: __uint16_t
  var __fpu_rsrv2: __uint16_t
  var __fpu_dp: __uint32_t
  var __fpu_ds: __uint16_t
  var __fpu_rsrv3: __uint16_t
  var __fpu_mxcsr: __uint32_t
  var __fpu_mxcsrmask: __uint32_t
  var __fpu_stmm0: __darwin_mmst_reg
  var __fpu_stmm1: __darwin_mmst_reg
  var __fpu_stmm2: __darwin_mmst_reg
  var __fpu_stmm3: __darwin_mmst_reg
  var __fpu_stmm4: __darwin_mmst_reg
  var __fpu_stmm5: __darwin_mmst_reg
  var __fpu_stmm6: __darwin_mmst_reg
  var __fpu_stmm7: __darwin_mmst_reg
  var __fpu_xmm0: __darwin_xmm_reg
  var __fpu_xmm1: __darwin_xmm_reg
  var __fpu_xmm2: __darwin_xmm_reg
  var __fpu_xmm3: __darwin_xmm_reg
  var __fpu_xmm4: __darwin_xmm_reg
  var __fpu_xmm5: __darwin_xmm_reg
  var __fpu_xmm6: __darwin_xmm_reg
  var __fpu_xmm7: __darwin_xmm_reg
  var __fpu_xmm8: __darwin_xmm_reg
  var __fpu_xmm9: __darwin_xmm_reg
  var __fpu_xmm10: __darwin_xmm_reg
  var __fpu_xmm11: __darwin_xmm_reg
  var __fpu_xmm12: __darwin_xmm_reg
  var __fpu_xmm13: __darwin_xmm_reg
  var __fpu_xmm14: __darwin_xmm_reg
  var __fpu_xmm15: __darwin_xmm_reg
  var __fpu_rsrv4: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __fpu_reserved1: CInt
  var __avx_reserved1: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __fpu_ymmh0: __darwin_xmm_reg
  var __fpu_ymmh1: __darwin_xmm_reg
  var __fpu_ymmh2: __darwin_xmm_reg
  var __fpu_ymmh3: __darwin_xmm_reg
  var __fpu_ymmh4: __darwin_xmm_reg
  var __fpu_ymmh5: __darwin_xmm_reg
  var __fpu_ymmh6: __darwin_xmm_reg
  var __fpu_ymmh7: __darwin_xmm_reg
  var __fpu_ymmh8: __darwin_xmm_reg
  var __fpu_ymmh9: __darwin_xmm_reg
  var __fpu_ymmh10: __darwin_xmm_reg
  var __fpu_ymmh11: __darwin_xmm_reg
  var __fpu_ymmh12: __darwin_xmm_reg
  var __fpu_ymmh13: __darwin_xmm_reg
  var __fpu_ymmh14: __darwin_xmm_reg
  var __fpu_ymmh15: __darwin_xmm_reg
  init(__fpu_reserved: (CInt, CInt), __fpu_ftw: __uint8_t, __fpu_rsrv1: __uint8_t, __fpu_fop: __uint16_t, __fpu_ip: __uint32_t, __fpu_cs: __uint16_t, __fpu_rsrv2: __uint16_t, __fpu_dp: __uint32_t, __fpu_ds: __uint16_t, __fpu_rsrv3: __uint16_t, __fpu_mxcsr: __uint32_t, __fpu_mxcsrmask: __uint32_t, __fpu_stmm0: __darwin_mmst_reg, __fpu_stmm1: __darwin_mmst_reg, __fpu_stmm2: __darwin_mmst_reg, __fpu_stmm3: __darwin_mmst_reg, __fpu_stmm4: __darwin_mmst_reg, __fpu_stmm5: __darwin_mmst_reg, __fpu_stmm6: __darwin_mmst_reg, __fpu_stmm7: __darwin_mmst_reg, __fpu_xmm0: __darwin_xmm_reg, __fpu_xmm1: __darwin_xmm_reg, __fpu_xmm2: __darwin_xmm_reg, __fpu_xmm3: __darwin_xmm_reg, __fpu_xmm4: __darwin_xmm_reg, __fpu_xmm5: __darwin_xmm_reg, __fpu_xmm6: __darwin_xmm_reg, __fpu_xmm7: __darwin_xmm_reg, __fpu_xmm8: __darwin_xmm_reg, __fpu_xmm9: __darwin_xmm_reg, __fpu_xmm10: __darwin_xmm_reg, __fpu_xmm11: __darwin_xmm_reg, __fpu_xmm12: __darwin_xmm_reg, __fpu_xmm13: __darwin_xmm_reg, __fpu_xmm14: __darwin_xmm_reg, __fpu_xmm15: __darwin_xmm_reg, __fpu_rsrv4: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __fpu_reserved1: CInt, __avx_reserved1: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __fpu_ymmh0: __darwin_xmm_reg, __fpu_ymmh1: __darwin_xmm_reg, __fpu_ymmh2: __darwin_xmm_reg, __fpu_ymmh3: __darwin_xmm_reg, __fpu_ymmh4: __darwin_xmm_reg, __fpu_ymmh5: __darwin_xmm_reg, __fpu_ymmh6: __darwin_xmm_reg, __fpu_ymmh7: __darwin_xmm_reg, __fpu_ymmh8: __darwin_xmm_reg, __fpu_ymmh9: __darwin_xmm_reg, __fpu_ymmh10: __darwin_xmm_reg, __fpu_ymmh11: __darwin_xmm_reg, __fpu_ymmh12: __darwin_xmm_reg, __fpu_ymmh13: __darwin_xmm_reg, __fpu_ymmh14: __darwin_xmm_reg, __fpu_ymmh15: __darwin_xmm_reg)
}
struct __darwin_x86_debug_state32 {
  var __dr0: CUnsignedInt
  var __dr1: CUnsignedInt
  var __dr2: CUnsignedInt
  var __dr3: CUnsignedInt
  var __dr4: CUnsignedInt
  var __dr5: CUnsignedInt
  var __dr6: CUnsignedInt
  var __dr7: CUnsignedInt
  init(__dr0: CUnsignedInt, __dr1: CUnsignedInt, __dr2: CUnsignedInt, __dr3: CUnsignedInt, __dr4: CUnsignedInt, __dr5: CUnsignedInt, __dr6: CUnsignedInt, __dr7: CUnsignedInt)
}
struct __darwin_x86_debug_state64 {
  var __dr0: __uint64_t
  var __dr1: __uint64_t
  var __dr2: __uint64_t
  var __dr3: __uint64_t
  var __dr4: __uint64_t
  var __dr5: __uint64_t
  var __dr6: __uint64_t
  var __dr7: __uint64_t
  init(__dr0: __uint64_t, __dr1: __uint64_t, __dr2: __uint64_t, __dr3: __uint64_t, __dr4: __uint64_t, __dr5: __uint64_t, __dr6: __uint64_t, __dr7: __uint64_t)
}
struct __darwin_x86_exception_state64 {
  var __trapno: __uint16_t
  var __cpu: __uint16_t
  var __err: __uint32_t
  var __faultvaddr: __uint64_t
  init(__trapno: __uint16_t, __cpu: __uint16_t, __err: __uint32_t, __faultvaddr: __uint64_t)
}
struct __darwin_x86_float_state64 {
  var __fpu_reserved: (CInt, CInt)
  var __fpu_ftw: __uint8_t
  var __fpu_rsrv1: __uint8_t
  var __fpu_fop: __uint16_t
  var __fpu_ip: __uint32_t
  var __fpu_cs: __uint16_t
  var __fpu_rsrv2: __uint16_t
  var __fpu_dp: __uint32_t
  var __fpu_ds: __uint16_t
  var __fpu_rsrv3: __uint16_t
  var __fpu_mxcsr: __uint32_t
  var __fpu_mxcsrmask: __uint32_t
  var __fpu_stmm0: __darwin_mmst_reg
  var __fpu_stmm1: __darwin_mmst_reg
  var __fpu_stmm2: __darwin_mmst_reg
  var __fpu_stmm3: __darwin_mmst_reg
  var __fpu_stmm4: __darwin_mmst_reg
  var __fpu_stmm5: __darwin_mmst_reg
  var __fpu_stmm6: __darwin_mmst_reg
  var __fpu_stmm7: __darwin_mmst_reg
  var __fpu_xmm0: __darwin_xmm_reg
  var __fpu_xmm1: __darwin_xmm_reg
  var __fpu_xmm2: __darwin_xmm_reg
  var __fpu_xmm3: __darwin_xmm_reg
  var __fpu_xmm4: __darwin_xmm_reg
  var __fpu_xmm5: __darwin_xmm_reg
  var __fpu_xmm6: __darwin_xmm_reg
  var __fpu_xmm7: __darwin_xmm_reg
  var __fpu_xmm8: __darwin_xmm_reg
  var __fpu_xmm9: __darwin_xmm_reg
  var __fpu_xmm10: __darwin_xmm_reg
  var __fpu_xmm11: __darwin_xmm_reg
  var __fpu_xmm12: __darwin_xmm_reg
  var __fpu_xmm13: __darwin_xmm_reg
  var __fpu_xmm14: __darwin_xmm_reg
  var __fpu_xmm15: __darwin_xmm_reg
  var __fpu_rsrv4: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var __fpu_reserved1: CInt
  init(__fpu_reserved: (CInt, CInt), __fpu_ftw: __uint8_t, __fpu_rsrv1: __uint8_t, __fpu_fop: __uint16_t, __fpu_ip: __uint32_t, __fpu_cs: __uint16_t, __fpu_rsrv2: __uint16_t, __fpu_dp: __uint32_t, __fpu_ds: __uint16_t, __fpu_rsrv3: __uint16_t, __fpu_mxcsr: __uint32_t, __fpu_mxcsrmask: __uint32_t, __fpu_stmm0: __darwin_mmst_reg, __fpu_stmm1: __darwin_mmst_reg, __fpu_stmm2: __darwin_mmst_reg, __fpu_stmm3: __darwin_mmst_reg, __fpu_stmm4: __darwin_mmst_reg, __fpu_stmm5: __darwin_mmst_reg, __fpu_stmm6: __darwin_mmst_reg, __fpu_stmm7: __darwin_mmst_reg, __fpu_xmm0: __darwin_xmm_reg, __fpu_xmm1: __darwin_xmm_reg, __fpu_xmm2: __darwin_xmm_reg, __fpu_xmm3: __darwin_xmm_reg, __fpu_xmm4: __darwin_xmm_reg, __fpu_xmm5: __darwin_xmm_reg, __fpu_xmm6: __darwin_xmm_reg, __fpu_xmm7: __darwin_xmm_reg, __fpu_xmm8: __darwin_xmm_reg, __fpu_xmm9: __darwin_xmm_reg, __fpu_xmm10: __darwin_xmm_reg, __fpu_xmm11: __darwin_xmm_reg, __fpu_xmm12: __darwin_xmm_reg, __fpu_xmm13: __darwin_xmm_reg, __fpu_xmm14: __darwin_xmm_reg, __fpu_xmm15: __darwin_xmm_reg, __fpu_rsrv4: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), __fpu_reserved1: CInt)
}
struct __darwin_x86_thread_state64 {
  var __rax: __uint64_t
  var __rbx: __uint64_t
  var __rcx: __uint64_t
  var __rdx: __uint64_t
  var __rdi: __uint64_t
  var __rsi: __uint64_t
  var __rbp: __uint64_t
  var __rsp: __uint64_t
  var __r8: __uint64_t
  var __r9: __uint64_t
  var __r10: __uint64_t
  var __r11: __uint64_t
  var __r12: __uint64_t
  var __r13: __uint64_t
  var __r14: __uint64_t
  var __r15: __uint64_t
  var __rip: __uint64_t
  var __rflags: __uint64_t
  var __cs: __uint64_t
  var __fs: __uint64_t
  var __gs: __uint64_t
  init(__rax: __uint64_t, __rbx: __uint64_t, __rcx: __uint64_t, __rdx: __uint64_t, __rdi: __uint64_t, __rsi: __uint64_t, __rbp: __uint64_t, __rsp: __uint64_t, __r8: __uint64_t, __r9: __uint64_t, __r10: __uint64_t, __r11: __uint64_t, __r12: __uint64_t, __r13: __uint64_t, __r14: __uint64_t, __r15: __uint64_t, __rip: __uint64_t, __rflags: __uint64_t, __cs: __uint64_t, __fs: __uint64_t, __gs: __uint64_t)
}
struct __darwin_xmm_reg {
  var __xmm_reg: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__xmm_reg: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct __double2 {
  var __sinval: CDouble
  var __cosval: CDouble
  init(__sinval: CDouble, __cosval: CDouble)
}
func __error() -> UnsafePointer<CInt>
func __error() -> UnsafePointer<CInt>
func __exp10(_: CDouble) -> CDouble
func __exp10(_: CDouble) -> CDouble
func __exp10f(_: CFloat) -> CFloat
func __exp10f(_: CFloat) -> CFloat
struct __float2 {
  var __sinval: CFloat
  var __cosval: CFloat
  init(__sinval: CFloat, __cosval: CFloat)
}
func __fpclassifyd(_: CDouble) -> CInt
func __fpclassifyd(_: CDouble) -> CInt
func __fpclassifyf(_: CFloat) -> CInt
func __fpclassifyf(_: CFloat) -> CInt
typealias __gnuc_va_list = __builtin_va_list
func __inf() -> CDouble
func __inf() -> CDouble
func __inff() -> CFloat
func __inff() -> CFloat
func __inline_isfinited(__x: CDouble) -> CInt
func __inline_isfinited(__x: CDouble) -> CInt
func __inline_isfinitef(__x: CFloat) -> CInt
func __inline_isfinitef(__x: CFloat) -> CInt
func __inline_isinfd(__x: CDouble) -> CInt
func __inline_isinfd(__x: CDouble) -> CInt
func __inline_isinff(__x: CFloat) -> CInt
func __inline_isinff(__x: CFloat) -> CInt
func __inline_isnand(__x: CDouble) -> CInt
func __inline_isnand(__x: CDouble) -> CInt
func __inline_isnanf(__x: CFloat) -> CInt
func __inline_isnanf(__x: CFloat) -> CInt
func __inline_isnormald(__x: CDouble) -> CInt
func __inline_isnormald(__x: CDouble) -> CInt
func __inline_isnormalf(__x: CFloat) -> CInt
func __inline_isnormalf(__x: CFloat) -> CInt
func __inline_signbitd(__x: CDouble) -> CInt
func __inline_signbitd(__x: CDouble) -> CInt
func __inline_signbitf(__x: CFloat) -> CInt
func __inline_signbitf(__x: CFloat) -> CInt
typealias __int16_t = CShort
typealias __int32_t = CInt
typealias __int64_t = CLongLong
typealias __int8_t = CSignedChar
func __isctype(_c: __darwin_ct_rune_t, _f: CUnsignedLong) -> __darwin_ct_rune_t
func __isctype(_c: __darwin_ct_rune_t, _f: CUnsignedLong) -> __darwin_ct_rune_t
func __istype(_c: __darwin_ct_rune_t, _f: CUnsignedLong) -> CInt
func __istype(_c: __darwin_ct_rune_t, _f: CUnsignedLong) -> CInt
func __maskrune(_: __darwin_ct_rune_t, _: CUnsignedLong) -> CInt
func __maskrune(_: __darwin_ct_rune_t, _: CUnsignedLong) -> CInt
func __math_errhandling() -> CInt
func __math_errhandling() -> CInt
var __mb_cur_max: CInt
struct __msfilterreq {
  var msfr_ifindex: UInt32
  var msfr_fmode: UInt32
  var msfr_nsrcs: UInt32
  var __msfr_align: UInt32
  var msfr_group: sockaddr_storage
  var msfr_srcs: UnsafePointer<sockaddr_storage>
  init(msfr_ifindex: UInt32, msfr_fmode: UInt32, msfr_nsrcs: UInt32, __msfr_align: UInt32, msfr_group: sockaddr_storage, msfr_srcs: UnsafePointer<sockaddr_storage>)
}
struct __msqid_ds_new {
  var msg_perm: ipc_perm
  var msg_first: __int32_t
  var msg_last: __int32_t
  var msg_cbytes: msglen_t
  var msg_qnum: msgqnum_t
  var msg_qbytes: msglen_t
  var msg_lspid: pid_t
  var msg_lrpid: pid_t
  var msg_stime: time_t
  var msg_pad1: __int32_t
  var msg_rtime: time_t
  var msg_pad2: __int32_t
  var msg_ctime: time_t
  var msg_pad3: __int32_t
  var msg_pad4: (__int32_t, __int32_t, __int32_t, __int32_t)
  init(msg_perm: ipc_perm, msg_first: __int32_t, msg_last: __int32_t, msg_cbytes: msglen_t, msg_qnum: msgqnum_t, msg_qbytes: msglen_t, msg_lspid: pid_t, msg_lrpid: pid_t, msg_stime: time_t, msg_pad1: __int32_t, msg_rtime: time_t, msg_pad2: __int32_t, msg_ctime: time_t, msg_pad3: __int32_t, msg_pad4: (__int32_t, __int32_t, __int32_t, __int32_t))
}
func __nan() -> CFloat
func __nan() -> CFloat
struct __nl_cat_d {
  var __data: COpaquePointer
  var __size: CInt
  init(__data: COpaquePointer, __size: CInt)
}
func __opendir2(_: CString, _: CInt) -> UnsafePointer<DIR>
func __opendir2(_: CString, _: CInt) -> UnsafePointer<DIR>
struct __sFILE {
  var _p: UnsafePointer<CUnsignedChar>
  var _r: CInt
  var _w: CInt
  var _flags: CShort
  var _file: CShort
  var _bf: __sbuf
  var _lbfsize: CInt
  var _cookie: COpaquePointer
  var _ub: __sbuf
  var _extra: COpaquePointer
  var _ur: CInt
  var _ubuf: (CUnsignedChar, CUnsignedChar, CUnsignedChar)
  var _nbuf: (CUnsignedChar)
  var _lb: __sbuf
  var _blksize: CInt
  var _offset: fpos_t
  init(_p: UnsafePointer<CUnsignedChar>, _r: CInt, _w: CInt, _flags: CShort, _file: CShort, _bf: __sbuf, _lbfsize: CInt, _cookie: COpaquePointer, _ub: __sbuf, _extra: COpaquePointer, _ur: CInt, _ubuf: (CUnsignedChar, CUnsignedChar, CUnsignedChar), _nbuf: (CUnsignedChar), _lb: __sbuf, _blksize: CInt, _offset: fpos_t)
}
struct __sbuf {
  var _base: UnsafePointer<CUnsignedChar>
  var _size: CInt
  init(_base: UnsafePointer<CUnsignedChar>, _size: CInt)
}
struct __semid_ds_new {
  var sem_perm: ipc_perm
  var sem_base: __int32_t
  var sem_nsems: CUnsignedShort
  var sem_otime: time_t
  var sem_pad1: __int32_t
  var sem_ctime: time_t
  var sem_pad2: __int32_t
  var sem_pad3: (__int32_t, __int32_t, __int32_t, __int32_t)
  init(sem_perm: ipc_perm, sem_base: __int32_t, sem_nsems: CUnsignedShort, sem_otime: time_t, sem_pad1: __int32_t, sem_ctime: time_t, sem_pad2: __int32_t, sem_pad3: (__int32_t, __int32_t, __int32_t, __int32_t))
}
struct __shmid_ds_new {
  var shm_perm: ipc_perm
  var shm_segsz: UInt
  var shm_lpid: pid_t
  var shm_cpid: pid_t
  var shm_nattch: shmatt_t
  var shm_atime: time_t
  var shm_dtime: time_t
  var shm_ctime: time_t
  var shm_internal: COpaquePointer
  init(shm_perm: ipc_perm, shm_segsz: UInt, shm_lpid: pid_t, shm_cpid: pid_t, shm_nattch: shmatt_t, shm_atime: time_t, shm_dtime: time_t, shm_ctime: time_t, shm_internal: COpaquePointer)
}
struct __sigaction {
  var sa_mask: sigset_t
  var sa_flags: CInt
  init(sa_mask: sigset_t, sa_flags: CInt)
}
func __sigbits(__signo: CInt) -> CInt
func __sigbits(__signo: CInt) -> CInt
struct __siginfo {
  var si_signo: CInt
  var si_errno: CInt
  var si_code: CInt
  var si_pid: pid_t
  var si_uid: uid_t
  var si_status: CInt
  var si_addr: COpaquePointer
  var si_band: CLong
  var __pad: (CUnsignedLong, CUnsignedLong, CUnsignedLong, CUnsignedLong, CUnsignedLong, CUnsignedLong, CUnsignedLong)
  init(si_signo: CInt, si_errno: CInt, si_code: CInt, si_pid: pid_t, si_uid: uid_t, si_status: CInt, si_addr: COpaquePointer, si_band: CLong, __pad: (CUnsignedLong, CUnsignedLong, CUnsignedLong, CUnsignedLong, CUnsignedLong, CUnsignedLong, CUnsignedLong))
}
func __sincos(__x: CDouble, __sinp: CMutablePointer<CDouble>, __cosp: CMutablePointer<CDouble>)
func __sincos(__x: CDouble, __sinp: CMutablePointer<CDouble>, __cosp: CMutablePointer<CDouble>)
func __sincos_stret(_: CDouble) -> __double2
func __sincos_stret(_: CDouble) -> __double2
func __sincosf(__x: CFloat, __sinp: CMutablePointer<CFloat>, __cosp: CMutablePointer<CFloat>)
func __sincosf(__x: CFloat, __sinp: CMutablePointer<CFloat>, __cosp: CMutablePointer<CFloat>)
func __sincosf_stret(_: CFloat) -> __float2
func __sincosf_stret(_: CFloat) -> __float2
func __sincospi(__x: CDouble, __sinp: CMutablePointer<CDouble>, __cosp: CMutablePointer<CDouble>)
func __sincospi(__x: CDouble, __sinp: CMutablePointer<CDouble>, __cosp: CMutablePointer<CDouble>)
func __sincospi_stret(_: CDouble) -> __double2
func __sincospi_stret(_: CDouble) -> __double2
func __sincospif(__x: CFloat, __sinp: CMutablePointer<CFloat>, __cosp: CMutablePointer<CFloat>)
func __sincospif(__x: CFloat, __sinp: CMutablePointer<CFloat>, __cosp: CMutablePointer<CFloat>)
func __sincospif_stret(_: CFloat) -> __float2
func __sincospif_stret(_: CFloat) -> __float2
func __sinpi(_: CDouble) -> CDouble
func __sinpi(_: CDouble) -> CDouble
func __sinpif(_: CFloat) -> CFloat
func __sinpif(_: CFloat) -> CFloat
func __sputc(_c: CInt, _p: CMutablePointer<FILE>) -> CInt
func __sputc(_c: CInt, _p: CMutablePointer<FILE>) -> CInt
func __srget(_: CMutablePointer<FILE>) -> CInt
func __srget(_: CMutablePointer<FILE>) -> CInt
var __stderrp: UnsafePointer<FILE>
var __stdinp: UnsafePointer<FILE>
var __stdoutp: UnsafePointer<FILE>
func __svfscanf(_: CMutablePointer<FILE>, _: CString, _: CVaListPointer) -> CInt
func __svfscanf(_: CMutablePointer<FILE>, _: CString, _: CVaListPointer) -> CInt
func __swbuf(_: CInt, _: CMutablePointer<FILE>) -> CInt
func __swbuf(_: CInt, _: CMutablePointer<FILE>) -> CInt
func __tanpi(_: CDouble) -> CDouble
func __tanpi(_: CDouble) -> CDouble
func __tanpif(_: CFloat) -> CFloat
func __tanpif(_: CFloat) -> CFloat
func __tg_acos(__x: CDouble) -> CDouble
func __tg_acos(__x: CFloat) -> CFloat
func __tg_acos(__x: CDouble) -> CDouble
func __tg_acos(__x: CFloat) -> CFloat
func __tg_acosh(__x: CDouble) -> CDouble
func __tg_acosh(__x: CFloat) -> CFloat
func __tg_acosh(__x: CFloat) -> CFloat
func __tg_acosh(__x: CDouble) -> CDouble
func __tg_asin(__x: CDouble) -> CDouble
func __tg_asin(__x: CFloat) -> CFloat
func __tg_asin(__x: CFloat) -> CFloat
func __tg_asin(__x: CDouble) -> CDouble
func __tg_asinh(__x: CFloat) -> CFloat
func __tg_asinh(__x: CFloat) -> CFloat
func __tg_asinh(__x: CDouble) -> CDouble
func __tg_asinh(__x: CDouble) -> CDouble
func __tg_atan(__x: CFloat) -> CFloat
func __tg_atan(__x: CDouble) -> CDouble
func __tg_atan(__x: CFloat) -> CFloat
func __tg_atan(__x: CDouble) -> CDouble
func __tg_atan2(__x: CFloat, __y: CFloat) -> CFloat
func __tg_atan2(__x: CFloat, __y: CFloat) -> CFloat
func __tg_atan2(__x: CDouble, __y: CDouble) -> CDouble
func __tg_atan2(__x: CDouble, __y: CDouble) -> CDouble
func __tg_atanh(__x: CDouble) -> CDouble
func __tg_atanh(__x: CFloat) -> CFloat
func __tg_atanh(__x: CDouble) -> CDouble
func __tg_atanh(__x: CFloat) -> CFloat
func __tg_carg(__x: CFloat) -> CFloat
func __tg_carg(__x: CFloat) -> CFloat
func __tg_carg(__x: CDouble) -> CDouble
func __tg_carg(__x: CDouble) -> CDouble
func __tg_cbrt(__x: CFloat) -> CFloat
func __tg_cbrt(__x: CDouble) -> CDouble
func __tg_cbrt(__x: CFloat) -> CFloat
func __tg_cbrt(__x: CDouble) -> CDouble
func __tg_ceil(__x: CFloat) -> CFloat
func __tg_ceil(__x: CFloat) -> CFloat
func __tg_ceil(__x: CDouble) -> CDouble
func __tg_ceil(__x: CDouble) -> CDouble
func __tg_cimag(__x: CFloat) -> CFloat
func __tg_cimag(__x: CFloat) -> CFloat
func __tg_cimag(__x: CDouble) -> CDouble
func __tg_cimag(__x: CDouble) -> CDouble
func __tg_copysign(__x: CDouble, __y: CDouble) -> CDouble
func __tg_copysign(__x: CFloat, __y: CFloat) -> CFloat
func __tg_copysign(__x: CDouble, __y: CDouble) -> CDouble
func __tg_copysign(__x: CFloat, __y: CFloat) -> CFloat
func __tg_cos(__x: CFloat) -> CFloat
func __tg_cos(__x: CFloat) -> CFloat
func __tg_cos(__x: CDouble) -> CDouble
func __tg_cos(__x: CDouble) -> CDouble
func __tg_cosh(__x: CDouble) -> CDouble
func __tg_cosh(__x: CFloat) -> CFloat
func __tg_cosh(__x: CDouble) -> CDouble
func __tg_cosh(__x: CFloat) -> CFloat
func __tg_creal(__x: CFloat) -> CFloat
func __tg_creal(__x: CDouble) -> CDouble
func __tg_creal(__x: CFloat) -> CFloat
func __tg_creal(__x: CDouble) -> CDouble
func __tg_erf(__x: CDouble) -> CDouble
func __tg_erf(__x: CFloat) -> CFloat
func __tg_erf(__x: CDouble) -> CDouble
func __tg_erf(__x: CFloat) -> CFloat
func __tg_erfc(__x: CDouble) -> CDouble
func __tg_erfc(__x: CDouble) -> CDouble
func __tg_erfc(__x: CFloat) -> CFloat
func __tg_erfc(__x: CFloat) -> CFloat
func __tg_exp(__x: CDouble) -> CDouble
func __tg_exp(__x: CFloat) -> CFloat
func __tg_exp(__x: CFloat) -> CFloat
func __tg_exp(__x: CDouble) -> CDouble
func __tg_exp2(__x: CDouble) -> CDouble
func __tg_exp2(__x: CDouble) -> CDouble
func __tg_exp2(__x: CFloat) -> CFloat
func __tg_exp2(__x: CFloat) -> CFloat
func __tg_expm1(__x: CDouble) -> CDouble
func __tg_expm1(__x: CDouble) -> CDouble
func __tg_expm1(__x: CFloat) -> CFloat
func __tg_expm1(__x: CFloat) -> CFloat
func __tg_fabs(__x: CFloat) -> CFloat
func __tg_fabs(__x: CDouble) -> CDouble
func __tg_fabs(__x: CDouble) -> CDouble
func __tg_fabs(__x: CFloat) -> CFloat
func __tg_fdim(__x: CDouble, __y: CDouble) -> CDouble
func __tg_fdim(__x: CFloat, __y: CFloat) -> CFloat
func __tg_fdim(__x: CFloat, __y: CFloat) -> CFloat
func __tg_fdim(__x: CDouble, __y: CDouble) -> CDouble
func __tg_floor(__x: CDouble) -> CDouble
func __tg_floor(__x: CFloat) -> CFloat
func __tg_floor(__x: CDouble) -> CDouble
func __tg_floor(__x: CFloat) -> CFloat
func __tg_fma(__x: CFloat, __y: CFloat, __z: CFloat) -> CFloat
func __tg_fma(__x: CDouble, __y: CDouble, __z: CDouble) -> CDouble
func __tg_fma(__x: CFloat, __y: CFloat, __z: CFloat) -> CFloat
func __tg_fma(__x: CDouble, __y: CDouble, __z: CDouble) -> CDouble
func __tg_fmax(__x: CFloat, __y: CFloat) -> CFloat
func __tg_fmax(__x: CDouble, __y: CDouble) -> CDouble
func __tg_fmax(__x: CFloat, __y: CFloat) -> CFloat
func __tg_fmax(__x: CDouble, __y: CDouble) -> CDouble
func __tg_fmin(__x: CDouble, __y: CDouble) -> CDouble
func __tg_fmin(__x: CFloat, __y: CFloat) -> CFloat
func __tg_fmin(__x: CDouble, __y: CDouble) -> CDouble
func __tg_fmin(__x: CFloat, __y: CFloat) -> CFloat
func __tg_fmod(__x: CDouble, __y: CDouble) -> CDouble
func __tg_fmod(__x: CFloat, __y: CFloat) -> CFloat
func __tg_fmod(__x: CDouble, __y: CDouble) -> CDouble
func __tg_fmod(__x: CFloat, __y: CFloat) -> CFloat
func __tg_frexp(__x: CDouble, __y: CMutablePointer<CInt>) -> CDouble
func __tg_frexp(__x: CDouble, __y: CMutablePointer<CInt>) -> CDouble
func __tg_frexp(__x: CFloat, __y: CMutablePointer<CInt>) -> CFloat
func __tg_frexp(__x: CFloat, __y: CMutablePointer<CInt>) -> CFloat
func __tg_hypot(__x: CDouble, __y: CDouble) -> CDouble
func __tg_hypot(__x: CDouble, __y: CDouble) -> CDouble
func __tg_hypot(__x: CFloat, __y: CFloat) -> CFloat
func __tg_hypot(__x: CFloat, __y: CFloat) -> CFloat
func __tg_ilogb(__x: CFloat) -> CInt
func __tg_ilogb(__x: CFloat) -> CInt
func __tg_ilogb(__x: CDouble) -> CInt
func __tg_ilogb(__x: CDouble) -> CInt
func __tg_ldexp(__x: CFloat, __y: CInt) -> CFloat
func __tg_ldexp(__x: CDouble, __y: CInt) -> CDouble
func __tg_ldexp(__x: CFloat, __y: CInt) -> CFloat
func __tg_ldexp(__x: CDouble, __y: CInt) -> CDouble
func __tg_lgamma(__x: CDouble) -> CDouble
func __tg_lgamma(__x: CFloat) -> CFloat
func __tg_lgamma(__x: CDouble) -> CDouble
func __tg_lgamma(__x: CFloat) -> CFloat
func __tg_llrint(__x: CDouble) -> CLongLong
func __tg_llrint(__x: CFloat) -> CLongLong
func __tg_llrint(__x: CFloat) -> CLongLong
func __tg_llrint(__x: CDouble) -> CLongLong
func __tg_llround(__x: CDouble) -> CLongLong
func __tg_llround(__x: CFloat) -> CLongLong
func __tg_llround(__x: CDouble) -> CLongLong
func __tg_llround(__x: CFloat) -> CLongLong
func __tg_log(__x: CFloat) -> CFloat
func __tg_log(__x: CDouble) -> CDouble
func __tg_log(__x: CDouble) -> CDouble
func __tg_log(__x: CFloat) -> CFloat
func __tg_log10(__x: CFloat) -> CFloat
func __tg_log10(__x: CFloat) -> CFloat
func __tg_log10(__x: CDouble) -> CDouble
func __tg_log10(__x: CDouble) -> CDouble
func __tg_log1p(__x: CDouble) -> CDouble
func __tg_log1p(__x: CFloat) -> CFloat
func __tg_log1p(__x: CDouble) -> CDouble
func __tg_log1p(__x: CFloat) -> CFloat
func __tg_log2(__x: CFloat) -> CFloat
func __tg_log2(__x: CDouble) -> CDouble
func __tg_log2(__x: CDouble) -> CDouble
func __tg_log2(__x: CFloat) -> CFloat
func __tg_logb(__x: CDouble) -> CDouble
func __tg_logb(__x: CFloat) -> CFloat
func __tg_logb(__x: CDouble) -> CDouble
func __tg_logb(__x: CFloat) -> CFloat
func __tg_lrint(__x: CFloat) -> CLong
func __tg_lrint(__x: CDouble) -> CLong
func __tg_lrint(__x: CFloat) -> CLong
func __tg_lrint(__x: CDouble) -> CLong
func __tg_lround(__x: CFloat) -> CLong
func __tg_lround(__x: CDouble) -> CLong
func __tg_lround(__x: CFloat) -> CLong
func __tg_lround(__x: CDouble) -> CLong
func __tg_nearbyint(__x: CFloat) -> CFloat
func __tg_nearbyint(__x: CDouble) -> CDouble
func __tg_nearbyint(__x: CFloat) -> CFloat
func __tg_nearbyint(__x: CDouble) -> CDouble
func __tg_nextafter(__x: CDouble, __y: CDouble) -> CDouble
func __tg_nextafter(__x: CFloat, __y: CFloat) -> CFloat
func __tg_nextafter(__x: CDouble, __y: CDouble) -> CDouble
func __tg_nextafter(__x: CFloat, __y: CFloat) -> CFloat
func __tg_pow(__x: CFloat, __y: CFloat) -> CFloat
func __tg_pow(__x: CDouble, __y: CDouble) -> CDouble
func __tg_pow(__x: CFloat, __y: CFloat) -> CFloat
func __tg_pow(__x: CDouble, __y: CDouble) -> CDouble
func __tg_promote(_: CUnsignedLongLong) -> CDouble
func __tg_promote(_: CInt) -> CDouble
func __tg_promote(_: CUnsignedInt) -> CDouble
func __tg_promote(_: CLong) -> CDouble
func __tg_promote(_: CUnsignedLong) -> CDouble
func __tg_promote(_: CLongLong) -> CDouble
func __tg_promote(_: CUnsignedLongLong) -> CDouble
func __tg_promote(_: CFloat) -> CFloat
func __tg_promote(_: CDouble) -> CDouble
func __tg_promote(_: CInt) -> CDouble
func __tg_promote(_: CUnsignedInt) -> CDouble
func __tg_promote(_: CLong) -> CDouble
func __tg_promote(_: CUnsignedLong) -> CDouble
func __tg_promote(_: CLongLong) -> CDouble
func __tg_promote(_: CFloat) -> CFloat
func __tg_promote(_: CDouble) -> CDouble
func __tg_remainder(__x: CDouble, __y: CDouble) -> CDouble
func __tg_remainder(__x: CDouble, __y: CDouble) -> CDouble
func __tg_remainder(__x: CFloat, __y: CFloat) -> CFloat
func __tg_remainder(__x: CFloat, __y: CFloat) -> CFloat
func __tg_remquo(__x: CFloat, __y: CFloat, __z: CMutablePointer<CInt>) -> CFloat
func __tg_remquo(__x: CDouble, __y: CDouble, __z: CMutablePointer<CInt>) -> CDouble
func __tg_remquo(__x: CFloat, __y: CFloat, __z: CMutablePointer<CInt>) -> CFloat
func __tg_remquo(__x: CDouble, __y: CDouble, __z: CMutablePointer<CInt>) -> CDouble
func __tg_rint(__x: CDouble) -> CDouble
func __tg_rint(__x: CDouble) -> CDouble
func __tg_rint(__x: CFloat) -> CFloat
func __tg_rint(__x: CFloat) -> CFloat
func __tg_round(__x: CFloat) -> CFloat
func __tg_round(__x: CDouble) -> CDouble
func __tg_round(__x: CDouble) -> CDouble
func __tg_round(__x: CFloat) -> CFloat
func __tg_scalbln(__x: CDouble, __y: CLong) -> CDouble
func __tg_scalbln(__x: CFloat, __y: CLong) -> CFloat
func __tg_scalbln(__x: CDouble, __y: CLong) -> CDouble
func __tg_scalbln(__x: CFloat, __y: CLong) -> CFloat
func __tg_scalbn(__x: CDouble, __y: CInt) -> CDouble
func __tg_scalbn(__x: CFloat, __y: CInt) -> CFloat
func __tg_scalbn(__x: CDouble, __y: CInt) -> CDouble
func __tg_scalbn(__x: CFloat, __y: CInt) -> CFloat
func __tg_sin(__x: CFloat) -> CFloat
func __tg_sin(__x: CDouble) -> CDouble
func __tg_sin(__x: CDouble) -> CDouble
func __tg_sin(__x: CFloat) -> CFloat
func __tg_sinh(__x: CDouble) -> CDouble
func __tg_sinh(__x: CFloat) -> CFloat
func __tg_sinh(__x: CFloat) -> CFloat
func __tg_sinh(__x: CDouble) -> CDouble
func __tg_sqrt(__x: CDouble) -> CDouble
func __tg_sqrt(__x: CFloat) -> CFloat
func __tg_sqrt(__x: CFloat) -> CFloat
func __tg_sqrt(__x: CDouble) -> CDouble
func __tg_tan(__x: CDouble) -> CDouble
func __tg_tan(__x: CFloat) -> CFloat
func __tg_tan(__x: CFloat) -> CFloat
func __tg_tan(__x: CDouble) -> CDouble
func __tg_tanh(__x: CDouble) -> CDouble
func __tg_tanh(__x: CFloat) -> CFloat
func __tg_tanh(__x: CDouble) -> CDouble
func __tg_tanh(__x: CFloat) -> CFloat
func __tg_tgamma(__x: CDouble) -> CDouble
func __tg_tgamma(__x: CFloat) -> CFloat
func __tg_tgamma(__x: CDouble) -> CDouble
func __tg_tgamma(__x: CFloat) -> CFloat
func __tg_trunc(__x: CDouble) -> CDouble
func __tg_trunc(__x: CFloat) -> CFloat
func __tg_trunc(__x: CFloat) -> CFloat
func __tg_trunc(__x: CDouble) -> CDouble
func __tolower(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func __tolower(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func __toupper(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func __toupper(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
typealias __uint16_t = CUnsignedShort
typealias __uint32_t = CUnsignedInt
typealias __uint64_t = CUnsignedLongLong
typealias __uint8_t = CUnsignedChar
func __vsnprintf_chk(_: CMutablePointer<CChar>, _: UInt, _: CInt, _: UInt, _: CString, _: CVaListPointer) -> CInt
func __vsnprintf_chk(_: CMutablePointer<CChar>, _: UInt, _: CInt, _: UInt, _: CString, _: CVaListPointer) -> CInt
func __vsprintf_chk(_: CMutablePointer<CChar>, _: CInt, _: UInt, _: CString, _: CVaListPointer) -> CInt
func __vsprintf_chk(_: CMutablePointer<CChar>, _: CInt, _: UInt, _: CString, _: CVaListPointer) -> CInt
func __wcwidth(_c: __darwin_ct_rune_t) -> CInt
func __wcwidth(_c: __darwin_ct_rune_t) -> CInt
@noreturn func _exit(_: CInt)
@noreturn func _exit(_: CInt)
var _gmonparam: gmonparam
func _host_page_size(host: host_t, out_page_size: CMutablePointer<vm_size_t>) -> kern_return_t
func _host_page_size(host: host_t, out_page_size: CMutablePointer<vm_size_t>) -> kern_return_t
func _kernelrpc_mach_port_allocate_trap(target: mach_port_name_t, right: mach_port_right_t, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func _kernelrpc_mach_port_allocate_trap(target: mach_port_name_t, right: mach_port_right_t, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func _kernelrpc_mach_port_construct_trap(target: mach_port_name_t, options: CMutablePointer<mach_port_options_t>, context: UInt64, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func _kernelrpc_mach_port_construct_trap(target: mach_port_name_t, options: CMutablePointer<mach_port_options_t>, context: UInt64, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func _kernelrpc_mach_port_deallocate_trap(target: mach_port_name_t, name: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_deallocate_trap(target: mach_port_name_t, name: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_destroy_trap(target: mach_port_name_t, name: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_destroy_trap(target: mach_port_name_t, name: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_destruct_trap(target: mach_port_name_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: UInt64) -> kern_return_t
func _kernelrpc_mach_port_destruct_trap(target: mach_port_name_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: UInt64) -> kern_return_t
func _kernelrpc_mach_port_extract_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_extract_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_guard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: UInt64, strict: boolean_t) -> kern_return_t
func _kernelrpc_mach_port_guard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: UInt64, strict: boolean_t) -> kern_return_t
func _kernelrpc_mach_port_insert_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_insert_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_insert_right_trap(target: mach_port_name_t, name: mach_port_name_t, poly: mach_port_name_t, polyPoly: mach_msg_type_name_t) -> kern_return_t
func _kernelrpc_mach_port_insert_right_trap(target: mach_port_name_t, name: mach_port_name_t, poly: mach_port_name_t, polyPoly: mach_msg_type_name_t) -> kern_return_t
func _kernelrpc_mach_port_mod_refs_trap(target: mach_port_name_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) -> kern_return_t
func _kernelrpc_mach_port_mod_refs_trap(target: mach_port_name_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) -> kern_return_t
func _kernelrpc_mach_port_move_member_trap(target: mach_port_name_t, member: mach_port_name_t, after: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_move_member_trap(target: mach_port_name_t, member: mach_port_name_t, after: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_unguard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: UInt64) -> kern_return_t
func _kernelrpc_mach_port_unguard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: UInt64) -> kern_return_t
func _kernelrpc_mach_vm_allocate_trap(target: mach_port_name_t, addr: CMutablePointer<mach_vm_offset_t>, size: mach_vm_size_t, flags: CInt) -> kern_return_t
func _kernelrpc_mach_vm_allocate_trap(target: mach_port_name_t, addr: CMutablePointer<mach_vm_offset_t>, size: mach_vm_size_t, flags: CInt) -> kern_return_t
func _kernelrpc_mach_vm_deallocate_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t) -> kern_return_t
func _kernelrpc_mach_vm_deallocate_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t) -> kern_return_t
func _kernelrpc_mach_vm_map_trap(target: mach_port_name_t, address: CMutablePointer<mach_vm_offset_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: CInt, cur_protection: vm_prot_t) -> kern_return_t
func _kernelrpc_mach_vm_map_trap(target: mach_port_name_t, address: CMutablePointer<mach_vm_offset_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: CInt, cur_protection: vm_prot_t) -> kern_return_t
func _kernelrpc_mach_vm_protect_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
func _kernelrpc_mach_vm_protect_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
var _libiconv_version: CInt
@noreturn func _longjmp(_: CMutablePointer<CInt>, _: CInt)
@noreturn func _longjmp(_: CMutablePointer<CInt>, _: CInt)
func _mach_make_memory_entry(target_task: vm_map_t, size: CMutablePointer<memory_object_size_t>, offset: memory_object_offset_t, permission: vm_prot_t, object_handle: CMutablePointer<mem_entry_name_port_t>, parent_handle: mem_entry_name_port_t) -> kern_return_t
func _mach_make_memory_entry(target_task: vm_map_t, size: CMutablePointer<memory_object_size_t>, offset: memory_object_offset_t, permission: vm_prot_t, object_handle: CMutablePointer<mem_entry_name_port_t>, parent_handle: mem_entry_name_port_t) -> kern_return_t
struct _malloc_zone_t {
  var reserved1: COpaquePointer
  var reserved2: COpaquePointer
  var zone_name: CString
  var introspect: UnsafePointer<malloc_introspection_t>
  var version: CUnsignedInt
  init(reserved1: COpaquePointer, reserved2: COpaquePointer, zone_name: CString, introspect: UnsafePointer<malloc_introspection_t>, version: CUnsignedInt)
}
struct _opaque_pthread_attr_t {
  var __sig: CLong
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _opaque_pthread_cond_t {
  var __sig: CLong
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _opaque_pthread_condattr_t {
  var __sig: CLong
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _opaque_pthread_mutex_t {
  var __sig: CLong
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _opaque_pthread_mutexattr_t {
  var __sig: CLong
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _opaque_pthread_once_t {
  var __sig: CLong
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _opaque_pthread_rwlock_t {
  var __sig: CLong
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _opaque_pthread_rwlockattr_t {
  var __sig: CLong
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _opaque_pthread_t {
  var __sig: CLong
  var __cleanup_stack: UnsafePointer<__darwin_pthread_handler_rec>
  var __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__sig: CLong, __cleanup_stack: UnsafePointer<__darwin_pthread_handler_rec>, __opaque: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct _pcred {
  var pc_lock: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var pc_ucred: UnsafePointer<ucred>
  var p_ruid: uid_t
  var p_svuid: uid_t
  var p_rgid: gid_t
  var p_svgid: gid_t
  var p_refcnt: CInt
  init(pc_lock: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), pc_ucred: UnsafePointer<ucred>, p_ruid: uid_t, p_svuid: uid_t, p_rgid: gid_t, p_svgid: gid_t, p_refcnt: CInt)
}
func _setjmp(_: CMutablePointer<CInt>) -> CInt
func _setjmp(_: CMutablePointer<CInt>) -> CInt
struct _ucred {
  var cr_ref: Int32
  var cr_uid: uid_t
  var cr_ngroups: CShort
  var cr_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t)
  init(cr_ref: Int32, cr_uid: uid_t, cr_ngroups: CShort, cr_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t))
}
struct _unpcb_list_entry {
  var le_next: UInt32
  var le_prev: UInt32
  init(le_next: UInt32, le_prev: UInt32)
}
func a64l(_: CString) -> CLong
func a64l(_: CString) -> CLong
@noreturn func abort()
@noreturn func abort()
func abs(_: CInt) -> CInt
func abs(_: CInt) -> CInt
func accept(_: CInt, _: CMutablePointer<sockaddr>, _: CMutablePointer<socklen_t>) -> CInt
func accept(_: CInt, _: CMutablePointer<sockaddr>, _: CMutablePointer<socklen_t>) -> CInt
func access(_: CString, _: CInt) -> CInt
func access(_: CString, _: CInt) -> CInt
struct accessx_descriptor {
  var ad_name_offset: CUnsignedInt
  var ad_flags: CInt
  var ad_pad: (CInt, CInt)
  init(ad_name_offset: CUnsignedInt, ad_flags: CInt, ad_pad: (CInt, CInt))
}
func accessx_np(_: CConstPointer<accessx_descriptor>, _: UInt, _: CMutablePointer<CInt>, _: uid_t) -> CInt
func accessx_np(_: CConstPointer<accessx_descriptor>, _: UInt, _: CMutablePointer<CInt>, _: uid_t) -> CInt
func acct(_: CString) -> CInt
struct acct {
  var ac_comm: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ac_utime: comp_t
  var ac_stime: comp_t
  var ac_etime: comp_t
  var ac_btime: UInt32
  var ac_uid: uid_t
  var ac_gid: gid_t
  var ac_mem: UInt16
  var ac_io: comp_t
  var ac_tty: dev_t
  var ac_flag: UInt8
  init(ac_comm: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ac_utime: comp_t, ac_stime: comp_t, ac_etime: comp_t, ac_btime: UInt32, ac_uid: uid_t, ac_gid: gid_t, ac_mem: UInt16, ac_io: comp_t, ac_tty: dev_t, ac_flag: UInt8)
}
func acct(_: CString) -> CInt
func acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> CInt
func acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> CInt
func acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> CInt
func acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> CInt
func acl_calc_mask(acl_p: CMutablePointer<acl_t>) -> CInt
func acl_calc_mask(acl_p: CMutablePointer<acl_t>) -> CInt
func acl_clear_flags_np(flagset_d: acl_flagset_t) -> CInt
func acl_clear_flags_np(flagset_d: acl_flagset_t) -> CInt
func acl_clear_perms(permset_d: acl_permset_t) -> CInt
func acl_clear_perms(permset_d: acl_permset_t) -> CInt
func acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> CInt
func acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> CInt
func acl_copy_ext(buf_p: CMutableVoidPointer, acl: acl_t, size: Int) -> Int
func acl_copy_ext(buf_p: CMutableVoidPointer, acl: acl_t, size: Int) -> Int
func acl_copy_ext_native(buf_p: CMutableVoidPointer, acl: acl_t, size: Int) -> Int
func acl_copy_ext_native(buf_p: CMutableVoidPointer, acl: acl_t, size: Int) -> Int
func acl_copy_int(buf_p: CConstVoidPointer) -> acl_t
func acl_copy_int(buf_p: CConstVoidPointer) -> acl_t
func acl_copy_int_native(buf_p: CConstVoidPointer) -> acl_t
func acl_copy_int_native(buf_p: CConstVoidPointer) -> acl_t
func acl_create_entry(acl_p: CMutablePointer<acl_t>, entry_p: CMutablePointer<acl_entry_t>) -> CInt
func acl_create_entry(acl_p: CMutablePointer<acl_t>, entry_p: CMutablePointer<acl_entry_t>) -> CInt
func acl_create_entry_np(acl_p: CMutablePointer<acl_t>, entry_p: CMutablePointer<acl_entry_t>, entry_index: CInt) -> CInt
func acl_create_entry_np(acl_p: CMutablePointer<acl_t>, entry_p: CMutablePointer<acl_entry_t>, entry_index: CInt) -> CInt
func acl_delete_def_file(path_p: CString) -> CInt
func acl_delete_def_file(path_p: CString) -> CInt
func acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> CInt
func acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> CInt
func acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> CInt
func acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> CInt
func acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> CInt
func acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> CInt
func acl_dup(acl: acl_t) -> acl_t
func acl_dup(acl: acl_t) -> acl_t
struct acl_entry_id_t {
  init(_ value: CInt) {

  }
  var value: CInt
}
typealias acl_entry_t = COpaquePointer
struct acl_flag_t {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
typealias acl_flagset_t = COpaquePointer
func acl_free(obj_p: CMutableVoidPointer) -> CInt
func acl_free(obj_p: CMutableVoidPointer) -> CInt
func acl_from_text(buf_p: CString) -> acl_t
func acl_from_text(buf_p: CString) -> acl_t
func acl_get_entry(acl: acl_t, entry_id: CInt, entry_p: CMutablePointer<acl_entry_t>) -> CInt
func acl_get_entry(acl: acl_t, entry_id: CInt, entry_p: CMutablePointer<acl_entry_t>) -> CInt
func acl_get_fd(fd: CInt) -> acl_t
func acl_get_fd(fd: CInt) -> acl_t
func acl_get_fd_np(fd: CInt, type: acl_type_t) -> acl_t
func acl_get_fd_np(fd: CInt, type: acl_type_t) -> acl_t
func acl_get_file(path_p: CString, type: acl_type_t) -> acl_t
func acl_get_file(path_p: CString, type: acl_type_t) -> acl_t
func acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> CInt
func acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> CInt
func acl_get_flagset_np(obj_p: CMutableVoidPointer, flagset_p: CMutablePointer<acl_flagset_t>) -> CInt
func acl_get_flagset_np(obj_p: CMutableVoidPointer, flagset_p: CMutablePointer<acl_flagset_t>) -> CInt
func acl_get_link_np(path_p: CString, type: acl_type_t) -> acl_t
func acl_get_link_np(path_p: CString, type: acl_type_t) -> acl_t
func acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> CInt
func acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> CInt
func acl_get_permset(entry_d: acl_entry_t, permset_p: CMutablePointer<acl_permset_t>) -> CInt
func acl_get_permset(entry_d: acl_entry_t, permset_p: CMutablePointer<acl_permset_t>) -> CInt
func acl_get_permset_mask_np(entry_d: acl_entry_t, mask_p: CMutablePointer<acl_permset_mask_t>) -> CInt
func acl_get_permset_mask_np(entry_d: acl_entry_t, mask_p: CMutablePointer<acl_permset_mask_t>) -> CInt
func acl_get_qualifier(entry_d: acl_entry_t) -> COpaquePointer
func acl_get_qualifier(entry_d: acl_entry_t) -> COpaquePointer
func acl_get_tag_type(entry_d: acl_entry_t, tag_type_p: CMutablePointer<acl_tag_t>) -> CInt
func acl_get_tag_type(entry_d: acl_entry_t, tag_type_p: CMutablePointer<acl_tag_t>) -> CInt
func acl_init(count: CInt) -> acl_t
func acl_init(count: CInt) -> acl_t
func acl_maximal_permset_mask_np(mask_p: CMutablePointer<acl_permset_mask_t>) -> CInt
func acl_maximal_permset_mask_np(mask_p: CMutablePointer<acl_permset_mask_t>) -> CInt
struct acl_perm_t {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
typealias acl_permset_mask_t = UInt64
typealias acl_permset_t = COpaquePointer
func acl_set_fd(fd: CInt, acl: acl_t) -> CInt
func acl_set_fd(fd: CInt, acl: acl_t) -> CInt
func acl_set_fd_np(fd: CInt, acl: acl_t, acl_type: acl_type_t) -> CInt
func acl_set_fd_np(fd: CInt, acl: acl_t, acl_type: acl_type_t) -> CInt
func acl_set_file(path_p: CString, type: acl_type_t, acl: acl_t) -> CInt
func acl_set_file(path_p: CString, type: acl_type_t, acl: acl_t) -> CInt
func acl_set_flagset_np(obj_p: CMutableVoidPointer, flagset_d: acl_flagset_t) -> CInt
func acl_set_flagset_np(obj_p: CMutableVoidPointer, flagset_d: acl_flagset_t) -> CInt
func acl_set_link_np(path_p: CString, type: acl_type_t, acl: acl_t) -> CInt
func acl_set_link_np(path_p: CString, type: acl_type_t, acl: acl_t) -> CInt
func acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t) -> CInt
func acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t) -> CInt
func acl_set_permset_mask_np(entry_d: acl_entry_t, mask: acl_permset_mask_t) -> CInt
func acl_set_permset_mask_np(entry_d: acl_entry_t, mask: acl_permset_mask_t) -> CInt
func acl_set_qualifier(entry_d: acl_entry_t, tag_qualifier_p: CConstVoidPointer) -> CInt
func acl_set_qualifier(entry_d: acl_entry_t, tag_qualifier_p: CConstVoidPointer) -> CInt
func acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> CInt
func acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> CInt
func acl_size(acl: acl_t) -> Int
func acl_size(acl: acl_t) -> Int
typealias acl_t = COpaquePointer
struct acl_tag_t {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
func acl_to_text(acl: acl_t, len_p: CMutablePointer<Int>) -> UnsafePointer<CChar>
func acl_to_text(acl: acl_t, len_p: CMutablePointer<Int>) -> UnsafePointer<CChar>
struct acl_type_t {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
func acl_valid(acl: acl_t) -> CInt
func acl_valid(acl: acl_t) -> CInt
func acl_valid_fd_np(fd: CInt, type: acl_type_t, acl: acl_t) -> CInt
func acl_valid_fd_np(fd: CInt, type: acl_type_t, acl: acl_t) -> CInt
func acl_valid_file_np(path: CString, type: acl_type_t, acl: acl_t) -> CInt
func acl_valid_file_np(path: CString, type: acl_type_t, acl: acl_t) -> CInt
func acl_valid_link_np(path: CString, type: acl_type_t, acl: acl_t) -> CInt
func acl_valid_link_np(path: CString, type: acl_type_t, acl: acl_t) -> CInt
func acos(_: CDouble) -> CDouble
func acos(_: CDouble) -> CDouble
func acosf(_: CFloat) -> CFloat
func acosf(_: CFloat) -> CFloat
func acosh(_: CDouble) -> CDouble
func acosh(_: CDouble) -> CDouble
func acoshf(_: CFloat) -> CFloat
func acoshf(_: CFloat) -> CFloat
func act_get_state(target_act: thread_act_t, flavor: CInt, old_state: CMutablePointer<natural_t>, old_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func act_get_state(target_act: thread_act_t, flavor: CInt, old_state: CMutablePointer<natural_t>, old_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func act_set_state(target_act: thread_act_t, flavor: CInt, new_state: CMutablePointer<natural_t>, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
func act_set_state(target_act: thread_act_t, flavor: CInt, new_state: CMutablePointer<natural_t>, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
func add_profil(_: CMutablePointer<CChar>, _: UInt, _: CUnsignedLong, _: CUnsignedInt) -> CInt
func add_profil(_: CMutablePointer<CChar>, _: UInt, _: CUnsignedLong, _: CUnsignedInt) -> CInt
func addr2ascii(_: CInt, _: CConstVoidPointer, _: CInt, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func addr2ascii(_: CInt, _: CConstVoidPointer, _: CInt, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
typealias addr64_t = UInt64
struct addrinfo {
  var ai_flags: CInt
  var ai_family: CInt
  var ai_socktype: CInt
  var ai_protocol: CInt
  var ai_addrlen: socklen_t
  var ai_canonname: UnsafePointer<CChar>
  var ai_addr: UnsafePointer<sockaddr>
  var ai_next: UnsafePointer<addrinfo>
  init(ai_flags: CInt, ai_family: CInt, ai_socktype: CInt, ai_protocol: CInt, ai_addrlen: socklen_t, ai_canonname: UnsafePointer<CChar>, ai_addr: UnsafePointer<sockaddr>, ai_next: UnsafePointer<addrinfo>)
}
func addrsel_policy_init()
func addrsel_policy_init()
func adjtime(_: CConstPointer<timeval>, _: CMutablePointer<timeval>) -> CInt
func adjtime(_: CConstPointer<timeval>, _: CMutablePointer<timeval>) -> CInt
func aio_cancel(fd: CInt, aiocbp: CMutablePointer<aiocb>) -> CInt
func aio_cancel(fd: CInt, aiocbp: CMutablePointer<aiocb>) -> CInt
func aio_error(aiocbp: CConstPointer<aiocb>) -> CInt
func aio_error(aiocbp: CConstPointer<aiocb>) -> CInt
func aio_fsync(op: CInt, aiocbp: CMutablePointer<aiocb>) -> CInt
func aio_fsync(op: CInt, aiocbp: CMutablePointer<aiocb>) -> CInt
func aio_read(aiocbp: CMutablePointer<aiocb>) -> CInt
func aio_read(aiocbp: CMutablePointer<aiocb>) -> CInt
func aio_return(aiocbp: CMutablePointer<aiocb>) -> Int
func aio_return(aiocbp: CMutablePointer<aiocb>) -> Int
func aio_suspend(aiocblist: CConstPointer<UnsafePointer<aiocb>>, nent: CInt, timeoutp: CConstPointer<timespec>) -> CInt
func aio_suspend(aiocblist: CConstPointer<UnsafePointer<aiocb>>, nent: CInt, timeoutp: CConstPointer<timespec>) -> CInt
func aio_write(aiocbp: CMutablePointer<aiocb>) -> CInt
func aio_write(aiocbp: CMutablePointer<aiocb>) -> CInt
struct aiocb {
  var aio_fildes: CInt
  var aio_offset: off_t
  var aio_buf: COpaquePointer
  var aio_nbytes: UInt
  var aio_reqprio: CInt
  var aio_sigevent: sigevent
  var aio_lio_opcode: CInt
  init(aio_fildes: CInt, aio_offset: off_t, aio_buf: COpaquePointer, aio_nbytes: UInt, aio_reqprio: CInt, aio_sigevent: sigevent, aio_lio_opcode: CInt)
}
func alarm(_: CUnsignedInt) -> CUnsignedInt
func alarm(_: CUnsignedInt) -> CUnsignedInt
typealias alarm_port_t = alarm_t
typealias alarm_t = mach_port_t
typealias alarm_type_t = CInt
func alloca(_: UInt) -> COpaquePointer
func alloca(_: UInt) -> COpaquePointer
var alphaStage: Int {
  get {
    return
  }
}
func alphasort(_: CMutablePointer<UnsafePointer<dirent>>, _: CMutablePointer<UnsafePointer<dirent>>) -> CInt
func alphasort(_: CMutablePointer<UnsafePointer<dirent>>, _: CMutablePointer<UnsafePointer<dirent>>) -> CInt
struct appletalk_fdinfo {
  var pfi: proc_fileinfo
  var appletalkinfo: appletalk_info
  init(pfi: proc_fileinfo, appletalkinfo: appletalk_info)
}
struct appletalk_info {
  var atalk_stat: vinfo_stat
  init(atalk_stat: vinfo_stat)
}
func arc4random() -> UInt32
func arc4random() -> UInt32
func arc4random_addrandom(_: CMutablePointer<CUnsignedChar>, _: CInt)
func arc4random_addrandom(_: CMutablePointer<CUnsignedChar>, _: CInt)
func arc4random_buf(_: CMutableVoidPointer, _: UInt)
func arc4random_buf(_: CMutableVoidPointer, _: UInt)
func arc4random_stir()
func arc4random_stir()
func arc4random_uniform(_: UInt32) -> UInt32
func arc4random_uniform(_: UInt32) -> UInt32
func ascii2addr(_: CInt, _: CString, _: CMutableVoidPointer) -> CInt
func ascii2addr(_: CInt, _: CString, _: CMutableVoidPointer) -> CInt
func asctime(_: CConstPointer<tm>) -> UnsafePointer<CChar>
func asctime(_: CConstPointer<tm>) -> UnsafePointer<CChar>
func asctime_r(_: CConstPointer<tm>, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func asctime_r(_: CConstPointer<tm>, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func asin(_: CDouble) -> CDouble
func asin(_: CDouble) -> CDouble
func asinf(_: CFloat) -> CFloat
func asinf(_: CFloat) -> CFloat
func asinh(_: CDouble) -> CDouble
func asinh(_: CDouble) -> CDouble
func asinhf(_: CFloat) -> CFloat
func asinhf(_: CFloat) -> CFloat
func atan(_: CDouble) -> CDouble
func atan(_: CDouble) -> CDouble
func atan2(_: CDouble, _: CDouble) -> CDouble
func atan2(_: CDouble, _: CDouble) -> CDouble
func atan2f(_: CFloat, _: CFloat) -> CFloat
func atan2f(_: CFloat, _: CFloat) -> CFloat
func atanf(_: CFloat) -> CFloat
func atanf(_: CFloat) -> CFloat
func atanh(_: CDouble) -> CDouble
func atanh(_: CDouble) -> CDouble
func atanhf(_: CFloat) -> CFloat
func atanhf(_: CFloat) -> CFloat
func atexit_b(_: (() -> Void)!) -> CInt
func atexit_b(_: (() -> Void)!) -> CInt
func atof(_: CString) -> CDouble
func atof(_: CString) -> CDouble
func atoi(_: CString) -> CInt
func atoi(_: CString) -> CInt
func atol(_: CString) -> CLong
func atol(_: CString) -> CLong
func atoll(_: CString) -> CLongLong
func atoll(_: CString) -> CLongLong
typealias attrgroup_t = UInt32
struct attribute_set {
  var commonattr: attrgroup_t
  var volattr: attrgroup_t
  var dirattr: attrgroup_t
  var fileattr: attrgroup_t
  var forkattr: attrgroup_t
  init(commonattr: attrgroup_t, volattr: attrgroup_t, dirattr: attrgroup_t, fileattr: attrgroup_t, forkattr: attrgroup_t)
}
typealias attribute_set_t = attribute_set
struct attrlist {
  var bitmapcount: u_short
  var reserved: UInt16
  var commonattr: attrgroup_t
  var volattr: attrgroup_t
  var dirattr: attrgroup_t
  var fileattr: attrgroup_t
  var forkattr: attrgroup_t
  init(bitmapcount: u_short, reserved: UInt16, commonattr: attrgroup_t, volattr: attrgroup_t, dirattr: attrgroup_t, fileattr: attrgroup_t, forkattr: attrgroup_t)
}
struct attrreference {
  var attr_dataoffset: Int32
  var attr_length: UInt32
  init(attr_dataoffset: Int32, attr_length: UInt32)
}
typealias attrreference_t = attrreference
struct au_arb_t {
  var howtopr: u_char
  var bu: u_char
  var uc: u_char
  var data: UnsafePointer<u_char>
  init(howtopr: u_char, bu: u_char, uc: u_char, data: UnsafePointer<u_char>)
}
struct au_arg32_t {
  var no: u_char
  var val: UInt32
  var len: UInt16
  var text: UnsafePointer<CChar>
  init(no: u_char, val: UInt32, len: UInt16, text: UnsafePointer<CChar>)
}
struct au_arg64_t {
  var no: u_char
  var val: UInt64
  var len: UInt16
  var text: UnsafePointer<CChar>
  init(no: u_char, val: UInt64, len: UInt16, text: UnsafePointer<CChar>)
}
typealias au_asflgs_t = UInt64
typealias au_asid_t = pid_t
struct au_attr32_t {
  var mode: UInt32
  var uid: UInt32
  var gid: UInt32
  var fsid: UInt32
  var nid: UInt64
  var dev: UInt32
  init(mode: UInt32, uid: UInt32, gid: UInt32, fsid: UInt32, nid: UInt64, dev: UInt32)
}
struct au_attr64_t {
  var mode: UInt32
  var uid: UInt32
  var gid: UInt32
  var fsid: UInt32
  var nid: UInt64
  var dev: UInt64
  init(mode: UInt32, uid: UInt32, gid: UInt32, fsid: UInt32, nid: UInt64, dev: UInt64)
}
func au_bsm_to_domain(bsm_domain: u_short, local_domainp: CMutablePointer<CInt>) -> CInt
func au_bsm_to_domain(bsm_domain: u_short, local_domainp: CMutablePointer<CInt>) -> CInt
func au_bsm_to_errno(bsm_error: u_char, errorp: CMutablePointer<CInt>) -> CInt
func au_bsm_to_errno(bsm_error: u_char, errorp: CMutablePointer<CInt>) -> CInt
func au_bsm_to_fcntl_cmd(bsm_fcntl_cmd: u_short, local_fcntl_cmdp: CMutablePointer<CInt>) -> CInt
func au_bsm_to_fcntl_cmd(bsm_fcntl_cmd: u_short, local_fcntl_cmdp: CMutablePointer<CInt>) -> CInt
func au_bsm_to_socket_type(bsm_socket_type: u_short, local_socket_typep: CMutablePointer<CInt>) -> CInt
func au_bsm_to_socket_type(bsm_socket_type: u_short, local_socket_typep: CMutablePointer<CInt>) -> CInt
struct au_class_ent {
  var ac_name: UnsafePointer<CChar>
  var ac_class: au_class_t
  var ac_desc: UnsafePointer<CChar>
  init(ac_name: UnsafePointer<CChar>, ac_class: au_class_t, ac_desc: UnsafePointer<CChar>)
}
typealias au_class_ent_t = au_class_ent
typealias au_class_t = UInt32
func au_close(d: CInt, keep: CInt, event: CShort) -> CInt
func au_close(d: CInt, keep: CInt, event: CShort) -> CInt
func au_close_buffer(d: CInt, event: CShort, buffer: CMutablePointer<u_char>, buflen: CMutablePointer<UInt>) -> CInt
func au_close_buffer(d: CInt, event: CShort, buffer: CMutablePointer<u_char>, buflen: CMutablePointer<UInt>) -> CInt
func au_close_token(tok: COpaquePointer, buffer: CMutablePointer<u_char>, buflen: CMutablePointer<UInt>) -> CInt
func au_close_token(tok: COpaquePointer, buffer: CMutablePointer<u_char>, buflen: CMutablePointer<UInt>) -> CInt
func au_domain_to_bsm(local_domain: CInt) -> u_short
func au_domain_to_bsm(local_domain: CInt) -> u_short
typealias au_emod_t = UInt16
func au_errno_to_bsm(local_errno: CInt) -> u_char
func au_errno_to_bsm(local_errno: CInt) -> u_char
struct au_evclass_map {
  var ec_number: au_event_t
  var ec_class: au_class_t
  init(ec_number: au_event_t, ec_class: au_class_t)
}
typealias au_evclass_map_t = au_evclass_map
struct au_event_ent {
  var ae_number: au_event_t
  var ae_name: UnsafePointer<CChar>
  var ae_desc: UnsafePointer<CChar>
  var ae_class: au_class_t
  init(ae_number: au_event_t, ae_name: UnsafePointer<CChar>, ae_desc: UnsafePointer<CChar>, ae_class: au_class_t)
}
typealias au_event_ent_t = au_event_ent
typealias au_event_t = UInt16
struct au_execarg_t {
  var count: UInt32
  var text: (UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>)
  init(count: UInt32, text: (UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>))
}
struct au_execenv_t {
  var count: UInt32
  var text: (UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>)
  init(count: UInt32, text: (UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>, UnsafePointer<CChar>))
}
struct au_exit_t {
  var status: UInt32
  var ret: UInt32
  init(status: UInt32, ret: UInt32)
}
func au_fcntl_cmd_to_bsm(local_fcntl_command: CInt) -> u_short
func au_fcntl_cmd_to_bsm(local_fcntl_command: CInt) -> u_short
func au_fetch_tok(tok: CMutablePointer<tokenstr_t>, buf: CMutablePointer<u_char>, len: CInt) -> CInt
func au_fetch_tok(tok: CMutablePointer<tokenstr_t>, buf: CMutablePointer<u_char>, len: CInt) -> CInt
struct au_file_t {
  var s: UInt32
  var ms: UInt32
  var len: UInt16
  var name: UnsafePointer<CChar>
  init(s: UInt32, ms: UInt32, len: UInt16, name: UnsafePointer<CChar>)
}
func au_free_token(tok: COpaquePointer)
func au_free_token(tok: COpaquePointer)
typealias au_fstat_t = audit_fstat
func au_get_state() -> CInt
func au_get_state() -> CInt
struct au_groups_t {
  var no: UInt16
  var list: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(no: UInt16, list: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
struct au_header32_ex_t {
  var size: UInt32
  var version: u_char
  var e_type: UInt16
  var e_mod: UInt16
  var ad_type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
  var s: UInt32
  var ms: UInt32
  init(size: UInt32, version: u_char, e_type: UInt16, e_mod: UInt16, ad_type: UInt32, addr: (UInt32, UInt32, UInt32, UInt32), s: UInt32, ms: UInt32)
}
struct au_header32_t {
  var size: UInt32
  var version: u_char
  var e_type: UInt16
  var e_mod: UInt16
  var s: UInt32
  var ms: UInt32
  init(size: UInt32, version: u_char, e_type: UInt16, e_mod: UInt16, s: UInt32, ms: UInt32)
}
struct au_header64_ex_t {
  var size: UInt32
  var version: u_char
  var e_type: UInt16
  var e_mod: UInt16
  var ad_type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
  var s: UInt64
  var ms: UInt64
  init(size: UInt32, version: u_char, e_type: UInt16, e_mod: UInt16, ad_type: UInt32, addr: (UInt32, UInt32, UInt32, UInt32), s: UInt64, ms: UInt64)
}
struct au_header64_t {
  var size: UInt32
  var version: u_char
  var e_type: UInt16
  var e_mod: UInt16
  var s: UInt64
  var ms: UInt64
  init(size: UInt32, version: u_char, e_type: UInt16, e_mod: UInt16, s: UInt64, ms: UInt64)
}
typealias au_id_t = uid_t
struct au_inaddr_ex_t {
  var type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
  init(type: UInt32, addr: (UInt32, UInt32, UInt32, UInt32))
}
struct au_inaddr_t {
  var addr: UInt32
  init(addr: UInt32)
}
struct au_invalid_t {
  var length: UInt16
  var data: UnsafePointer<CChar>
  init(length: UInt16, data: UnsafePointer<CChar>)
}
struct au_ip_t {
  var version: u_char
  var tos: u_char
  var len: UInt16
  var id: UInt16
  var offset: UInt16
  var ttl: u_char
  var prot: u_char
  var chksm: UInt16
  var src: UInt32
  var dest: UInt32
  init(version: u_char, tos: u_char, len: UInt16, id: UInt16, offset: UInt16, ttl: u_char, prot: u_char, chksm: UInt16, src: UInt32, dest: UInt32)
}
struct au_ipc_t {
  var type: u_char
  var id: UInt32
  init(type: u_char, id: UInt32)
}
struct au_ipcperm_t {
  var uid: UInt32
  var gid: UInt32
  var puid: UInt32
  var pgid: UInt32
  var mode: UInt32
  var seq: UInt32
  var key: UInt32
  init(uid: UInt32, gid: UInt32, puid: UInt32, pgid: UInt32, mode: UInt32, seq: UInt32, key: UInt32)
}
struct au_iport_t {
  var port: UInt16
  init(port: UInt16)
}
struct au_kevent_t {
  var ident: UInt32
  var filter: UInt16
  var flags: UInt16
  var fflags: UInt32
  var data: UInt32
  init(ident: UInt32, filter: UInt16, flags: UInt16, fflags: UInt32, data: UInt32)
}
struct au_mask {
  var am_success: CUnsignedInt
  var am_failure: CUnsignedInt
  init(am_success: CUnsignedInt, am_failure: CUnsignedInt)
}
typealias au_mask_t = au_mask
func au_notify_initialize() -> UInt32
func au_notify_initialize() -> UInt32
func au_notify_terminate() -> CInt
func au_notify_terminate() -> CInt
struct au_opaque_t {
  var size: UInt16
  var data: UnsafePointer<CChar>
  init(size: UInt16, data: UnsafePointer<CChar>)
}
func au_open() -> CInt
func au_open() -> CInt
struct au_path_t {
  var len: UInt16
  var path: UnsafePointer<CChar>
  init(len: UInt16, path: UnsafePointer<CChar>)
}
func au_poltostr(policy: CInt, maxsize: UInt, buf: CMutablePointer<CChar>) -> Int
func au_poltostr(policy: CInt, maxsize: UInt, buf: CMutablePointer<CChar>) -> Int
func au_preselect(event: au_event_t, mask_p: CMutablePointer<au_mask_t>, sorf: CInt, flag: CInt) -> CInt
func au_preselect(event: au_event_t, mask_p: CMutablePointer<au_mask_t>, sorf: CInt, flag: CInt) -> CInt
func au_print_flags_tok(outfp: CMutablePointer<FILE>, tok: CMutablePointer<tokenstr_t>, del: CMutablePointer<CChar>, oflags: CInt)
func au_print_flags_tok(outfp: CMutablePointer<FILE>, tok: CMutablePointer<tokenstr_t>, del: CMutablePointer<CChar>, oflags: CInt)
func au_print_tok(outfp: CMutablePointer<FILE>, tok: CMutablePointer<tokenstr_t>, del: CMutablePointer<CChar>, raw: CChar, sfrm: CChar)
func au_print_tok(outfp: CMutablePointer<FILE>, tok: CMutablePointer<tokenstr_t>, del: CMutablePointer<CChar>, raw: CChar, sfrm: CChar)
func au_print_tok_xml(outfp: CMutablePointer<FILE>, tok: CMutablePointer<tokenstr_t>, del: CMutablePointer<CChar>, raw: CChar, sfrm: CChar)
func au_print_tok_xml(outfp: CMutablePointer<FILE>, tok: CMutablePointer<tokenstr_t>, del: CMutablePointer<CChar>, raw: CChar, sfrm: CChar)
func au_print_xml_footer(outfp: CMutablePointer<FILE>)
func au_print_xml_footer(outfp: CMutablePointer<FILE>)
func au_print_xml_header(outfp: CMutablePointer<FILE>)
func au_print_xml_header(outfp: CMutablePointer<FILE>)
struct au_proc32_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tid32_t
  init(auid: UInt32, euid: UInt32, egid: UInt32, ruid: UInt32, rgid: UInt32, pid: UInt32, sid: UInt32, tid: au_tid32_t)
}
struct au_proc32ex_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tidaddr32_t
  init(auid: UInt32, euid: UInt32, egid: UInt32, ruid: UInt32, rgid: UInt32, pid: UInt32, sid: UInt32, tid: au_tidaddr32_t)
}
struct au_proc64_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tid64_t
  init(auid: UInt32, euid: UInt32, egid: UInt32, ruid: UInt32, rgid: UInt32, pid: UInt32, sid: UInt32, tid: au_tid64_t)
}
struct au_proc64ex_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tidaddr64_t
  init(auid: UInt32, euid: UInt32, egid: UInt32, ruid: UInt32, rgid: UInt32, pid: UInt32, sid: UInt32, tid: au_tidaddr64_t)
}
struct au_qctrl {
  var aq_hiwater: CInt
  var aq_lowater: CInt
  var aq_bufsz: CInt
  var aq_delay: CInt
  var aq_minfree: CInt
  init(aq_hiwater: CInt, aq_lowater: CInt, aq_bufsz: CInt, aq_delay: CInt, aq_minfree: CInt)
}
typealias au_qctrl_t = au_qctrl
func au_read_rec(fp: CMutablePointer<FILE>, buf: CMutablePointer<UnsafePointer<u_char>>) -> CInt
func au_read_rec(fp: CMutablePointer<FILE>, buf: CMutablePointer<UnsafePointer<u_char>>) -> CInt
struct au_ret32_t {
  var status: u_char
  var ret: UInt32
  init(status: u_char, ret: UInt32)
}
struct au_ret64_t {
  var err: u_char
  var val: UInt64
  init(err: u_char, val: UInt64)
}
struct au_seq_t {
  var seqno: UInt32
  init(seqno: UInt32)
}
struct au_session {
  var as_aia_p: UnsafePointer<auditinfo_addr_t>
  var as_mask: au_mask_t
  init(as_aia_p: UnsafePointer<auditinfo_addr_t>, as_mask: au_mask_t)
}
typealias au_session_t = au_session
func au_sflagstostr(flags: UInt64, maxsize: UInt, buf: CMutablePointer<CChar>) -> Int
func au_sflagstostr(flags: UInt64, maxsize: UInt, buf: CMutablePointer<CChar>) -> Int
struct au_socket_ex32_t {
  var domain: UInt16
  var type: UInt16
  var atype: UInt16
  var l_port: UInt16
  var l_addr: (UInt32, UInt32, UInt32, UInt32)
  var r_port: UInt32
  var r_addr: (UInt32, UInt32, UInt32, UInt32)
  init(domain: UInt16, type: UInt16, atype: UInt16, l_port: UInt16, l_addr: (UInt32, UInt32, UInt32, UInt32), r_port: UInt32, r_addr: (UInt32, UInt32, UInt32, UInt32))
}
struct au_socket_t {
  var type: UInt16
  var l_port: UInt16
  var l_addr: UInt32
  var r_port: UInt16
  var r_addr: UInt32
  init(type: UInt16, l_port: UInt16, l_addr: UInt32, r_port: UInt16, r_addr: UInt32)
}
func au_socket_type_to_bsm(local_socket_type: CInt) -> u_short
func au_socket_type_to_bsm(local_socket_type: CInt) -> u_short
struct au_socketinet32_t {
  var family: UInt16
  var port: UInt16
  var addr: UInt32
  init(family: UInt16, port: UInt16, addr: UInt32)
}
struct au_socketinet_ex32_t {
  var family: UInt16
  var port: UInt16
  var addr: (UInt32, UInt32, UInt32, UInt32)
  init(family: UInt16, port: UInt16, addr: (UInt32, UInt32, UInt32, UInt32))
}
struct au_socketunix_t {
  var family: UInt16
  var path: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(family: UInt16, path: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
typealias au_stat_t = audit_stat
func au_strerror(bsm_error: u_char) -> CString
func au_strerror(bsm_error: u_char) -> CString
func au_strtopol(polstr: CString, policy: CMutablePointer<CInt>) -> CInt
func au_strtopol(polstr: CString, policy: CMutablePointer<CInt>) -> CInt
func au_strtosflags(sflagsstr: CString, flags: CMutablePointer<UInt64>) -> CInt
func au_strtosflags(sflagsstr: CString, flags: CMutablePointer<UInt64>) -> CInt
struct au_subject32_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tid32_t
  init(auid: UInt32, euid: UInt32, egid: UInt32, ruid: UInt32, rgid: UInt32, pid: UInt32, sid: UInt32, tid: au_tid32_t)
}
struct au_subject32ex_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tidaddr32_t
  init(auid: UInt32, euid: UInt32, egid: UInt32, ruid: UInt32, rgid: UInt32, pid: UInt32, sid: UInt32, tid: au_tidaddr32_t)
}
struct au_subject64_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tid64_t
  init(auid: UInt32, euid: UInt32, egid: UInt32, ruid: UInt32, rgid: UInt32, pid: UInt32, sid: UInt32, tid: au_tid64_t)
}
struct au_subject64ex_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tidaddr64_t
  init(auid: UInt32, euid: UInt32, egid: UInt32, ruid: UInt32, rgid: UInt32, pid: UInt32, sid: UInt32, tid: au_tidaddr64_t)
}
struct au_text_t {
  var len: UInt16
  var text: UnsafePointer<CChar>
  init(len: UInt16, text: UnsafePointer<CChar>)
}
struct au_tid {
  var port: dev_t
  var machine: UInt32
  init(port: dev_t, machine: UInt32)
}
struct au_tid32 {
  var port: UInt32
  var addr: UInt32
  init(port: UInt32, addr: UInt32)
}
typealias au_tid32_t = au_tid32
struct au_tid64 {
  var port: UInt64
  var addr: UInt32
  init(port: UInt64, addr: UInt32)
}
typealias au_tid64_t = au_tid64
struct au_tid_addr {
  var at_port: dev_t
  var at_type: UInt32
  var at_addr: (UInt32, UInt32, UInt32, UInt32)
  init(at_port: dev_t, at_type: UInt32, at_addr: (UInt32, UInt32, UInt32, UInt32))
}
typealias au_tid_addr_t = au_tid_addr
typealias au_tid_t = au_tid
struct au_tidaddr32 {
  var port: UInt32
  var type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
  init(port: UInt32, type: UInt32, addr: (UInt32, UInt32, UInt32, UInt32))
}
typealias au_tidaddr32_t = au_tidaddr32
struct au_tidaddr64 {
  var port: UInt64
  var type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
  init(port: UInt64, type: UInt32, addr: (UInt32, UInt32, UInt32, UInt32))
}
typealias au_tidaddr64_t = au_tidaddr64
func au_to_arg(n: CChar, text: CString, v: UInt32) -> COpaquePointer
func au_to_arg(n: CChar, text: CString, v: UInt32) -> COpaquePointer
func au_to_arg32(n: CChar, text: CString, v: UInt32) -> COpaquePointer
func au_to_arg32(n: CChar, text: CString, v: UInt32) -> COpaquePointer
func au_to_arg64(n: CChar, text: CString, v: UInt64) -> COpaquePointer
func au_to_arg64(n: CChar, text: CString, v: UInt64) -> COpaquePointer
func au_to_data(unit_print: CChar, unit_type: CChar, unit_count: CChar, p: CString) -> COpaquePointer
func au_to_data(unit_print: CChar, unit_type: CChar, unit_count: CChar, p: CString) -> COpaquePointer
func au_to_exec_args(argv: CMutablePointer<UnsafePointer<CChar>>) -> COpaquePointer
func au_to_exec_args(argv: CMutablePointer<UnsafePointer<CChar>>) -> COpaquePointer
func au_to_exec_env(envp: CMutablePointer<UnsafePointer<CChar>>) -> COpaquePointer
func au_to_exec_env(envp: CMutablePointer<UnsafePointer<CChar>>) -> COpaquePointer
func au_to_exit(retval: CInt, err: CInt) -> COpaquePointer
func au_to_exit(retval: CInt, err: CInt) -> COpaquePointer
func au_to_file(file: CString, tm: timeval) -> COpaquePointer
func au_to_file(file: CString, tm: timeval) -> COpaquePointer
func au_to_groups(groups: CMutablePointer<CInt>) -> COpaquePointer
func au_to_groups(groups: CMutablePointer<CInt>) -> COpaquePointer
func au_to_header(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header32(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header32(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header32_ex(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header32_ex(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header32_ex_tm(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t, tm: timeval, aia: CMutablePointer<auditinfo_addr>) -> COpaquePointer
func au_to_header32_ex_tm(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t, tm: timeval, aia: CMutablePointer<auditinfo_addr>) -> COpaquePointer
func au_to_header32_tm(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t, tm: timeval) -> COpaquePointer
func au_to_header32_tm(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t, tm: timeval) -> COpaquePointer
func au_to_header64(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header64(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header64_tm(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t, tm: timeval) -> COpaquePointer
func au_to_header64_tm(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t, tm: timeval) -> COpaquePointer
func au_to_header_ex(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header_ex(rec_size: CInt, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_in_addr(internet_addr: CMutablePointer<in_addr>) -> COpaquePointer
func au_to_in_addr(internet_addr: CMutablePointer<in_addr>) -> COpaquePointer
func au_to_in_addr_ex(internet_addr: CMutablePointer<in6_addr>) -> COpaquePointer
func au_to_in_addr_ex(internet_addr: CMutablePointer<in6_addr>) -> COpaquePointer
func au_to_ip(ip: COpaquePointer) -> COpaquePointer
func au_to_ip(ip: COpaquePointer) -> COpaquePointer
func au_to_ipc(type: CChar, id: CInt) -> COpaquePointer
func au_to_ipc(type: CChar, id: CInt) -> COpaquePointer
func au_to_ipc_perm(perm: CMutablePointer<ipc_perm>) -> COpaquePointer
func au_to_ipc_perm(perm: CMutablePointer<ipc_perm>) -> COpaquePointer
func au_to_iport(iport: UInt16) -> COpaquePointer
func au_to_iport(iport: UInt16) -> COpaquePointer
func au_to_kevent(kev: CMutablePointer<kevent>) -> COpaquePointer
func au_to_kevent(kev: CMutablePointer<kevent>) -> COpaquePointer
func au_to_me() -> COpaquePointer
func au_to_me() -> COpaquePointer
func au_to_newgroups(n: UInt16, groups: CMutablePointer<gid_t>) -> COpaquePointer
func au_to_newgroups(n: UInt16, groups: CMutablePointer<gid_t>) -> COpaquePointer
func au_to_opaque(data: CString, bytes: UInt16) -> COpaquePointer
func au_to_opaque(data: CString, bytes: UInt16) -> COpaquePointer
func au_to_path(path: CString) -> COpaquePointer
func au_to_path(path: CString) -> COpaquePointer
func au_to_process(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process32(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process32(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process32_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_process32_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_process64(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process64(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process64_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_process64_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_process_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_process_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_return(status: CChar, ret: UInt32) -> COpaquePointer
func au_to_return(status: CChar, ret: UInt32) -> COpaquePointer
func au_to_return32(status: CChar, ret: UInt32) -> COpaquePointer
func au_to_return32(status: CChar, ret: UInt32) -> COpaquePointer
func au_to_return64(status: CChar, ret: UInt64) -> COpaquePointer
func au_to_return64(status: CChar, ret: UInt64) -> COpaquePointer
func au_to_seq(audit_count: CLong) -> COpaquePointer
func au_to_seq(audit_count: CLong) -> COpaquePointer
func au_to_sock_inet(so: CMutablePointer<sockaddr_in>) -> COpaquePointer
func au_to_sock_inet(so: CMutablePointer<sockaddr_in>) -> COpaquePointer
func au_to_sock_inet128(so: CMutablePointer<sockaddr_in6>) -> COpaquePointer
func au_to_sock_inet128(so: CMutablePointer<sockaddr_in6>) -> COpaquePointer
func au_to_sock_inet32(so: CMutablePointer<sockaddr_in>) -> COpaquePointer
func au_to_sock_inet32(so: CMutablePointer<sockaddr_in>) -> COpaquePointer
func au_to_sock_unix(so: CMutablePointer<sockaddr_un>) -> COpaquePointer
func au_to_sock_unix(so: CMutablePointer<sockaddr_un>) -> COpaquePointer
func au_to_socket_ex(so_domain: u_short, so_type: u_short, sa_local: CMutablePointer<sockaddr>, sa_remote: CMutablePointer<sockaddr>) -> COpaquePointer
func au_to_socket_ex(so_domain: u_short, so_type: u_short, sa_local: CMutablePointer<sockaddr>, sa_remote: CMutablePointer<sockaddr>) -> COpaquePointer
func au_to_subject(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject32(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject32(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject32_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_subject32_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_subject64(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject64(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject64_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_subject64_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_subject_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_subject_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_text(text: CString) -> COpaquePointer
func au_to_text(text: CString) -> COpaquePointer
func au_to_trailer(rec_size: CInt) -> COpaquePointer
func au_to_trailer(rec_size: CInt) -> COpaquePointer
func au_to_zonename(zonename: CString) -> COpaquePointer
func au_to_zonename(zonename: CString) -> COpaquePointer
struct au_trailer_t {
  var magic: UInt16
  var count: UInt32
  init(magic: UInt16, count: UInt32)
}
struct au_user_ent {
  var au_name: UnsafePointer<CChar>
  var au_always: au_mask_t
  var au_never: au_mask_t
  init(au_name: UnsafePointer<CChar>, au_always: au_mask_t, au_never: au_mask_t)
}
typealias au_user_ent_t = au_user_ent
func au_user_mask(username: CMutablePointer<CChar>, mask_p: CMutablePointer<au_mask_t>) -> CInt
func au_user_mask(username: CMutablePointer<CChar>, mask_p: CMutablePointer<au_mask_t>) -> CInt
func au_write(d: CInt, m: COpaquePointer) -> CInt
func au_write(d: CInt, m: COpaquePointer) -> CInt
struct au_zonename_t {
  var len: UInt16
  var zonename: UnsafePointer<CChar>
  init(len: UInt16, zonename: UnsafePointer<CChar>)
}
func audit(_: CConstVoidPointer, _: CInt) -> CInt
func audit(_: CConstVoidPointer, _: CInt) -> CInt
struct audit_fstat {
  var af_filesz: UInt64
  var af_currsz: UInt64
  init(af_filesz: UInt64, af_currsz: UInt64)
}
func audit_get_car(path: CMutablePointer<CChar>, sz: UInt) -> CInt
func audit_get_car(path: CMutablePointer<CChar>, sz: UInt) -> CInt
func audit_get_class(evc_map: CMutablePointer<au_evclass_map_t>, sz: UInt) -> CInt
func audit_get_class(evc_map: CMutablePointer<au_evclass_map_t>, sz: UInt) -> CInt
func audit_get_cond(cond: CMutablePointer<CInt>) -> CInt
func audit_get_cond(cond: CMutablePointer<CInt>) -> CInt
func audit_get_cwd(path: CMutablePointer<CChar>, sz: UInt) -> CInt
func audit_get_cwd(path: CMutablePointer<CChar>, sz: UInt) -> CInt
func audit_get_fsize(fstat: CMutablePointer<au_fstat_t>, sz: UInt) -> CInt
func audit_get_fsize(fstat: CMutablePointer<au_fstat_t>, sz: UInt) -> CInt
func audit_get_kaudit(aia: CMutablePointer<auditinfo_addr_t>, sz: UInt) -> CInt
func audit_get_kaudit(aia: CMutablePointer<auditinfo_addr_t>, sz: UInt) -> CInt
func audit_get_kmask(kmask: CMutablePointer<au_mask_t>, sz: UInt) -> CInt
func audit_get_kmask(kmask: CMutablePointer<au_mask_t>, sz: UInt) -> CInt
func audit_get_pinfo(api: CMutablePointer<auditpinfo_t>, sz: UInt) -> CInt
func audit_get_pinfo(api: CMutablePointer<auditpinfo_t>, sz: UInt) -> CInt
func audit_get_pinfo_addr(apia: CMutablePointer<auditpinfo_addr_t>, sz: UInt) -> CInt
func audit_get_pinfo_addr(apia: CMutablePointer<auditpinfo_addr_t>, sz: UInt) -> CInt
func audit_get_policy(policy: CMutablePointer<CInt>) -> CInt
func audit_get_policy(policy: CMutablePointer<CInt>) -> CInt
func audit_get_qctrl(qctrl: CMutablePointer<au_qctrl_t>, sz: UInt) -> CInt
func audit_get_qctrl(qctrl: CMutablePointer<au_qctrl_t>, sz: UInt) -> CInt
func audit_get_sflags(flags: CMutablePointer<UInt64>) -> CInt
func audit_get_sflags(flags: CMutablePointer<UInt64>) -> CInt
func audit_get_sflags_mask(which: CString, mask: CMutablePointer<UInt64>) -> CInt
func audit_get_sflags_mask(which: CString, mask: CMutablePointer<UInt64>) -> CInt
func audit_get_sinfo_addr(aia: CMutablePointer<auditinfo_addr_t>, sz: UInt) -> CInt
func audit_get_sinfo_addr(aia: CMutablePointer<auditinfo_addr_t>, sz: UInt) -> CInt
func audit_get_stat(stats: CMutablePointer<au_stat_t>, sz: UInt) -> CInt
func audit_get_stat(stats: CMutablePointer<au_stat_t>, sz: UInt) -> CInt
func audit_send_trigger(trigger: CMutablePointer<CInt>) -> CInt
func audit_send_trigger(trigger: CMutablePointer<CInt>) -> CInt
func audit_session_join(port: mach_port_name_t) -> au_asid_t
func audit_session_join(port: mach_port_name_t) -> au_asid_t
func audit_session_port(asid: au_asid_t, portname: CMutablePointer<mach_port_name_t>) -> CInt
func audit_session_port(asid: au_asid_t, portname: CMutablePointer<mach_port_name_t>) -> CInt
func audit_session_self() -> mach_port_name_t
func audit_session_self() -> mach_port_name_t
func audit_set_class(evc_map: CMutablePointer<au_evclass_map_t>, sz: UInt) -> CInt
func audit_set_class(evc_map: CMutablePointer<au_evclass_map_t>, sz: UInt) -> CInt
func audit_set_cond(cond: CMutablePointer<CInt>) -> CInt
func audit_set_cond(cond: CMutablePointer<CInt>) -> CInt
func audit_set_fsize(fstat: CMutablePointer<au_fstat_t>, sz: UInt) -> CInt
func audit_set_fsize(fstat: CMutablePointer<au_fstat_t>, sz: UInt) -> CInt
func audit_set_kaudit(aia: CMutablePointer<auditinfo_addr_t>, sz: UInt) -> CInt
func audit_set_kaudit(aia: CMutablePointer<auditinfo_addr_t>, sz: UInt) -> CInt
func audit_set_kmask(kmask: CMutablePointer<au_mask_t>, sz: UInt) -> CInt
func audit_set_kmask(kmask: CMutablePointer<au_mask_t>, sz: UInt) -> CInt
func audit_set_pmask(api: CMutablePointer<auditpinfo_t>, sz: UInt) -> CInt
func audit_set_pmask(api: CMutablePointer<auditpinfo_t>, sz: UInt) -> CInt
func audit_set_policy(policy: CMutablePointer<CInt>) -> CInt
func audit_set_policy(policy: CMutablePointer<CInt>) -> CInt
func audit_set_qctrl(qctrl: CMutablePointer<au_qctrl_t>, sz: UInt) -> CInt
func audit_set_qctrl(qctrl: CMutablePointer<au_qctrl_t>, sz: UInt) -> CInt
func audit_set_sflags(flags: UInt64) -> CInt
func audit_set_sflags(flags: UInt64) -> CInt
func audit_set_sflags_mask(which: CString, mask: UInt64) -> CInt
func audit_set_sflags_mask(which: CString, mask: UInt64) -> CInt
func audit_set_stat(stats: CMutablePointer<au_stat_t>, sz: UInt) -> CInt
func audit_set_stat(stats: CMutablePointer<au_stat_t>, sz: UInt) -> CInt
func audit_set_terminal_id(tid: CMutablePointer<au_tid_t>) -> CInt
func audit_set_terminal_id(tid: CMutablePointer<au_tid_t>) -> CInt
func audit_set_terminal_id_ex(tid: CMutablePointer<au_tid_addr_t>) -> CInt
func audit_set_terminal_id_ex(tid: CMutablePointer<au_tid_addr_t>) -> CInt
struct audit_stat {
  var as_version: CUnsignedInt
  var as_numevent: CUnsignedInt
  var as_generated: CInt
  var as_nonattrib: CInt
  var as_kernel: CInt
  var as_audit: CInt
  var as_auditctl: CInt
  var as_enqueue: CInt
  var as_written: CInt
  var as_wblocked: CInt
  var as_rblocked: CInt
  var as_dropped: CInt
  var as_totalsize: CInt
  var as_memused: CUnsignedInt
  init(as_version: CUnsignedInt, as_numevent: CUnsignedInt, as_generated: CInt, as_nonattrib: CInt, as_kernel: CInt, as_audit: CInt, as_auditctl: CInt, as_enqueue: CInt, as_written: CInt, as_wblocked: CInt, as_rblocked: CInt, as_dropped: CInt, as_totalsize: CInt, as_memused: CUnsignedInt)
}
struct audit_token_t {
  var val: (CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt)
  init(val: (CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt))
}
func audit_token_to_asid(atoken: audit_token_t) -> au_asid_t
func audit_token_to_asid(atoken: audit_token_t) -> au_asid_t
func audit_token_to_au32(atoken: audit_token_t, auidp: CMutablePointer<uid_t>, euidp: CMutablePointer<uid_t>, egidp: CMutablePointer<gid_t>, ruidp: CMutablePointer<uid_t>, rgidp: CMutablePointer<gid_t>, pidp: CMutablePointer<pid_t>, asidp: CMutablePointer<au_asid_t>, tidp: CMutablePointer<au_tid_t>)
func audit_token_to_au32(atoken: audit_token_t, auidp: CMutablePointer<uid_t>, euidp: CMutablePointer<uid_t>, egidp: CMutablePointer<gid_t>, ruidp: CMutablePointer<uid_t>, rgidp: CMutablePointer<gid_t>, pidp: CMutablePointer<pid_t>, asidp: CMutablePointer<au_asid_t>, tidp: CMutablePointer<au_tid_t>)
func audit_token_to_auid(atoken: audit_token_t) -> uid_t
func audit_token_to_auid(atoken: audit_token_t) -> uid_t
func audit_token_to_egid(atoken: audit_token_t) -> gid_t
func audit_token_to_egid(atoken: audit_token_t) -> gid_t
func audit_token_to_euid(atoken: audit_token_t) -> uid_t
func audit_token_to_euid(atoken: audit_token_t) -> uid_t
func audit_token_to_pid(atoken: audit_token_t) -> pid_t
func audit_token_to_pid(atoken: audit_token_t) -> pid_t
func audit_token_to_pidversion(atoken: audit_token_t) -> CInt
func audit_token_to_pidversion(atoken: audit_token_t) -> CInt
func audit_token_to_rgid(atoken: audit_token_t) -> gid_t
func audit_token_to_rgid(atoken: audit_token_t) -> gid_t
func audit_token_to_ruid(atoken: audit_token_t) -> uid_t
func audit_token_to_ruid(atoken: audit_token_t) -> uid_t
func audit_write(event_code: CShort, subject: COpaquePointer, misctok: COpaquePointer, retval: CChar, errcode: CInt) -> CInt
func audit_write(event_code: CShort, subject: COpaquePointer, misctok: COpaquePointer, retval: CChar, errcode: CInt) -> CInt
func audit_write_failure(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> CInt
func audit_write_failure(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> CInt
func audit_write_failure_ex(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> CInt
func audit_write_failure_ex(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> CInt
func audit_write_failure_na(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt, euid: uid_t, egid: gid_t, pid: pid_t, tid: CMutablePointer<au_tid_t>) -> CInt
func audit_write_failure_na(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt, euid: uid_t, egid: gid_t, pid: pid_t, tid: CMutablePointer<au_tid_t>) -> CInt
func audit_write_failure_na_ex(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt, euid: uid_t, egid: gid_t, pid: pid_t, tid: CMutablePointer<au_tid_addr_t>) -> CInt
func audit_write_failure_na_ex(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt, euid: uid_t, egid: gid_t, pid: pid_t, tid: CMutablePointer<au_tid_addr_t>) -> CInt
func audit_write_failure_self(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt) -> CInt
func audit_write_failure_self(event_code: CShort, errmsg: CMutablePointer<CChar>, errret: CInt) -> CInt
func audit_write_success(event_code: CShort, misctok: COpaquePointer, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> CInt
func audit_write_success(event_code: CShort, misctok: COpaquePointer, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_t>) -> CInt
func audit_write_success_ex(event_code: CShort, misctok: COpaquePointer, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> CInt
func audit_write_success_ex(event_code: CShort, misctok: COpaquePointer, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: CMutablePointer<au_tid_addr_t>) -> CInt
func audit_write_success_self(event_code: CShort, misctok: COpaquePointer) -> CInt
func audit_write_success_self(event_code: CShort, misctok: COpaquePointer) -> CInt
func auditctl(_: CString) -> CInt
func auditctl(_: CString) -> CInt
struct auditinfo {
  var ai_auid: au_id_t
  var ai_mask: au_mask_t
  var ai_termid: au_tid_t
  var ai_asid: au_asid_t
  init(ai_auid: au_id_t, ai_mask: au_mask_t, ai_termid: au_tid_t, ai_asid: au_asid_t)
}
struct auditinfo_addr {
  var ai_auid: au_id_t
  var ai_mask: au_mask_t
  var ai_termid: au_tid_addr_t
  var ai_asid: au_asid_t
  var ai_flags: au_asflgs_t
  init(ai_auid: au_id_t, ai_mask: au_mask_t, ai_termid: au_tid_addr_t, ai_asid: au_asid_t, ai_flags: au_asflgs_t)
}
typealias auditinfo_addr_t = auditinfo_addr
typealias auditinfo_t = auditinfo
func auditon(_: CInt, _: CMutableVoidPointer, _: CInt) -> CInt
func auditon(_: CInt, _: CMutableVoidPointer, _: CInt) -> CInt
struct auditpinfo {
  var ap_pid: pid_t
  var ap_auid: au_id_t
  var ap_mask: au_mask_t
  var ap_termid: au_tid_t
  var ap_asid: au_asid_t
  init(ap_pid: pid_t, ap_auid: au_id_t, ap_mask: au_mask_t, ap_termid: au_tid_t, ap_asid: au_asid_t)
}
struct auditpinfo_addr {
  var ap_pid: pid_t
  var ap_auid: au_id_t
  var ap_mask: au_mask_t
  var ap_termid: au_tid_addr_t
  var ap_asid: au_asid_t
  var ap_flags: au_asflgs_t
  init(ap_pid: pid_t, ap_auid: au_id_t, ap_mask: au_mask_t, ap_termid: au_tid_addr_t, ap_asid: au_asid_t, ap_flags: au_asflgs_t)
}
typealias auditpinfo_addr_t = auditpinfo_addr
typealias auditpinfo_t = auditpinfo
var averunnable: loadavg
func basename(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func basename(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func bcmp(_: CConstVoidPointer, _: CConstVoidPointer, _: UInt) -> CInt
func bcmp(_: CConstVoidPointer, _: CConstVoidPointer, _: UInt) -> CInt
func bcopy(_: CConstVoidPointer, _: CMutableVoidPointer, _: UInt)
func bcopy(_: CConstVoidPointer, _: CMutableVoidPointer, _: UInt)
var betaStage: Int {
  get {
    return
  }
}
func bind(_: CInt, _: CConstPointer<sockaddr>, _: socklen_t) -> CInt
func bind(_: CInt, _: CConstPointer<sockaddr>, _: socklen_t) -> CInt
func bindresvport(_: CInt, _: CMutablePointer<sockaddr_in>) -> CInt
func bindresvport(_: CInt, _: CMutablePointer<sockaddr_in>) -> CInt
func bindresvport_sa(_: CInt, _: CMutablePointer<sockaddr>) -> CInt
func bindresvport_sa(_: CInt, _: CMutablePointer<sockaddr>) -> CInt
typealias blkcnt_t = __darwin_blkcnt_t
typealias blksize_t = __darwin_blksize_t
var bold: Int {
  get {
    return
  }
}
typealias boolean_t = CUnsignedInt
var bootstrap_port: mach_port_t
typealias bootstrap_t = mach_port_t
@availability(*, unavailable) func brk(_: CConstVoidPointer) -> COpaquePointer
@availability(*, unavailable) func brk(_: CConstVoidPointer) -> COpaquePointer
func bsearch_b(_: CConstVoidPointer, _: CConstVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!) -> COpaquePointer
func bsearch_b(_: CConstVoidPointer, _: CConstVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!) -> COpaquePointer
func btowc(_: CInt) -> wint_t
func btowc(_: CInt) -> wint_t
func buf_alloc(_: vnode_t) -> buf_t
func buf_alloc(_: vnode_t) -> buf_t
func buf_attr(_: buf_t) -> bufattr_t
func buf_attr(_: buf_t) -> bufattr_t
func buf_bawrite(_: buf_t) -> errno_t
func buf_bawrite(_: buf_t) -> errno_t
func buf_bdwrite(_: buf_t) -> errno_t
func buf_bdwrite(_: buf_t) -> errno_t
func buf_biodone(_: buf_t)
func buf_biodone(_: buf_t)
func buf_biowait(_: buf_t) -> errno_t
func buf_biowait(_: buf_t) -> errno_t
func buf_blkno(_: buf_t) -> daddr64_t
func buf_blkno(_: buf_t) -> daddr64_t
func buf_bread(_: vnode_t, _: daddr64_t, _: CInt, _: CMutablePointer<ucred>, _: CMutablePointer<buf_t>) -> errno_t
func buf_bread(_: vnode_t, _: daddr64_t, _: CInt, _: CMutablePointer<ucred>, _: CMutablePointer<buf_t>) -> errno_t
func buf_breadn(_: vnode_t, _: daddr64_t, _: CInt, _: CMutablePointer<daddr64_t>, _: CMutablePointer<CInt>, _: CInt, _: CMutablePointer<ucred>, _: CMutablePointer<buf_t>) -> errno_t
func buf_breadn(_: vnode_t, _: daddr64_t, _: CInt, _: CMutablePointer<daddr64_t>, _: CMutablePointer<CInt>, _: CInt, _: CMutablePointer<ucred>, _: CMutablePointer<buf_t>) -> errno_t
func buf_brelse(_: buf_t)
func buf_brelse(_: buf_t)
func buf_bwrite(_: buf_t) -> errno_t
func buf_bwrite(_: buf_t) -> errno_t
func buf_callback(_: buf_t) -> COpaquePointer
func buf_callback(_: buf_t) -> COpaquePointer
func buf_clear(_: buf_t)
func buf_clear(_: buf_t)
func buf_clear_redundancy_flags(_: buf_t, _: UInt32)
func buf_clear_redundancy_flags(_: buf_t, _: UInt32)
func buf_clearflags(_: buf_t, _: Int32)
func buf_clearflags(_: buf_t, _: Int32)
func buf_count(_: buf_t) -> UInt32
func buf_count(_: buf_t) -> UInt32
func buf_dataptr(_: buf_t) -> UInt
func buf_dataptr(_: buf_t) -> UInt
func buf_device(_: buf_t) -> dev_t
func buf_device(_: buf_t) -> dev_t
func buf_dirtyend(_: buf_t) -> UInt32
func buf_dirtyend(_: buf_t) -> UInt32
func buf_dirtyoff(_: buf_t) -> UInt32
func buf_dirtyoff(_: buf_t) -> UInt32
func buf_drvdata(_: buf_t) -> COpaquePointer
func buf_drvdata(_: buf_t) -> COpaquePointer
func buf_error(_: buf_t) -> errno_t
func buf_error(_: buf_t) -> errno_t
func buf_flags(_: buf_t) -> Int32
func buf_flags(_: buf_t) -> Int32
func buf_flushdirtyblks(_: vnode_t, _: CInt, _: CInt, _: CString)
func buf_flushdirtyblks(_: vnode_t, _: CInt, _: CInt, _: CString)
func buf_free(_: buf_t)
func buf_free(_: buf_t)
func buf_fromcache(_: buf_t) -> CInt
func buf_fromcache(_: buf_t) -> CInt
func buf_fsprivate(_: buf_t) -> COpaquePointer
func buf_fsprivate(_: buf_t) -> COpaquePointer
func buf_fua(_: buf_t) -> CInt
func buf_fua(_: buf_t) -> CInt
func buf_getblk(_: vnode_t, _: daddr64_t, _: CInt, _: CInt, _: CInt, _: CInt) -> buf_t
func buf_getblk(_: vnode_t, _: daddr64_t, _: CInt, _: CInt, _: CInt, _: CInt) -> buf_t
func buf_geteblk(_: CInt) -> buf_t
func buf_geteblk(_: CInt) -> buf_t
func buf_invalblkno(_: vnode_t, _: daddr64_t, _: CInt) -> errno_t
func buf_invalblkno(_: vnode_t, _: daddr64_t, _: CInt) -> errno_t
func buf_invalidateblks(_: vnode_t, _: CInt, _: CInt, _: CInt) -> CInt
func buf_invalidateblks(_: vnode_t, _: CInt, _: CInt, _: CInt) -> CInt
func buf_lblkno(_: buf_t) -> daddr64_t
func buf_lblkno(_: buf_t) -> daddr64_t
func buf_map(_: buf_t, _: CMutablePointer<caddr_t>) -> errno_t
func buf_map(_: buf_t, _: CMutablePointer<caddr_t>) -> errno_t
func buf_markaged(_: buf_t)
func buf_markaged(_: buf_t)
func buf_markclean(_: buf_t)
func buf_markclean(_: buf_t)
func buf_markdelayed(_: buf_t)
func buf_markdelayed(_: buf_t)
func buf_markeintr(_: buf_t)
func buf_markeintr(_: buf_t)
func buf_markfua(_: buf_t)
func buf_markfua(_: buf_t)
func buf_markinvalid(_: buf_t)
func buf_markinvalid(_: buf_t)
func buf_markstatic(_: buf_t)
func buf_markstatic(_: buf_t)
func buf_meta_bread(_: vnode_t, _: daddr64_t, _: CInt, _: CMutablePointer<ucred>, _: CMutablePointer<buf_t>) -> errno_t
func buf_meta_bread(_: vnode_t, _: daddr64_t, _: CInt, _: CMutablePointer<ucred>, _: CMutablePointer<buf_t>) -> errno_t
func buf_meta_breadn(_: vnode_t, _: daddr64_t, _: CInt, _: CMutablePointer<daddr64_t>, _: CMutablePointer<CInt>, _: CInt, _: CMutablePointer<ucred>, _: CMutablePointer<buf_t>) -> errno_t
func buf_meta_breadn(_: vnode_t, _: daddr64_t, _: CInt, _: CMutablePointer<daddr64_t>, _: CMutablePointer<CInt>, _: CInt, _: CMutablePointer<ucred>, _: CMutablePointer<buf_t>) -> errno_t
func buf_proc(_: buf_t) -> proc_t
func buf_proc(_: buf_t) -> proc_t
func buf_rcred(_: buf_t) -> kauth_cred_t
func buf_rcred(_: buf_t) -> kauth_cred_t
func buf_redundancy_flags(_: buf_t) -> UInt32
func buf_redundancy_flags(_: buf_t) -> UInt32
func buf_reset(_: buf_t, _: Int32)
func buf_reset(_: buf_t, _: Int32)
func buf_resid(_: buf_t) -> UInt32
func buf_resid(_: buf_t) -> UInt32
func buf_set_redundancy_flags(_: buf_t, _: UInt32)
func buf_set_redundancy_flags(_: buf_t, _: UInt32)
func buf_setblkno(_: buf_t, _: daddr64_t)
func buf_setblkno(_: buf_t, _: daddr64_t)
func buf_setcount(_: buf_t, _: UInt32)
func buf_setcount(_: buf_t, _: UInt32)
func buf_setdataptr(_: buf_t, _: UInt)
func buf_setdataptr(_: buf_t, _: UInt)
func buf_setdevice(_: buf_t, _: vnode_t) -> errno_t
func buf_setdevice(_: buf_t, _: vnode_t) -> errno_t
func buf_setdirtyend(_: buf_t, _: UInt32)
func buf_setdirtyend(_: buf_t, _: UInt32)
func buf_setdirtyoff(_: buf_t, _: UInt32)
func buf_setdirtyoff(_: buf_t, _: UInt32)
func buf_setdrvdata(_: buf_t, _: CMutableVoidPointer)
func buf_setdrvdata(_: buf_t, _: CMutableVoidPointer)
func buf_seterror(_: buf_t, _: errno_t)
func buf_seterror(_: buf_t, _: errno_t)
func buf_setflags(_: buf_t, _: Int32)
func buf_setflags(_: buf_t, _: Int32)
func buf_setfsprivate(_: buf_t, _: CMutableVoidPointer)
func buf_setfsprivate(_: buf_t, _: CMutableVoidPointer)
func buf_setlblkno(_: buf_t, _: daddr64_t)
func buf_setlblkno(_: buf_t, _: daddr64_t)
func buf_setresid(_: buf_t, _: UInt32)
func buf_setresid(_: buf_t, _: UInt32)
func buf_setsize(_: buf_t, _: UInt32)
func buf_setsize(_: buf_t, _: UInt32)
func buf_setupl(_: buf_t, _: upl_t, _: UInt32) -> errno_t
func buf_setupl(_: buf_t, _: upl_t, _: UInt32) -> errno_t
func buf_setvnode(_: buf_t, _: vnode_t)
func buf_setvnode(_: buf_t, _: vnode_t)
func buf_shadow(bp: buf_t) -> CInt
func buf_shadow(bp: buf_t) -> CInt
func buf_size(_: buf_t) -> UInt32
func buf_size(_: buf_t) -> UInt32
func buf_static(_: buf_t) -> CInt
func buf_static(_: buf_t) -> CInt
func buf_strategy(_: vnode_t, _: CMutableVoidPointer) -> errno_t
func buf_strategy(_: vnode_t, _: CMutableVoidPointer) -> errno_t
typealias buf_t = COpaquePointer
func buf_unmap(_: buf_t) -> errno_t
func buf_unmap(_: buf_t) -> errno_t
func buf_upl(_: buf_t) -> COpaquePointer
func buf_upl(_: buf_t) -> COpaquePointer
func buf_uploffset(_: buf_t) -> UInt32
func buf_uploffset(_: buf_t) -> UInt32
func buf_valid(_: buf_t) -> CInt
func buf_valid(_: buf_t) -> CInt
func buf_vnode(_: buf_t) -> vnode_t
func buf_vnode(_: buf_t) -> vnode_t
func buf_wcred(_: buf_t) -> kauth_cred_t
func buf_wcred(_: buf_t) -> kauth_cred_t
typealias bufattr_t = COpaquePointer
func bzero(_: CMutableVoidPointer, _: UInt)
func bzero(_: CMutableVoidPointer, _: UInt)
typealias caddr_t = UnsafePointer<CChar>
func calloc(_: UInt, _: UInt) -> COpaquePointer
func calloc(_: UInt, _: UInt) -> COpaquePointer
func cannot_audit(_: CInt) -> CInt
func cannot_audit(_: CInt) -> CInt
func catclose(_: CMutablePointer<__nl_cat_d>) -> CInt
func catclose(_: CMutablePointer<__nl_cat_d>) -> CInt
func catgets(_: CMutablePointer<__nl_cat_d>, _: CInt, _: CInt, _: CString) -> UnsafePointer<CChar>
func catgets(_: CMutablePointer<__nl_cat_d>, _: CInt, _: CInt, _: CString) -> UnsafePointer<CChar>
func catopen(_: CString, _: CInt) -> nl_catd
func catopen(_: CString, _: CInt) -> nl_catd
func cbrt(_: CDouble) -> CDouble
func cbrt(_: CDouble) -> CDouble
func cbrtf(_: CFloat) -> CFloat
func cbrtf(_: CFloat) -> CFloat
typealias cc_t = CUnsignedChar
func ceil(_: CDouble) -> CDouble
func ceil(_: CDouble) -> CDouble
func ceilf(_: CFloat) -> CFloat
func ceilf(_: CFloat) -> CFloat
func cfgetispeed(_: CConstPointer<termios>) -> speed_t
func cfgetispeed(_: CConstPointer<termios>) -> speed_t
func cfgetospeed(_: CConstPointer<termios>) -> speed_t
func cfgetospeed(_: CConstPointer<termios>) -> speed_t
func cfmakeraw(_: CMutablePointer<termios>)
func cfmakeraw(_: CMutablePointer<termios>)
func cfsetispeed(_: CMutablePointer<termios>, _: speed_t) -> CInt
func cfsetispeed(_: CMutablePointer<termios>, _: speed_t) -> CInt
func cfsetospeed(_: CMutablePointer<termios>, _: speed_t) -> CInt
func cfsetospeed(_: CMutablePointer<termios>, _: speed_t) -> CInt
func cfsetspeed(_: CMutablePointer<termios>, _: speed_t) -> CInt
func cfsetspeed(_: CMutablePointer<termios>, _: speed_t) -> CInt
func cgetcap(_: CMutablePointer<CChar>, _: CString, _: CInt) -> UnsafePointer<CChar>
func cgetcap(_: CMutablePointer<CChar>, _: CString, _: CInt) -> UnsafePointer<CChar>
func cgetclose() -> CInt
func cgetclose() -> CInt
func cgetent(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>, _: CString) -> CInt
func cgetent(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>, _: CString) -> CInt
func cgetfirst(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func cgetfirst(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func cgetmatch(_: CString, _: CString) -> CInt
func cgetmatch(_: CString, _: CString) -> CInt
func cgetnext(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func cgetnext(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func cgetnum(_: CMutablePointer<CChar>, _: CString, _: CMutablePointer<CLong>) -> CInt
func cgetnum(_: CMutablePointer<CChar>, _: CString, _: CMutablePointer<CLong>) -> CInt
func cgetset(_: CString) -> CInt
func cgetset(_: CString) -> CInt
func cgetstr(_: CMutablePointer<CChar>, _: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func cgetstr(_: CMutablePointer<CChar>, _: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func cgetustr(_: CMutablePointer<CChar>, _: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func cgetustr(_: CMutablePointer<CChar>, _: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func chdir(_: CString) -> CInt
func chdir(_: CString) -> CInt
func chflags(_: CString, _: __uint32_t) -> CInt
func chflags(_: CString, _: __uint32_t) -> CInt
func chmod(_: CString, _: mode_t) -> CInt
func chmod(_: CString, _: mode_t) -> CInt
func chmodx_np(_: CString, _: filesec_t) -> CInt
func chmodx_np(_: CString, _: filesec_t) -> CInt
func chown(_: CString, _: uid_t, _: gid_t) -> CInt
func chown(_: CString, _: uid_t, _: gid_t) -> CInt
func chroot(_: CString) -> CInt
func chroot(_: CString) -> CInt
func clearerr(_: CMutablePointer<FILE>)
func clearerr(_: CMutablePointer<FILE>)
func clock() -> clock_t
func clock() -> clock_t
func clock_alarm(clock_serv: clock_serv_t, alarm_type: alarm_type_t, alarm_time: mach_timespec_t, alarm_port: clock_reply_t) -> kern_return_t
func clock_alarm(clock_serv: clock_serv_t, alarm_type: alarm_type_t, alarm_time: mach_timespec_t, alarm_port: clock_reply_t) -> kern_return_t
func clock_alarm_reply(alarm_port: clock_reply_t, alarm_portPoly: mach_msg_type_name_t, alarm_code: kern_return_t, alarm_type: alarm_type_t, alarm_time: mach_timespec_t) -> kern_return_t
func clock_alarm_reply(alarm_port: clock_reply_t, alarm_portPoly: mach_msg_type_name_t, alarm_code: kern_return_t, alarm_type: alarm_type_t, alarm_time: mach_timespec_t) -> kern_return_t
typealias clock_attr_t = UnsafePointer<CInt>
typealias clock_ctrl_port_t = clock_ctrl_t
typealias clock_ctrl_t = mach_port_t
typealias clock_flavor_t = CInt
func clock_get_attributes(clock_serv: clock_serv_t, flavor: clock_flavor_t, clock_attr: CMutablePointer<CInt>, clock_attrCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func clock_get_attributes(clock_serv: clock_serv_t, flavor: clock_flavor_t, clock_attr: CMutablePointer<CInt>, clock_attrCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func clock_get_res(_: mach_port_t, _: CMutablePointer<clock_res_t>) -> kern_return_t
func clock_get_res(_: mach_port_t, _: CMutablePointer<clock_res_t>) -> kern_return_t
func clock_get_time(clock_serv: clock_serv_t, cur_time: CMutablePointer<mach_timespec_t>) -> kern_return_t
func clock_get_time(clock_serv: clock_serv_t, cur_time: CMutablePointer<mach_timespec_t>) -> kern_return_t
typealias clock_id_t = CInt
typealias clock_reply_t = mach_port_t
typealias clock_res_t = CInt
typealias clock_serv_port_t = clock_serv_t
typealias clock_serv_t = mach_port_t
func clock_set_attributes(clock_ctrl: clock_ctrl_t, flavor: clock_flavor_t, clock_attr: CMutablePointer<CInt>, clock_attrCnt: mach_msg_type_number_t) -> kern_return_t
func clock_set_attributes(clock_ctrl: clock_ctrl_t, flavor: clock_flavor_t, clock_attr: CMutablePointer<CInt>, clock_attrCnt: mach_msg_type_number_t) -> kern_return_t
func clock_set_res(_: mach_port_t, _: clock_res_t) -> kern_return_t
func clock_set_res(_: mach_port_t, _: clock_res_t) -> kern_return_t
func clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t
func clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t
func clock_sleep(_: mach_port_t, _: CInt, _: mach_timespec_t, _: CMutablePointer<mach_timespec_t>) -> kern_return_t
func clock_sleep(_: mach_port_t, _: CInt, _: mach_timespec_t, _: CMutablePointer<mach_timespec_t>) -> kern_return_t
func clock_sleep_trap(clock_name: mach_port_name_t, sleep_type: sleep_type_t, sleep_sec: CInt, sleep_nsec: CInt, wakeup_time: CMutablePointer<mach_timespec_t>) -> kern_return_t
func clock_sleep_trap(clock_name: mach_port_name_t, sleep_type: sleep_type_t, sleep_sec: CInt, sleep_nsec: CInt, wakeup_time: CMutablePointer<mach_timespec_t>) -> kern_return_t
typealias clock_t = __darwin_clock_t
struct clockinfo {
  var hz: CInt
  var tick: CInt
  var tickadj: CInt
  var stathz: CInt
  var profhz: CInt
  init(hz: CInt, tick: CInt, tickadj: CInt, stathz: CInt, profhz: CInt)
}
func close(_: CInt) -> CInt
func close(_: CInt) -> CInt
func closedir(_: CMutablePointer<DIR>) -> CInt
func closedir(_: CMutablePointer<DIR>) -> CInt
func closelog()
func closelog()
struct cmsghdr {
  var cmsg_len: socklen_t
  var cmsg_level: CInt
  var cmsg_type: CInt
  init(cmsg_len: socklen_t, cmsg_level: CInt, cmsg_type: CInt)
}
typealias coalition_t = mach_port_t
typealias comp_t = UInt16
var condense: Int {
  get {
    return
  }
}
func confstr(_: CInt, _: CMutablePointer<CChar>, _: UInt) -> UInt
func confstr(_: CInt, _: CMutablePointer<CChar>, _: UInt) -> UInt
func connect(_: CInt, _: CConstPointer<sockaddr>, _: socklen_t) -> CInt
func connect(_: CInt, _: CConstPointer<sockaddr>, _: socklen_t) -> CInt
func copysign(_: CDouble, _: CDouble) -> CDouble
func copysign(_: CDouble, _: CDouble) -> CDouble
func copysignf(_: CFloat, _: CFloat) -> CFloat
func copysignf(_: CFloat, _: CFloat) -> CFloat
func cos(_: CDouble) -> CDouble
func cos(_: CDouble) -> CDouble
func cosf(_: CFloat) -> CFloat
func cosf(_: CFloat) -> CFloat
func cosh(_: CDouble) -> CDouble
func cosh(_: CDouble) -> CDouble
func coshf(_: CFloat) -> CFloat
func coshf(_: CFloat) -> CFloat
typealias cpu_subtype_t = integer_t
typealias cpu_threadtype_t = integer_t
typealias cpu_type_t = integer_t
func creat(_: CString, _: mode_t) -> CInt
func creat(_: CString, _: mode_t) -> CInt
func crypt(_: CString, _: CString) -> UnsafePointer<CChar>
func crypt(_: CString, _: CString) -> UnsafePointer<CChar>
typealias ct_rune_t = __darwin_ct_rune_t
func ctermid(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func ctermid(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func ctermid_r(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func ctermid_r(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func ctime(_: CConstPointer<time_t>) -> UnsafePointer<CChar>
func ctime(_: CConstPointer<time_t>) -> UnsafePointer<CChar>
func ctime_r(_: CConstPointer<time_t>, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func ctime_r(_: CConstPointer<time_t>, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
struct ctl_event_data {
  var ctl_id: UInt32
  var ctl_unit: UInt32
  init(ctl_id: UInt32, ctl_unit: UInt32)
}
struct ctl_info {
  var ctl_id: UInt32
  var ctl_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(ctl_id: UInt32, ctl_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct ctlname {
  var ctl_name: UnsafePointer<CChar>
  var ctl_type: CInt
  init(ctl_name: UnsafePointer<CChar>, ctl_type: CInt)
}
typealias daddr64_t = Int64
typealias daddr_t = Int32
func daemon(_: CInt, _: CInt) -> CInt
func daemon(_: CInt, _: CInt) -> CInt
struct datum {
  var dptr: COpaquePointer
  var dsize: UInt
  init(dptr: COpaquePointer, dsize: UInt)
}
var daylight: CInt
func dbm_clearerr(_: CMutablePointer<DBM>) -> CInt
func dbm_clearerr(_: CMutablePointer<DBM>) -> CInt
func dbm_close(_: CMutablePointer<DBM>)
func dbm_close(_: CMutablePointer<DBM>)
func dbm_delete(_: CMutablePointer<DBM>, _: datum) -> CInt
func dbm_delete(_: CMutablePointer<DBM>, _: datum) -> CInt
func dbm_dirfno(_: CMutablePointer<DBM>) -> CInt
func dbm_dirfno(_: CMutablePointer<DBM>) -> CInt
func dbm_error(_: CMutablePointer<DBM>) -> CInt
func dbm_error(_: CMutablePointer<DBM>) -> CInt
func dbm_fetch(_: CMutablePointer<DBM>, _: datum) -> datum
func dbm_fetch(_: CMutablePointer<DBM>, _: datum) -> datum
func dbm_firstkey(_: CMutablePointer<DBM>) -> datum
func dbm_firstkey(_: CMutablePointer<DBM>) -> datum
func dbm_forder(_: CMutablePointer<DBM>, _: datum) -> CLong
func dbm_forder(_: CMutablePointer<DBM>, _: datum) -> CLong
func dbm_nextkey(_: CMutablePointer<DBM>) -> datum
func dbm_nextkey(_: CMutablePointer<DBM>) -> datum
func dbm_open(_: CString, _: CInt, _: mode_t) -> UnsafePointer<DBM>
func dbm_open(_: CString, _: CInt, _: mode_t) -> UnsafePointer<DBM>
func dbm_store(_: CMutablePointer<DBM>, _: datum, _: datum, _: CInt) -> CInt
func dbm_store(_: CMutablePointer<DBM>, _: datum, _: datum, _: CInt) -> CInt
typealias dev_t = __darwin_dev_t
var developStage: Int {
  get {
    return
  }
}
func devname(_: dev_t, _: mode_t) -> UnsafePointer<CChar>
func devname(_: dev_t, _: mode_t) -> UnsafePointer<CChar>
func devname_r(_: dev_t, _: mode_t, buf: CMutablePointer<CChar>, len: CInt) -> UnsafePointer<CChar>
func devname_r(_: dev_t, _: mode_t, buf: CMutablePointer<CChar>, len: CInt) -> UnsafePointer<CChar>
func difftime(_: time_t, _: time_t) -> CDouble
func difftime(_: time_t, _: time_t) -> CDouble
func digittoint(_c: CInt) -> CInt
func digittoint(_c: CInt) -> CInt
struct dirent {
  var d_ino: __uint64_t
  var d_seekoff: __uint64_t
  var d_reclen: __uint16_t
  var d_namlen: __uint16_t
  var d_type: __uint8_t
  var d_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(d_ino: __uint64_t, d_seekoff: __uint64_t, d_reclen: __uint16_t, d_namlen: __uint16_t, d_type: __uint8_t, d_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
func dirfd(dirp: CMutablePointer<DIR>) -> CInt
func dirfd(dirp: CMutablePointer<DIR>) -> CInt
func dirname(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func dirname(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
struct diskextent {
  var startblock: UInt32
  var blockcount: UInt32
  init(startblock: UInt32, blockcount: UInt32)
}
func div(_: CInt, _: CInt) -> div_t
func div(_: CInt, _: CInt) -> div_t
struct div_t {
  var quot: CInt
  var rem: CInt
  init(quot: CInt, rem: CInt)
}
struct dk_extent_t {
  var offset: UInt64
  var length: UInt64
  init(offset: UInt64, length: UInt64)
}
struct dk_firmware_path_t {
  var path: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(path: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct dk_format_capacities_t {
  var capacities: UnsafePointer<dk_format_capacity_t>
  var capacitiesCount: UInt32
  var reserved0096: (UInt8, UInt8, UInt8, UInt8)
  init(capacities: UnsafePointer<dk_format_capacity_t>, capacitiesCount: UInt32, reserved0096: (UInt8, UInt8, UInt8, UInt8))
}
struct dk_format_capacity_t {
  var blockCount: UInt64
  var blockSize: UInt32
  var reserved0096: (UInt8, UInt8, UInt8, UInt8)
  init(blockCount: UInt64, blockSize: UInt32, reserved0096: (UInt8, UInt8, UInt8, UInt8))
}
struct dk_unmap_t {
  var extents: UnsafePointer<dk_extent_t>
  var extentsCount: UInt32
  var reserved0096: (UInt8, UInt8, UInt8, UInt8)
  init(extents: UnsafePointer<dk_extent_t>, extentsCount: UInt32, reserved0096: (UInt8, UInt8, UInt8, UInt8))
}
struct dl_info {
  var dli_fname: CString
  var dli_fbase: COpaquePointer
  var dli_sname: CString
  var dli_saddr: COpaquePointer
  init(dli_fname: CString, dli_fbase: COpaquePointer, dli_sname: CString, dli_saddr: COpaquePointer)
}
func dladdr(_: CConstVoidPointer, _: CMutablePointer<Dl_info>) -> CInt
func dladdr(_: CConstVoidPointer, _: CMutablePointer<Dl_info>) -> CInt
func dlclose(__handle: CMutableVoidPointer) -> CInt
func dlclose(__handle: CMutableVoidPointer) -> CInt
func dlerror() -> UnsafePointer<CChar>
func dlerror() -> UnsafePointer<CChar>
func dlopen(__path: CString, __mode: CInt) -> COpaquePointer
func dlopen(__path: CString, __mode: CInt) -> COpaquePointer
func dlopen_preflight(__path: CString) -> CBool
func dlopen_preflight(__path: CString) -> CBool
func dlsym(__handle: CMutableVoidPointer, __symbol: CString) -> COpaquePointer
func dlsym(__handle: CMutableVoidPointer, __symbol: CString) -> COpaquePointer
typealias double_t = CDouble
struct dqblk {
  var dqb_bhardlimit: UInt64
  var dqb_bsoftlimit: UInt64
  var dqb_curbytes: UInt64
  var dqb_ihardlimit: UInt32
  var dqb_isoftlimit: UInt32
  var dqb_curinodes: UInt32
  var dqb_btime: UInt32
  var dqb_itime: UInt32
  var dqb_id: UInt32
  var dqb_spare: (UInt32, UInt32, UInt32, UInt32)
  init(dqb_bhardlimit: UInt64, dqb_bsoftlimit: UInt64, dqb_curbytes: UInt64, dqb_ihardlimit: UInt32, dqb_isoftlimit: UInt32, dqb_curinodes: UInt32, dqb_btime: UInt32, dqb_itime: UInt32, dqb_id: UInt32, dqb_spare: (UInt32, UInt32, UInt32, UInt32))
}
struct dqfilehdr {
  var dqh_magic: UInt32
  var dqh_version: UInt32
  var dqh_maxentries: UInt32
  var dqh_entrycnt: UInt32
  var dqh_flags: UInt32
  var dqh_chktime: UInt32
  var dqh_btime: UInt32
  var dqh_itime: UInt32
  var dqh_string: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var dqh_spare: (UInt32, UInt32, UInt32, UInt32)
  init(dqh_magic: UInt32, dqh_version: UInt32, dqh_maxentries: UInt32, dqh_entrycnt: UInt32, dqh_flags: UInt32, dqh_chktime: UInt32, dqh_btime: UInt32, dqh_itime: UInt32, dqh_string: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), dqh_spare: (UInt32, UInt32, UInt32, UInt32))
}
func dqhashshift(size: UInt32) -> CInt
func dqhashshift(size: UInt32) -> CInt
func drand48() -> CDouble
func drand48() -> CDouble
func drem(_: CDouble, _: CDouble) -> CDouble
func drem(_: CDouble, _: CDouble) -> CDouble
func dup(_: CInt) -> CInt
func dup(_: CInt) -> CInt
func dup2(_: CInt, _: CInt) -> CInt
func dup2(_: CInt, _: CInt) -> CInt
@availability(*, unavailable, message="This kqueue(2) EVFILT_PROC flag is no longer sent") var eNoteExitReparentedDeprecated: Int {
  get {
    return
  }
}
@availability(*, unavailable, message="This kqueue(2) EVFILT_PROC flag is deprecated") var eNoteReapDeprecated: Int {
  get {
    return
  }
}
func ecvt(_: CDouble, _: CInt, _: CMutablePointer<CInt>, _: CMutablePointer<CInt>) -> UnsafePointer<CChar>
func ecvt(_: CDouble, _: CInt, _: CMutablePointer<CInt>, _: CMutablePointer<CInt>) -> UnsafePointer<CChar>
typealias emulation_vector_t = UnsafePointer<mach_vm_offset_t>
func encrypt(_: CMutablePointer<CChar>, _: CInt)
func encrypt(_: CMutablePointer<CChar>, _: CInt)
func endac()
func endac()
func endauclass()
func endauclass()
func endauevent()
func endauevent()
func endauuser()
func endauuser()
func endgrent()
func endgrent()
func endhostent()
func endhostent()
func endnetent()
func endnetent()
func endnetgrent()
func endnetgrent()
var endorder: VISIT {
  get {
    return
  }
}
func endprotoent()
func endprotoent()
func endpwent()
func endpwent()
func endrpcent()
func endrpcent()
func endservent()
func endservent()
func endusershell()
func endusershell()
func endutxent()
func endutxent()
func endutxent_wtmp()
func endutxent_wtmp()
struct entry {
  var key: UnsafePointer<CChar>
  var data: COpaquePointer
  init(key: UnsafePointer<CChar>, data: COpaquePointer)
}
typealias er_t = UnsafePointer<eventreq>
func erand48(_: CMutablePointer<CUnsignedShort>) -> CDouble
func erand48(_: CMutablePointer<CUnsignedShort>) -> CDouble
func erf(_: CDouble) -> CDouble
func erf(_: CDouble) -> CDouble
func erfc(_: CDouble) -> CDouble
func erfc(_: CDouble) -> CDouble
func erfcf(_: CFloat) -> CFloat
func erfcf(_: CFloat) -> CFloat
func erff(_: CFloat) -> CFloat
func erff(_: CFloat) -> CFloat
typealias errno_t = CInt
func etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t
func etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t
struct eventreq {
  var er_type: CInt
  var er_handle: CInt
  var er_data: COpaquePointer
  var er_rcnt: CInt
  var er_wcnt: CInt
  var er_ecnt: CInt
  var er_eventbits: CInt
  init(er_type: CInt, er_handle: CInt, er_data: COpaquePointer, er_rcnt: CInt, er_wcnt: CInt, er_ecnt: CInt, er_eventbits: CInt)
}
struct exception {
  var type: CInt
  var name: UnsafePointer<CChar>
  var arg1: CDouble
  var arg2: CDouble
  var retval: CDouble
  init(type: CInt, name: UnsafePointer<CChar>, arg1: CDouble, arg2: CDouble, retval: CDouble)
}
typealias exception_behavior_array_t = UnsafePointer<exception_behavior_t>
typealias exception_behavior_t = CInt
typealias exception_data_t = UnsafePointer<exception_data_type_t>
typealias exception_data_type_t = integer_t
typealias exception_flavor_array_t = UnsafePointer<thread_state_flavor_t>
typealias exception_handler_array_t = UnsafePointer<exception_handler_t>
typealias exception_handler_t = mach_port_t
typealias exception_mask_array_t = UnsafePointer<exception_mask_t>
typealias exception_mask_t = CUnsignedInt
typealias exception_port_arrary_t = exception_handler_array_t
typealias exception_port_array_t = UnsafePointer<mach_port_t>
typealias exception_port_t = exception_handler_t
func exception_raise(exception_port: mach_port_t, thread: mach_port_t, task: mach_port_t, exception: exception_type_t, code: CMutablePointer<exception_data_type_t>, codeCnt: mach_msg_type_number_t) -> kern_return_t
func exception_raise(exception_port: mach_port_t, thread: mach_port_t, task: mach_port_t, exception: exception_type_t, code: CMutablePointer<exception_data_type_t>, codeCnt: mach_msg_type_number_t) -> kern_return_t
func exception_raise_state(exception_port: mach_port_t, exception: exception_type_t, code: CMutablePointer<exception_data_type_t>, codeCnt: mach_msg_type_number_t, flavor: CMutablePointer<CInt>, old_state: CMutablePointer<natural_t>, old_stateCnt: mach_msg_type_number_t, new_state: CMutablePointer<natural_t>, new_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func exception_raise_state(exception_port: mach_port_t, exception: exception_type_t, code: CMutablePointer<exception_data_type_t>, codeCnt: mach_msg_type_number_t, flavor: CMutablePointer<CInt>, old_state: CMutablePointer<natural_t>, old_stateCnt: mach_msg_type_number_t, new_state: CMutablePointer<natural_t>, new_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func exception_raise_state_identity(exception_port: mach_port_t, thread: mach_port_t, task: mach_port_t, exception: exception_type_t, code: CMutablePointer<exception_data_type_t>, codeCnt: mach_msg_type_number_t, flavor: CMutablePointer<CInt>, old_state: CMutablePointer<natural_t>, old_stateCnt: mach_msg_type_number_t, new_state: CMutablePointer<natural_t>, new_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func exception_raise_state_identity(exception_port: mach_port_t, thread: mach_port_t, task: mach_port_t, exception: exception_type_t, code: CMutablePointer<exception_data_type_t>, codeCnt: mach_msg_type_number_t, flavor: CMutablePointer<CInt>, old_state: CMutablePointer<natural_t>, old_stateCnt: mach_msg_type_number_t, new_state: CMutablePointer<natural_t>, new_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias exception_type_t = CInt
func exchangedata(_: CString, _: CString, _: CUnsignedInt) -> CInt
func exchangedata(_: CString, _: CString, _: CUnsignedInt) -> CInt
func execv(_: CString, _: CConstPointer<UnsafePointer<CChar>>) -> CInt
func execv(_: CString, _: CConstPointer<UnsafePointer<CChar>>) -> CInt
func execvP(_: CString, _: CString, _: CConstPointer<UnsafePointer<CChar>>) -> CInt
func execvP(_: CString, _: CString, _: CConstPointer<UnsafePointer<CChar>>) -> CInt
func execve(_: CString, _: CConstPointer<UnsafePointer<CChar>>, _: CConstPointer<UnsafePointer<CChar>>) -> CInt
func execve(_: CString, _: CConstPointer<UnsafePointer<CChar>>, _: CConstPointer<UnsafePointer<CChar>>) -> CInt
func execvp(_: CString, _: CConstPointer<UnsafePointer<CChar>>) -> CInt
func execvp(_: CString, _: CConstPointer<UnsafePointer<CChar>>) -> CInt
@noreturn func exit(_: CInt)
@noreturn func exit(_: CInt)
func exp(_: CDouble) -> CDouble
func exp(_: CDouble) -> CDouble
func exp2(_: CDouble) -> CDouble
func exp2(_: CDouble) -> CDouble
func exp2f(_: CFloat) -> CFloat
func exp2f(_: CFloat) -> CFloat
func expf(_: CFloat) -> CFloat
func expf(_: CFloat) -> CFloat
func expm1(_: CDouble) -> CDouble
func expm1(_: CDouble) -> CDouble
func expm1f(_: CFloat) -> CFloat
func expm1f(_: CFloat) -> CFloat
var extend: Int {
  get {
    return
  }
}
typealias extended80 = Float80
typealias extended96 = Float96
typealias extentrecord = (diskextent, diskextent, diskextent, diskextent, diskextent, diskextent, diskextent, diskextent)
struct extern_proc {
  var p_vmspace: UnsafePointer<vmspace>
  var p_sigacts: COpaquePointer
  var p_flag: CInt
  var p_stat: CChar
  var p_pid: pid_t
  var p_oppid: pid_t
  var p_dupfd: CInt
  var user_stack: caddr_t
  var exit_thread: COpaquePointer
  var p_debugger: CInt
  var sigwait: boolean_t
  var p_estcpu: u_int
  var p_cpticks: CInt
  var p_pctcpu: fixpt_t
  var p_wchan: COpaquePointer
  var p_wmesg: UnsafePointer<CChar>
  var p_swtime: u_int
  var p_slptime: u_int
  var p_realtimer: itimerval
  var p_rtime: timeval
  var p_uticks: u_quad_t
  var p_sticks: u_quad_t
  var p_iticks: u_quad_t
  var p_traceflag: CInt
  var p_tracep: COpaquePointer
  var p_siglist: CInt
  var p_textvp: COpaquePointer
  var p_holdcnt: CInt
  var p_sigmask: sigset_t
  var p_sigignore: sigset_t
  var p_sigcatch: sigset_t
  var p_priority: u_char
  var p_usrpri: u_char
  var p_nice: CChar
  var p_comm: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var p_pgrp: COpaquePointer
  var p_addr: UnsafePointer<user>
  var p_xstat: u_short
  var p_acflag: u_short
  var p_ru: UnsafePointer<rusage>
  init(p_vmspace: UnsafePointer<vmspace>, p_sigacts: COpaquePointer, p_flag: CInt, p_stat: CChar, p_pid: pid_t, p_oppid: pid_t, p_dupfd: CInt, user_stack: caddr_t, exit_thread: COpaquePointer, p_debugger: CInt, sigwait: boolean_t, p_estcpu: u_int, p_cpticks: CInt, p_pctcpu: fixpt_t, p_wchan: COpaquePointer, p_wmesg: UnsafePointer<CChar>, p_swtime: u_int, p_slptime: u_int, p_realtimer: itimerval, p_rtime: timeval, p_uticks: u_quad_t, p_sticks: u_quad_t, p_iticks: u_quad_t, p_traceflag: CInt, p_tracep: COpaquePointer, p_siglist: CInt, p_textvp: COpaquePointer, p_holdcnt: CInt, p_sigmask: sigset_t, p_sigignore: sigset_t, p_sigcatch: sigset_t, p_priority: u_char, p_usrpri: u_char, p_nice: CChar, p_comm: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), p_pgrp: COpaquePointer, p_addr: UnsafePointer<user>, p_xstat: u_short, p_acflag: u_short, p_ru: UnsafePointer<rusage>)
}
func fabs(_: CDouble) -> CDouble
func fabs(_: CDouble) -> CDouble
func fabsf(_: CFloat) -> CFloat
func fabsf(_: CFloat) -> CFloat
func faccessat(_: CInt, _: CString, _: CInt, _: CInt) -> CInt
func faccessat(_: CInt, _: CString, _: CInt, _: CInt) -> CInt
typealias fasttrap_instr_t = UInt8
struct fasttrap_machtp {
  var ftmt_instr: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ftmt_size: UInt8
  var ftmt_ripmode: UInt8
  var ftmt_modrm: UInt8
  var ftmt_type: UInt8
  var ftmt_code: UInt8
  var ftmt_base: UInt8
  var ftmt_index: UInt8
  var ftmt_scale: UInt8
  var ftmt_segment: UInt8
  var ftmt_dest: user_addr_t
  init(ftmt_instr: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), ftmt_size: UInt8, ftmt_ripmode: UInt8, ftmt_modrm: UInt8, ftmt_type: UInt8, ftmt_code: UInt8, ftmt_base: UInt8, ftmt_index: UInt8, ftmt_scale: UInt8, ftmt_segment: UInt8, ftmt_dest: user_addr_t)
}
typealias fasttrap_machtp_t = fasttrap_machtp
struct fbootstraptransfer {
  var fbt_offset: off_t
  var fbt_length: UInt
  var fbt_buffer: COpaquePointer
  init(fbt_offset: off_t, fbt_length: UInt, fbt_buffer: COpaquePointer)
}
typealias fbootstraptransfer_t = fbootstraptransfer
func fchdir(_: CInt) -> CInt
func fchdir(_: CInt) -> CInt
func fchflags(_: CInt, _: __uint32_t) -> CInt
func fchflags(_: CInt, _: __uint32_t) -> CInt
func fchmod(_: CInt, _: mode_t) -> CInt
func fchmod(_: CInt, _: mode_t) -> CInt
func fchmodat(_: CInt, _: CString, _: mode_t, _: CInt) -> CInt
func fchmodat(_: CInt, _: CString, _: mode_t, _: CInt) -> CInt
func fchmodx_np(_: CInt, _: filesec_t) -> CInt
func fchmodx_np(_: CInt, _: filesec_t) -> CInt
func fchown(_: CInt, _: uid_t, _: gid_t) -> CInt
func fchown(_: CInt, _: uid_t, _: gid_t) -> CInt
func fchownat(_: CInt, _: CString, _: uid_t, _: gid_t, _: CInt) -> CInt
func fchownat(_: CInt, _: CString, _: uid_t, _: gid_t, _: CInt) -> CInt
func fclose(_: CMutablePointer<FILE>) -> CInt
func fclose(_: CMutablePointer<FILE>) -> CInt
struct fcodeblobs {
  var f_cd_hash: COpaquePointer
  var f_hash_size: UInt
  var f_cd_buffer: COpaquePointer
  var f_cd_size: UInt
  var f_out_size: UnsafePointer<CUnsignedInt>
  var f_arch: CInt
  var __padding: CInt
  init(f_cd_hash: COpaquePointer, f_hash_size: UInt, f_cd_buffer: COpaquePointer, f_cd_size: UInt, f_out_size: UnsafePointer<CUnsignedInt>, f_arch: CInt, __padding: CInt)
}
typealias fcodeblobs_t = fcodeblobs
func fcvt(_: CDouble, _: CInt, _: CMutablePointer<CInt>, _: CMutablePointer<CInt>) -> UnsafePointer<CChar>
func fcvt(_: CDouble, _: CInt, _: CMutablePointer<CInt>, _: CMutablePointer<CInt>) -> UnsafePointer<CChar>
typealias fd_mask = __int32_t
struct fd_set {
  var fds_bits: (__int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t)
  init(fds_bits: (__int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t))
}
func fdim(_: CDouble, _: CDouble) -> CDouble
func fdim(_: CDouble, _: CDouble) -> CDouble
func fdimf(_: CFloat, _: CFloat) -> CFloat
func fdimf(_: CFloat, _: CFloat) -> CFloat
func fdopen(_: CInt, _: CString) -> UnsafePointer<FILE>
func fdopen(_: CInt, _: CString) -> UnsafePointer<FILE>
func fdopendir(_: CInt) -> UnsafePointer<DIR>
func fdopendir(_: CInt) -> UnsafePointer<DIR>
func feclearexcept(_: CInt) -> CInt
func feclearexcept(_: CInt) -> CInt
func fegetenv(_: CMutablePointer<fenv_t>) -> CInt
func fegetenv(_: CMutablePointer<fenv_t>) -> CInt
func fegetexceptflag(_: CMutablePointer<fexcept_t>, _: CInt) -> CInt
func fegetexceptflag(_: CMutablePointer<fexcept_t>, _: CInt) -> CInt
func fegetround() -> CInt
func fegetround() -> CInt
func feholdexcept(_: CMutablePointer<fenv_t>) -> CInt
func feholdexcept(_: CMutablePointer<fenv_t>) -> CInt
struct fenv_t {
  var __control: CUnsignedShort
  var __status: CUnsignedShort
  var __mxcsr: CUnsignedInt
  var __reserved: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(__control: CUnsignedShort, __status: CUnsignedShort, __mxcsr: CUnsignedInt, __reserved: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
func feof(_: CMutablePointer<FILE>) -> CInt
func feof(_: CMutablePointer<FILE>) -> CInt
func feraiseexcept(_: CInt) -> CInt
func feraiseexcept(_: CInt) -> CInt
func ferror(_: CMutablePointer<FILE>) -> CInt
func ferror(_: CMutablePointer<FILE>) -> CInt
func fesetenv(_: CConstPointer<fenv_t>) -> CInt
func fesetenv(_: CConstPointer<fenv_t>) -> CInt
func fesetexceptflag(_: CConstPointer<fexcept_t>, _: CInt) -> CInt
func fesetexceptflag(_: CConstPointer<fexcept_t>, _: CInt) -> CInt
func fesetround(_: CInt) -> CInt
func fesetround(_: CInt) -> CInt
func fetestexcept(_: CInt) -> CInt
func fetestexcept(_: CInt) -> CInt
func feupdateenv(_: CConstPointer<fenv_t>) -> CInt
func feupdateenv(_: CConstPointer<fenv_t>) -> CInt
typealias fexcept_t = CUnsignedShort
func fflagstostr(_: CUnsignedLong) -> UnsafePointer<CChar>
func fflagstostr(_: CUnsignedLong) -> UnsafePointer<CChar>
func fflush(_: CMutablePointer<FILE>) -> CInt
func fflush(_: CMutablePointer<FILE>) -> CInt
func ffs(_: CInt) -> CInt
func ffs(_: CInt) -> CInt
func ffsctl(_: CInt, _: CUnsignedLong, _: CMutableVoidPointer, _: CUnsignedInt) -> CInt
func ffsctl(_: CInt, _: CUnsignedLong, _: CMutableVoidPointer, _: CUnsignedInt) -> CInt
func ffsl(_: CLong) -> CInt
func ffsl(_: CLong) -> CInt
func ffsll(_: CLongLong) -> CInt
func ffsll(_: CLongLong) -> CInt
func fgetattrlist(_: CInt, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedInt) -> CInt
func fgetattrlist(_: CInt, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedInt) -> CInt
func fgetc(_: CMutablePointer<FILE>) -> CInt
func fgetc(_: CMutablePointer<FILE>) -> CInt
func fgetln(_: CMutablePointer<FILE>, _: CMutablePointer<UInt>) -> UnsafePointer<CChar>
func fgetln(_: CMutablePointer<FILE>, _: CMutablePointer<UInt>) -> UnsafePointer<CChar>
func fgetpos(_: CMutablePointer<FILE>, _: CMutablePointer<fpos_t>) -> CInt
func fgetpos(_: CMutablePointer<FILE>, _: CMutablePointer<fpos_t>) -> CInt
func fgets(_: CMutablePointer<CChar>, _: CInt, _: CMutablePointer<FILE>) -> UnsafePointer<CChar>
func fgets(_: CMutablePointer<CChar>, _: CInt, _: CMutablePointer<FILE>) -> UnsafePointer<CChar>
func fgetwc(_: CMutablePointer<FILE>) -> wint_t
func fgetwc(_: CMutablePointer<FILE>) -> wint_t
func fgetwln(_: CMutablePointer<FILE>, _: CMutablePointer<UInt>) -> UnsafePointer<wchar_t>
func fgetwln(_: CMutablePointer<FILE>, _: CMutablePointer<UInt>) -> UnsafePointer<wchar_t>
func fgetws(_: CMutablePointer<wchar_t>, _: CInt, _: CMutablePointer<FILE>) -> UnsafePointer<wchar_t>
func fgetws(_: CMutablePointer<wchar_t>, _: CInt, _: CMutablePointer<FILE>) -> UnsafePointer<wchar_t>
struct fhandle {
  var fh_len: CInt
  var fh_data: (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
  init(fh_len: CInt, fh_data: (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar))
}
typealias fhandle_t = fhandle
func fhopen(_: CConstPointer<fhandle>, _: CInt) -> CInt
func fhopen(_: CConstPointer<fhandle>, _: CInt) -> CInt
typealias file_t = COpaquePointer
func fileno(_: CMutablePointer<FILE>) -> CInt
func fileno(_: CMutablePointer<FILE>) -> CInt
func filesec_dup(_: filesec_t) -> filesec_t
func filesec_dup(_: filesec_t) -> filesec_t
func filesec_free(_: filesec_t)
func filesec_free(_: filesec_t)
func filesec_get_property(_: filesec_t, _: filesec_property_t, _: CMutableVoidPointer) -> CInt
func filesec_get_property(_: filesec_t, _: filesec_property_t, _: CMutableVoidPointer) -> CInt
func filesec_init() -> filesec_t
func filesec_init() -> filesec_t
struct filesec_property_t {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
func filesec_query_property(_: filesec_t, _: filesec_property_t, _: CMutablePointer<CInt>) -> CInt
func filesec_query_property(_: filesec_t, _: filesec_property_t, _: CMutablePointer<CInt>) -> CInt
func filesec_set_property(_: filesec_t, _: filesec_property_t, _: CConstVoidPointer) -> CInt
func filesec_set_property(_: filesec_t, _: filesec_property_t, _: CConstVoidPointer) -> CInt
typealias filesec_t = COpaquePointer
func filesec_unset_property(_: filesec_t, _: filesec_property_t) -> CInt
func filesec_unset_property(_: filesec_t, _: filesec_property_t) -> CInt
var finalStage: Int {
  get {
    return
  }
}
func finite(_: CDouble) -> CInt
func finite(_: CDouble) -> CInt
typealias fixpt_t = UInt32
typealias float_t = CFloat
struct flock {
  var l_start: off_t
  var l_len: off_t
  var l_pid: pid_t
  var l_type: CShort
  var l_whence: CShort
  init(l_start: off_t, l_len: off_t, l_pid: pid_t, l_type: CShort, l_whence: CShort)
}
func flock(_: CInt, _: CInt) -> CInt
func flock(_: CInt, _: CInt) -> CInt
func flockfile(_: CMutablePointer<FILE>)
func flockfile(_: CMutablePointer<FILE>)
struct flocktimeout {
  var fl: flock
  var timeout: timespec
  init(fl: flock, timeout: timespec)
}
func floor(_: CDouble) -> CDouble
func floor(_: CDouble) -> CDouble
func floorf(_: CFloat) -> CFloat
func floorf(_: CFloat) -> CFloat
func fls(_: CInt) -> CInt
func fls(_: CInt) -> CInt
func flsl(_: CLong) -> CInt
func flsl(_: CLong) -> CInt
func flsll(_: CLongLong) -> CInt
func flsll(_: CLongLong) -> CInt
func fma(_: CDouble, _: CDouble, _: CDouble) -> CDouble
func fma(_: CDouble, _: CDouble, _: CDouble) -> CDouble
func fmaf(_: CFloat, _: CFloat, _: CFloat) -> CFloat
func fmaf(_: CFloat, _: CFloat, _: CFloat) -> CFloat
func fmax(_: CDouble, _: CDouble) -> CDouble
func fmax(_: CDouble, _: CDouble) -> CDouble
func fmaxf(_: CFloat, _: CFloat) -> CFloat
func fmaxf(_: CFloat, _: CFloat) -> CFloat
func fmin(_: CDouble, _: CDouble) -> CDouble
func fmin(_: CDouble, _: CDouble) -> CDouble
func fminf(_: CFloat, _: CFloat) -> CFloat
func fminf(_: CFloat, _: CFloat) -> CFloat
func fmod(_: CDouble, _: CDouble) -> CDouble
func fmod(_: CDouble, _: CDouble) -> CDouble
func fmodf(_: CFloat, _: CFloat) -> CFloat
func fmodf(_: CFloat, _: CFloat) -> CFloat
func fmtcheck(_: CString, _: CString) -> CString
func fmtcheck(_: CString, _: CString) -> CString
func fmtmsg(_: CLong, _: CString, _: CInt, _: CString, _: CString, _: CString) -> CInt
func fmtmsg(_: CLong, _: CString, _: CInt, _: CString, _: CString, _: CString) -> CInt
func fnmatch(_: CString, _: CString, _: CInt) -> CInt
func fnmatch(_: CString, _: CString, _: CInt) -> CInt
func fopen(_: CString, _: CString) -> UnsafePointer<FILE>
func fopen(_: CString, _: CString) -> UnsafePointer<FILE>
func fork() -> pid_t
func fork() -> pid_t
func fpathconf(_: CInt, _: CInt) -> CLong
func fpathconf(_: CInt, _: CInt) -> CLong
typealias fpos_t = __darwin_off_t
func fpurge(_: CMutablePointer<FILE>) -> CInt
func fpurge(_: CMutablePointer<FILE>) -> CInt
func fputc(_: CInt, _: CMutablePointer<FILE>) -> CInt
func fputc(_: CInt, _: CMutablePointer<FILE>) -> CInt
func fputs(_: CString, _: CMutablePointer<FILE>) -> CInt
func fputs(_: CString, _: CMutablePointer<FILE>) -> CInt
func fputwc(_: wchar_t, _: CMutablePointer<FILE>) -> wint_t
func fputwc(_: wchar_t, _: CMutablePointer<FILE>) -> wint_t
func fputws(_: CConstPointer<wchar_t>, _: CMutablePointer<FILE>) -> CInt
func fputws(_: CConstPointer<wchar_t>, _: CMutablePointer<FILE>) -> CInt
func fread(_: CMutableVoidPointer, _: UInt, _: UInt, _: CMutablePointer<FILE>) -> UInt
func fread(_: CMutableVoidPointer, _: UInt, _: UInt, _: CMutablePointer<FILE>) -> UInt
func free(_: CMutableVoidPointer)
func free(_: CMutableVoidPointer)
func freeaddrinfo(_: CMutablePointer<addrinfo>)
func freeaddrinfo(_: CMutablePointer<addrinfo>)
func freehostent(_: CMutablePointer<hostent>)
func freehostent(_: CMutablePointer<hostent>)
func freopen(_: CString, _: CString, _: CMutablePointer<FILE>) -> UnsafePointer<FILE>
func freopen(_: CString, _: CString, _: CMutablePointer<FILE>) -> UnsafePointer<FILE>
func frexp(_: CDouble, _: CMutablePointer<CInt>) -> CDouble
func frexp(_: CDouble, _: CMutablePointer<CInt>) -> CDouble
func frexpf(_: CFloat, _: CMutablePointer<CInt>) -> CFloat
func frexpf(_: CFloat, _: CMutablePointer<CInt>) -> CFloat
typealias fsblkcnt_t = __darwin_fsblkcnt_t
func fsctl(_: CString, _: CUnsignedLong, _: CMutableVoidPointer, _: CUnsignedInt) -> CInt
func fsctl(_: CString, _: CUnsignedLong, _: CMutableVoidPointer, _: CUnsignedInt) -> CInt
func fseek(_: CMutablePointer<FILE>, _: CLong, _: CInt) -> CInt
func fseek(_: CMutablePointer<FILE>, _: CLong, _: CInt) -> CInt
func fseeko(_: CMutablePointer<FILE>, _: off_t, _: CInt) -> CInt
func fseeko(_: CMutablePointer<FILE>, _: off_t, _: CInt) -> CInt
func fsetattrlist(_: CInt, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedInt) -> CInt
func fsetattrlist(_: CInt, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedInt) -> CInt
func fsetpos(_: CMutablePointer<FILE>, _: CConstPointer<fpos_t>) -> CInt
func fsetpos(_: CMutablePointer<FILE>, _: CConstPointer<fpos_t>) -> CInt
typealias fsfilcnt_t = __darwin_fsfilcnt_t
typealias fsfile_type_t = UInt32
struct fsid {
  var val: (Int32, Int32)
  init(val: (Int32, Int32))
}
typealias fsid_t = fsid
struct fsignatures {
  var fs_file_start: off_t
  var fs_blob_start: COpaquePointer
  var fs_blob_size: UInt
  init(fs_file_start: off_t, fs_blob_start: COpaquePointer, fs_blob_size: UInt)
}
typealias fsignatures_t = fsignatures
struct fsobj_id {
  var fid_objno: UInt32
  var fid_generation: UInt32
  init(fid_objno: UInt32, fid_generation: UInt32)
}
typealias fsobj_id_t = fsobj_id
typealias fsobj_tag_t = UInt32
typealias fsobj_type_t = UInt32
struct fssearchblock {
  var returnattrs: UnsafePointer<attrlist>
  var returnbuffer: COpaquePointer
  var returnbuffersize: UInt
  var maxmatches: u_long
  var timelimit: timeval
  var searchparams1: COpaquePointer
  var sizeofsearchparams1: UInt
  var searchparams2: COpaquePointer
  var sizeofsearchparams2: UInt
  var searchattrs: attrlist
  init(returnattrs: UnsafePointer<attrlist>, returnbuffer: COpaquePointer, returnbuffersize: UInt, maxmatches: u_long, timelimit: timeval, searchparams1: COpaquePointer, sizeofsearchparams1: UInt, searchparams2: COpaquePointer, sizeofsearchparams2: UInt, searchattrs: attrlist)
}
func fstat(_: CInt, _: CMutablePointer<stat>) -> CInt
func fstat(_: CInt, _: CMutablePointer<stat>) -> CInt
func fstat64(_: CInt, _: CMutablePointer<stat64>) -> CInt
func fstat64(_: CInt, _: CMutablePointer<stat64>) -> CInt
func fstatat(_: CInt, _: CString, _: CMutablePointer<stat>, _: CInt) -> CInt
func fstatat(_: CInt, _: CString, _: CMutablePointer<stat>, _: CInt) -> CInt
func fstatfs(_: CInt, _: CMutablePointer<statfs>) -> CInt
func fstatfs(_: CInt, _: CMutablePointer<statfs>) -> CInt
func fstatfs64(_: CInt, _: CMutablePointer<statfs64>) -> CInt
func fstatfs64(_: CInt, _: CMutablePointer<statfs64>) -> CInt
func fstatvfs(_: CInt, _: CMutablePointer<statvfs>) -> CInt
func fstatvfs(_: CInt, _: CMutablePointer<statvfs>) -> CInt
func fstatx64_np(_: CInt, _: CMutablePointer<stat64>, _: filesec_t) -> CInt
func fstatx64_np(_: CInt, _: CMutablePointer<stat64>, _: filesec_t) -> CInt
func fstatx_np(_: CInt, _: CMutablePointer<stat>, _: filesec_t) -> CInt
func fstatx_np(_: CInt, _: CMutablePointer<stat>, _: filesec_t) -> CInt
struct fstore {
  var fst_flags: CUnsignedInt
  var fst_posmode: CInt
  var fst_offset: off_t
  var fst_length: off_t
  var fst_bytesalloc: off_t
  init(fst_flags: CUnsignedInt, fst_posmode: CInt, fst_offset: off_t, fst_length: off_t, fst_bytesalloc: off_t)
}
typealias fstore_t = fstore
typealias fsvolid_t = UInt32
func fsync(_: CInt) -> CInt
func fsync(_: CInt) -> CInt
func fsync_volume_np(_: CInt, _: CInt) -> CInt
func fsync_volume_np(_: CInt, _: CInt) -> CInt
func ftell(_: CMutablePointer<FILE>) -> CLong
func ftell(_: CMutablePointer<FILE>) -> CLong
func ftello(_: CMutablePointer<FILE>) -> off_t
func ftello(_: CMutablePointer<FILE>) -> off_t
func ftime(_: CMutablePointer<timeb>) -> CInt
func ftime(_: CMutablePointer<timeb>) -> CInt
func ftok(_: CString, _: CInt) -> key_t
func ftok(_: CString, _: CInt) -> key_t
func ftruncate(_: CInt, _: off_t) -> CInt
func ftruncate(_: CInt, _: off_t) -> CInt
func ftrylockfile(_: CMutablePointer<FILE>) -> CInt
func ftrylockfile(_: CMutablePointer<FILE>) -> CInt
func funlockfile(_: CMutablePointer<FILE>)
func funlockfile(_: CMutablePointer<FILE>)
func futimes(_: CInt, _: CConstPointer<timeval>) -> CInt
func futimes(_: CInt, _: CConstPointer<timeval>) -> CInt
func fwide(_: CMutablePointer<FILE>, _: CInt) -> CInt
func fwide(_: CMutablePointer<FILE>, _: CInt) -> CInt
func fwrite(_: CConstVoidPointer, _: UInt, _: UInt, _: CMutablePointer<FILE>) -> UInt
func fwrite(_: CConstVoidPointer, _: UInt, _: UInt, _: CMutablePointer<FILE>) -> UInt
func gai_strerror(_: CInt) -> CString
func gai_strerror(_: CInt) -> CString
func gamma(_: CDouble) -> CDouble
func gamma(_: CDouble) -> CDouble
func gcvt(_: CDouble, _: CInt, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func gcvt(_: CDouble, _: CInt, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func get_dp_control_port(host: host_priv_t, contorl_port: CMutablePointer<mach_port_t>) -> kern_return_t
func get_dp_control_port(host: host_priv_t, contorl_port: CMutablePointer<mach_port_t>) -> kern_return_t
func getacdir(name: CMutablePointer<CChar>, len: CInt) -> CInt
func getacdir(name: CMutablePointer<CChar>, len: CInt) -> CInt
func getacexpire(andflg: CMutablePointer<CInt>, age: CMutablePointer<time_t>, size: CMutablePointer<UInt>) -> CInt
func getacexpire(andflg: CMutablePointer<CInt>, age: CMutablePointer<time_t>, size: CMutablePointer<UInt>) -> CInt
func getacfilesz(size_val: CMutablePointer<UInt>) -> CInt
func getacfilesz(size_val: CMutablePointer<UInt>) -> CInt
func getacflg(auditstr: CMutablePointer<CChar>, len: CInt) -> CInt
func getacflg(auditstr: CMutablePointer<CChar>, len: CInt) -> CInt
func getachost(auditstr: CMutablePointer<CChar>, len: UInt) -> CInt
func getachost(auditstr: CMutablePointer<CChar>, len: UInt) -> CInt
func getacmin(min_val: CMutablePointer<CInt>) -> CInt
func getacmin(min_val: CMutablePointer<CInt>) -> CInt
func getacna(auditstr: CMutablePointer<CChar>, len: CInt) -> CInt
func getacna(auditstr: CMutablePointer<CChar>, len: CInt) -> CInt
func getacpol(auditstr: CMutablePointer<CChar>, len: UInt) -> CInt
func getacpol(auditstr: CMutablePointer<CChar>, len: UInt) -> CInt
func getacsflagsmask(which: CString, auditstr: CMutablePointer<CChar>, len: UInt) -> CInt
func getacsflagsmask(which: CString, auditstr: CMutablePointer<CChar>, len: UInt) -> CInt
func getaddrinfo(_: CString, _: CString, _: CConstPointer<addrinfo>, _: CMutablePointer<UnsafePointer<addrinfo>>) -> CInt
func getaddrinfo(_: CString, _: CString, _: CConstPointer<addrinfo>, _: CMutablePointer<UnsafePointer<addrinfo>>) -> CInt
func getattrlist(_: CString, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedInt) -> CInt
func getattrlist(_: CString, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedInt) -> CInt
func getattrlistat(_: CInt, _: CString, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedLong) -> CInt
func getattrlistat(_: CInt, _: CString, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedLong) -> CInt
func getattrlistbulk(_: CInt, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: UInt64) -> CInt
func getattrlistbulk(_: CInt, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: UInt64) -> CInt
func getauclassent() -> UnsafePointer<au_class_ent>
func getauclassent() -> UnsafePointer<au_class_ent>
func getauclassent_r(class_int: CMutablePointer<au_class_ent_t>) -> UnsafePointer<au_class_ent>
func getauclassent_r(class_int: CMutablePointer<au_class_ent_t>) -> UnsafePointer<au_class_ent>
func getauclassnam(name: CString) -> UnsafePointer<au_class_ent>
func getauclassnam(name: CString) -> UnsafePointer<au_class_ent>
func getauclassnam_r(class_int: CMutablePointer<au_class_ent_t>, name: CString) -> UnsafePointer<au_class_ent>
func getauclassnam_r(class_int: CMutablePointer<au_class_ent_t>, name: CString) -> UnsafePointer<au_class_ent>
func getauclassnum(class_number: au_class_t) -> UnsafePointer<au_class_ent>
func getauclassnum(class_number: au_class_t) -> UnsafePointer<au_class_ent>
func getauclassnum_r(class_int: CMutablePointer<au_class_ent_t>, class_number: au_class_t) -> UnsafePointer<au_class_ent>
func getauclassnum_r(class_int: CMutablePointer<au_class_ent_t>, class_number: au_class_t) -> UnsafePointer<au_class_ent>
func getaudit(_: CMutablePointer<auditinfo>) -> CInt
func getaudit(_: CMutablePointer<auditinfo>) -> CInt
func getaudit_addr(_: CMutablePointer<auditinfo_addr>, _: CInt) -> CInt
func getaudit_addr(_: CMutablePointer<auditinfo_addr>, _: CInt) -> CInt
func getauditflagsbin(auditstr: CMutablePointer<CChar>, masks: CMutablePointer<au_mask_t>) -> CInt
func getauditflagsbin(auditstr: CMutablePointer<CChar>, masks: CMutablePointer<au_mask_t>) -> CInt
func getauditflagschar(auditstr: CMutablePointer<CChar>, masks: CMutablePointer<au_mask_t>, verbose: CInt) -> CInt
func getauditflagschar(auditstr: CMutablePointer<CChar>, masks: CMutablePointer<au_mask_t>, verbose: CInt) -> CInt
func getauevent() -> UnsafePointer<au_event_ent>
func getauevent() -> UnsafePointer<au_event_ent>
func getauevent_r(e: CMutablePointer<au_event_ent>) -> UnsafePointer<au_event_ent>
func getauevent_r(e: CMutablePointer<au_event_ent>) -> UnsafePointer<au_event_ent>
func getauevnam(name: CString) -> UnsafePointer<au_event_ent>
func getauevnam(name: CString) -> UnsafePointer<au_event_ent>
func getauevnam_r(e: CMutablePointer<au_event_ent>, name: CString) -> UnsafePointer<au_event_ent>
func getauevnam_r(e: CMutablePointer<au_event_ent>, name: CString) -> UnsafePointer<au_event_ent>
func getauevnonam(event_name: CString) -> UnsafePointer<au_event_t>
func getauevnonam(event_name: CString) -> UnsafePointer<au_event_t>
func getauevnonam_r(ev: CMutablePointer<au_event_t>, event_name: CString) -> UnsafePointer<au_event_t>
func getauevnonam_r(ev: CMutablePointer<au_event_t>, event_name: CString) -> UnsafePointer<au_event_t>
func getauevnum(event_number: au_event_t) -> UnsafePointer<au_event_ent>
func getauevnum(event_number: au_event_t) -> UnsafePointer<au_event_ent>
func getauevnum_r(e: CMutablePointer<au_event_ent>, event_number: au_event_t) -> UnsafePointer<au_event_ent>
func getauevnum_r(e: CMutablePointer<au_event_ent>, event_number: au_event_t) -> UnsafePointer<au_event_ent>
func getauid(_: CMutablePointer<au_id_t>) -> CInt
func getauid(_: CMutablePointer<au_id_t>) -> CInt
func getauuserent() -> UnsafePointer<au_user_ent>
func getauuserent() -> UnsafePointer<au_user_ent>
func getauuserent_r(u: CMutablePointer<au_user_ent>) -> UnsafePointer<au_user_ent>
func getauuserent_r(u: CMutablePointer<au_user_ent>) -> UnsafePointer<au_user_ent>
func getauusernam(name: CString) -> UnsafePointer<au_user_ent>
func getauusernam(name: CString) -> UnsafePointer<au_user_ent>
func getauusernam_r(u: CMutablePointer<au_user_ent>, name: CString) -> UnsafePointer<au_user_ent>
func getauusernam_r(u: CMutablePointer<au_user_ent>, name: CString) -> UnsafePointer<au_user_ent>
func getbsize(_: CMutablePointer<CInt>, _: CMutablePointer<CLong>) -> UnsafePointer<CChar>
func getbsize(_: CMutablePointer<CInt>, _: CMutablePointer<CLong>) -> UnsafePointer<CChar>
func getc(_: CMutablePointer<FILE>) -> CInt
func getc(_: CMutablePointer<FILE>) -> CInt
func getc_unlocked(_: CMutablePointer<FILE>) -> CInt
func getc_unlocked(_: CMutablePointer<FILE>) -> CInt
func getchar() -> CInt
func getchar() -> CInt
func getchar_unlocked() -> CInt
func getchar_unlocked() -> CInt
func getcwd(_: CMutablePointer<CChar>, _: UInt) -> UnsafePointer<CChar>
func getcwd(_: CMutablePointer<CChar>, _: UInt) -> UnsafePointer<CChar>
func getdate(_: CString) -> UnsafePointer<tm>
func getdate(_: CString) -> UnsafePointer<tm>
var getdate_err: CInt
func getdelim(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UInt>, _: CInt, _: CMutablePointer<FILE>) -> Int
func getdelim(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UInt>, _: CInt, _: CMutablePointer<FILE>) -> Int
func getdirentries(_: CInt, _: CMutablePointer<CChar>, _: CInt, _: CMutablePointer<CLong>) -> CInt
func getdirentries(_: CInt, _: CMutablePointer<CChar>, _: CInt, _: CMutablePointer<CLong>) -> CInt
func getdirentriesattr(_: CInt, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CMutablePointer<CUnsignedInt>, _: CMutablePointer<CUnsignedInt>, _: CMutablePointer<CUnsignedInt>, _: CUnsignedInt) -> CInt
func getdirentriesattr(_: CInt, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CMutablePointer<CUnsignedInt>, _: CMutablePointer<CUnsignedInt>, _: CMutablePointer<CUnsignedInt>, _: CUnsignedInt) -> CInt
func getdomainname(_: CMutablePointer<CChar>, _: CInt) -> CInt
func getdomainname(_: CMutablePointer<CChar>, _: CInt) -> CInt
func getdtablesize() -> CInt
func getdtablesize() -> CInt
func getegid() -> gid_t
func getegid() -> gid_t
func getenv(_: CString) -> UnsafePointer<CChar>
func getenv(_: CString) -> UnsafePointer<CChar>
func geteuid() -> uid_t
func geteuid() -> uid_t
func getfauditflags(usremask: CMutablePointer<au_mask_t>, usrdmask: CMutablePointer<au_mask_t>, lastmask: CMutablePointer<au_mask_t>) -> CInt
func getfauditflags(usremask: CMutablePointer<au_mask_t>, usrdmask: CMutablePointer<au_mask_t>, lastmask: CMutablePointer<au_mask_t>) -> CInt
func getfh(_: CString, _: CMutablePointer<fhandle_t>) -> CInt
func getfh(_: CString, _: CMutablePointer<fhandle_t>) -> CInt
func getfsstat(_: CMutablePointer<statfs>, _: CInt, _: CInt) -> CInt
func getfsstat(_: CMutablePointer<statfs>, _: CInt, _: CInt) -> CInt
func getfsstat64(_: CMutablePointer<statfs64>, _: CInt, _: CInt) -> CInt
func getfsstat64(_: CMutablePointer<statfs64>, _: CInt, _: CInt) -> CInt
func getgid() -> gid_t
func getgid() -> gid_t
func getgrent() -> UnsafePointer<group>
func getgrent() -> UnsafePointer<group>
func getgrgid(_: gid_t) -> UnsafePointer<group>
func getgrgid(_: gid_t) -> UnsafePointer<group>
func getgrgid_r(_: gid_t, _: CMutablePointer<group>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<group>>) -> CInt
func getgrgid_r(_: gid_t, _: CMutablePointer<group>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<group>>) -> CInt
func getgrnam(_: CString) -> UnsafePointer<group>
func getgrnam(_: CString) -> UnsafePointer<group>
func getgrnam_r(_: CString, _: CMutablePointer<group>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<group>>) -> CInt
func getgrnam_r(_: CString, _: CMutablePointer<group>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<group>>) -> CInt
func getgrouplist(_: CString, _: CInt, _: CMutablePointer<CInt>, _: CMutablePointer<CInt>) -> CInt
func getgrouplist(_: CString, _: CInt, _: CMutablePointer<CInt>, _: CMutablePointer<CInt>) -> CInt
func getgroups(_: CInt, _: CMutablePointer<gid_t>) -> CInt
func getgroups(_: CInt, _: CMutablePointer<gid_t>) -> CInt
func getgruuid(_: CMutablePointer<CUnsignedChar>) -> UnsafePointer<group>
func getgruuid(_: CMutablePointer<CUnsignedChar>) -> UnsafePointer<group>
func getgruuid_r(_: CMutablePointer<CUnsignedChar>, _: CMutablePointer<group>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<group>>) -> CInt
func getgruuid_r(_: CMutablePointer<CUnsignedChar>, _: CMutablePointer<group>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<group>>) -> CInt
func gethostbyaddr(_: CConstVoidPointer, _: socklen_t, _: CInt) -> UnsafePointer<hostent>
func gethostbyaddr(_: CConstVoidPointer, _: socklen_t, _: CInt) -> UnsafePointer<hostent>
func gethostbyname(_: CString) -> UnsafePointer<hostent>
func gethostbyname(_: CString) -> UnsafePointer<hostent>
func gethostbyname2(_: CString, _: CInt) -> UnsafePointer<hostent>
func gethostbyname2(_: CString, _: CInt) -> UnsafePointer<hostent>
func gethostent() -> UnsafePointer<hostent>
func gethostent() -> UnsafePointer<hostent>
func gethostid() -> CLong
func gethostid() -> CLong
func gethostname(_: CMutablePointer<CChar>, _: UInt) -> CInt
func gethostname(_: CMutablePointer<CChar>, _: UInt) -> CInt
func gethostuuid(_: CMutablePointer<CUnsignedChar>, _: CConstPointer<timespec>) -> CInt
func gethostuuid(_: CMutablePointer<CUnsignedChar>, _: CConstPointer<timespec>) -> CInt
func getiopolicy_np(_: CInt, _: CInt) -> CInt
func getiopolicy_np(_: CInt, _: CInt) -> CInt
func getipnodebyaddr(_: CConstVoidPointer, _: UInt, _: CInt, _: CMutablePointer<CInt>) -> UnsafePointer<hostent>
func getipnodebyaddr(_: CConstVoidPointer, _: UInt, _: CInt, _: CMutablePointer<CInt>) -> UnsafePointer<hostent>
func getipnodebyname(_: CString, _: CInt, _: CInt, _: CMutablePointer<CInt>) -> UnsafePointer<hostent>
func getipnodebyname(_: CString, _: CInt, _: CInt, _: CMutablePointer<CInt>) -> UnsafePointer<hostent>
func getipv4sourcefilter(_: CInt, _: in_addr, _: in_addr, _: CMutablePointer<UInt32>, _: CMutablePointer<UInt32>, _: CMutablePointer<in_addr>) -> CInt
func getipv4sourcefilter(_: CInt, _: in_addr, _: in_addr, _: CMutablePointer<UInt32>, _: CMutablePointer<UInt32>, _: CMutablePointer<in_addr>) -> CInt
func getitimer(_: CInt, _: CMutablePointer<itimerval>) -> CInt
func getitimer(_: CInt, _: CMutablePointer<itimerval>) -> CInt
func getlastlogx(_: uid_t, _: CMutablePointer<lastlogx>) -> UnsafePointer<lastlogx>
func getlastlogx(_: uid_t, _: CMutablePointer<lastlogx>) -> UnsafePointer<lastlogx>
func getlastlogxbyname(_: CString, _: CMutablePointer<lastlogx>) -> UnsafePointer<lastlogx>
func getlastlogxbyname(_: CString, _: CMutablePointer<lastlogx>) -> UnsafePointer<lastlogx>
func getlcid(pid: pid_t) -> pid_t
func getlcid(pid: pid_t) -> pid_t
func getline(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UInt>, _: CMutablePointer<FILE>) -> Int
func getline(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UInt>, _: CMutablePointer<FILE>) -> Int
func getloadavg(_: CMutablePointer<CDouble>, _: CInt) -> CInt
func getloadavg(_: CMutablePointer<CDouble>, _: CInt) -> CInt
func getlogin() -> UnsafePointer<CChar>
func getlogin() -> UnsafePointer<CChar>
func getlogin_r(_: CMutablePointer<CChar>, _: UInt) -> CInt
func getlogin_r(_: CMutablePointer<CChar>, _: UInt) -> CInt
func getmntinfo(_: CMutablePointer<UnsafePointer<statfs>>, _: CInt) -> CInt
func getmntinfo(_: CMutablePointer<UnsafePointer<statfs>>, _: CInt) -> CInt
func getmntinfo64(_: CMutablePointer<UnsafePointer<statfs64>>, _: CInt) -> CInt
func getmntinfo64(_: CMutablePointer<UnsafePointer<statfs64>>, _: CInt) -> CInt
func getmode(_: CConstVoidPointer, _: mode_t) -> mode_t
func getmode(_: CConstVoidPointer, _: mode_t) -> mode_t
func getnameinfo(_: CConstPointer<sockaddr>, _: socklen_t, _: CMutablePointer<CChar>, _: socklen_t, _: CMutablePointer<CChar>, _: socklen_t, _: CInt) -> CInt
func getnameinfo(_: CConstPointer<sockaddr>, _: socklen_t, _: CMutablePointer<CChar>, _: socklen_t, _: CMutablePointer<CChar>, _: socklen_t, _: CInt) -> CInt
func getnetbyaddr(_: UInt32, _: CInt) -> UnsafePointer<netent>
func getnetbyaddr(_: UInt32, _: CInt) -> UnsafePointer<netent>
func getnetbyname(_: CString) -> UnsafePointer<netent>
func getnetbyname(_: CString) -> UnsafePointer<netent>
func getnetent() -> UnsafePointer<netent>
func getnetent() -> UnsafePointer<netent>
func getnetgrent(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func getnetgrent(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func getopt(_: CInt, _: CConstPointer<UnsafePointer<CChar>>, _: CString) -> CInt
func getopt(_: CInt, _: CConstPointer<UnsafePointer<CChar>>, _: CString) -> CInt
func getopt_long(_: CInt, _: CConstPointer<UnsafePointer<CChar>>, _: CString, _: CConstPointer<option>, _: CMutablePointer<CInt>) -> CInt
func getopt_long(_: CInt, _: CConstPointer<UnsafePointer<CChar>>, _: CString, _: CConstPointer<option>, _: CMutablePointer<CInt>) -> CInt
func getopt_long_only(_: CInt, _: CConstPointer<UnsafePointer<CChar>>, _: CString, _: CConstPointer<option>, _: CMutablePointer<CInt>) -> CInt
func getopt_long_only(_: CInt, _: CConstPointer<UnsafePointer<CChar>>, _: CString, _: CConstPointer<option>, _: CMutablePointer<CInt>) -> CInt
func getpagesize() -> CInt
func getpagesize() -> CInt
func getpass(_: CString) -> UnsafePointer<CChar>
func getpass(_: CString) -> UnsafePointer<CChar>
func getpeereid(_: CInt, _: CMutablePointer<uid_t>, _: CMutablePointer<gid_t>) -> CInt
func getpeereid(_: CInt, _: CMutablePointer<uid_t>, _: CMutablePointer<gid_t>) -> CInt
func getpeername(_: CInt, _: CMutablePointer<sockaddr>, _: CMutablePointer<socklen_t>) -> CInt
func getpeername(_: CInt, _: CMutablePointer<sockaddr>, _: CMutablePointer<socklen_t>) -> CInt
func getpgid(_: pid_t) -> pid_t
func getpgid(_: pid_t) -> pid_t
func getpgrp() -> pid_t
func getpgrp() -> pid_t
func getpid() -> pid_t
func getpid() -> pid_t
func getppid() -> pid_t
func getppid() -> pid_t
func getpriority(_: CInt, _: id_t) -> CInt
func getpriority(_: CInt, _: id_t) -> CInt
func getprogname() -> CString
func getprogname() -> CString
func getprotobyname(_: CString) -> UnsafePointer<protoent>
func getprotobyname(_: CString) -> UnsafePointer<protoent>
func getprotobynumber(_: CInt) -> UnsafePointer<protoent>
func getprotobynumber(_: CInt) -> UnsafePointer<protoent>
func getprotoent() -> UnsafePointer<protoent>
func getprotoent() -> UnsafePointer<protoent>
func getpwent() -> UnsafePointer<passwd>
func getpwent() -> UnsafePointer<passwd>
func getpwnam(_: CString) -> UnsafePointer<passwd>
func getpwnam(_: CString) -> UnsafePointer<passwd>
func getpwnam_r(_: CString, _: CMutablePointer<passwd>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<passwd>>) -> CInt
func getpwnam_r(_: CString, _: CMutablePointer<passwd>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<passwd>>) -> CInt
func getpwuid(_: uid_t) -> UnsafePointer<passwd>
func getpwuid(_: uid_t) -> UnsafePointer<passwd>
func getpwuid_r(_: uid_t, _: CMutablePointer<passwd>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<passwd>>) -> CInt
func getpwuid_r(_: uid_t, _: CMutablePointer<passwd>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<passwd>>) -> CInt
func getpwuuid(_: CMutablePointer<CUnsignedChar>) -> UnsafePointer<passwd>
func getpwuuid(_: CMutablePointer<CUnsignedChar>) -> UnsafePointer<passwd>
func getpwuuid_r(_: CMutablePointer<CUnsignedChar>, _: CMutablePointer<passwd>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<passwd>>) -> CInt
func getpwuuid_r(_: CMutablePointer<CUnsignedChar>, _: CMutablePointer<passwd>, _: CMutablePointer<CChar>, _: UInt, _: CMutablePointer<UnsafePointer<passwd>>) -> CInt
func getrlimit(_: CInt, _: CMutablePointer<rlimit>) -> CInt
func getrlimit(_: CInt, _: CMutablePointer<rlimit>) -> CInt
func getrpcbyname(name: CString) -> UnsafePointer<rpcent>
func getrpcbyname(name: CString) -> UnsafePointer<rpcent>
func getrpcbynumber(number: CInt) -> UnsafePointer<rpcent>
func getrpcbynumber(number: CInt) -> UnsafePointer<rpcent>
func getrpcent() -> UnsafePointer<rpcent>
func getrpcent() -> UnsafePointer<rpcent>
func getrusage(_: CInt, _: CMutablePointer<rusage>) -> CInt
func getrusage(_: CInt, _: CMutablePointer<rusage>) -> CInt
func gets(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func gets(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func getservbyname(_: CString, _: CString) -> UnsafePointer<servent>
func getservbyname(_: CString, _: CString) -> UnsafePointer<servent>
func getservbyport(_: CInt, _: CString) -> UnsafePointer<servent>
func getservbyport(_: CInt, _: CString) -> UnsafePointer<servent>
func getservent() -> UnsafePointer<servent>
func getservent() -> UnsafePointer<servent>
func getsgroups_np(_: CMutablePointer<CInt>, _: CMutablePointer<CUnsignedChar>) -> CInt
func getsgroups_np(_: CMutablePointer<CInt>, _: CMutablePointer<CUnsignedChar>) -> CInt
func getsid(_: pid_t) -> pid_t
func getsid(_: pid_t) -> pid_t
func getsockname(_: CInt, _: CMutablePointer<sockaddr>, _: CMutablePointer<socklen_t>) -> CInt
func getsockname(_: CInt, _: CMutablePointer<sockaddr>, _: CMutablePointer<socklen_t>) -> CInt
func getsockopt(_: CInt, _: CInt, _: CInt, _: CMutableVoidPointer, _: CMutablePointer<socklen_t>) -> CInt
func getsockopt(_: CInt, _: CInt, _: CInt, _: CMutableVoidPointer, _: CMutablePointer<socklen_t>) -> CInt
func getsourcefilter(_: CInt, _: UInt32, _: CMutablePointer<sockaddr>, _: socklen_t, _: CMutablePointer<UInt32>, _: CMutablePointer<UInt32>, _: CMutablePointer<sockaddr_storage>) -> CInt
func getsourcefilter(_: CInt, _: UInt32, _: CMutablePointer<sockaddr>, _: socklen_t, _: CMutablePointer<UInt32>, _: CMutablePointer<UInt32>, _: CMutablePointer<sockaddr_storage>) -> CInt
func getsubopt(_: CMutablePointer<UnsafePointer<CChar>>, _: CConstPointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func getsubopt(_: CMutablePointer<UnsafePointer<CChar>>, _: CConstPointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>) -> CInt
func gettimeofday(_: CMutablePointer<timeval>, _: CMutableVoidPointer) -> CInt
func gettimeofday(_: CMutablePointer<timeval>, _: CMutableVoidPointer) -> CInt
func getuid() -> uid_t
func getuid() -> uid_t
func getusershell() -> UnsafePointer<CChar>
func getusershell() -> UnsafePointer<CChar>
func getutmp(_: CConstPointer<utmpx>, _: COpaquePointer)
func getutmp(_: CConstPointer<utmpx>, _: COpaquePointer)
func getutmpx(_: COpaquePointer, _: CMutablePointer<utmpx>)
func getutmpx(_: COpaquePointer, _: CMutablePointer<utmpx>)
func getutxent() -> UnsafePointer<utmpx>
func getutxent() -> UnsafePointer<utmpx>
func getutxent_wtmp() -> UnsafePointer<utmpx>
func getutxent_wtmp() -> UnsafePointer<utmpx>
func getutxid(_: CConstPointer<utmpx>) -> UnsafePointer<utmpx>
func getutxid(_: CConstPointer<utmpx>) -> UnsafePointer<utmpx>
func getutxline(_: CConstPointer<utmpx>) -> UnsafePointer<utmpx>
func getutxline(_: CConstPointer<utmpx>) -> UnsafePointer<utmpx>
func getvfsbyname(_: CString, _: CMutablePointer<vfsconf>) -> CInt
func getvfsbyname(_: CString, _: CMutablePointer<vfsconf>) -> CInt
func getw(_: CMutablePointer<FILE>) -> CInt
func getw(_: CMutablePointer<FILE>) -> CInt
func getwc(_: CMutablePointer<FILE>) -> wint_t
func getwc(_: CMutablePointer<FILE>) -> wint_t
func getwchar() -> wint_t
func getwchar() -> wint_t
func getwd(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func getwd(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func getwgroups_np(_: CMutablePointer<CInt>, _: CMutablePointer<CUnsignedChar>) -> CInt
func getwgroups_np(_: CMutablePointer<CInt>, _: CMutablePointer<CUnsignedChar>) -> CInt
typealias gid_t = __darwin_gid_t
func glob_b(_: CString, _: CInt, _: ((CString, CInt) -> CInt)!, _: CMutablePointer<glob_t>) -> CInt
func glob_b(_: CString, _: CInt, _: ((CString, CInt) -> CInt)!, _: CMutablePointer<glob_t>) -> CInt
struct glob_t {
  var gl_pathc: UInt
  var gl_matchc: CInt
  var gl_offs: UInt
  var gl_flags: CInt
  var gl_pathv: UnsafePointer<UnsafePointer<CChar>>
  init(gl_pathc: UInt, gl_matchc: CInt, gl_offs: UInt, gl_flags: CInt, gl_pathv: UnsafePointer<UnsafePointer<CChar>>)
}
func globfree(_: CMutablePointer<glob_t>)
func globfree(_: CMutablePointer<glob_t>)
struct gmon_data {
  var type: UInt32
  var size: UInt32
  init(type: UInt32, size: UInt32)
}
typealias gmon_data_t = gmon_data
struct gmonhdr {
  var lpc: UInt32
  var hpc: UInt32
  var ncnt: UInt32
  var version: Int32
  var profrate: Int32
  var spare: (Int32, Int32, Int32)
  init(lpc: UInt32, hpc: UInt32, ncnt: UInt32, version: Int32, profrate: Int32, spare: (Int32, Int32, Int32))
}
struct gmonhdr_64 {
  var lpc: UInt64
  var hpc: UInt64
  var ncnt: UInt32
  var version: Int32
  var profrate: Int32
  var spare: (Int32, Int32, Int32)
  init(lpc: UInt64, hpc: UInt64, ncnt: UInt32, version: Int32, profrate: Int32, spare: (Int32, Int32, Int32))
}
typealias gmonhdr_t = gmonhdr_64
struct gmonparam {
  var state: CInt
  var kcount: UnsafePointer<u_short>
  var kcountsize: u_long
  var froms: UnsafePointer<u_short>
  var fromssize: u_long
  var tos: UnsafePointer<tostruct_t>
  var tossize: u_long
  var tolimit: CLong
  var lowpc: u_long
  var highpc: u_long
  var textsize: u_long
  var hashfraction: u_long
  init(state: CInt, kcount: UnsafePointer<u_short>, kcountsize: u_long, froms: UnsafePointer<u_short>, fromssize: u_long, tos: UnsafePointer<tostruct_t>, tossize: u_long, tolimit: CLong, lowpc: u_long, highpc: u_long, textsize: u_long, hashfraction: u_long)
}
func gmtime(_: CConstPointer<time_t>) -> UnsafePointer<tm>
func gmtime(_: CConstPointer<time_t>) -> UnsafePointer<tm>
func gmtime_r(_: CConstPointer<time_t>, _: CMutablePointer<tm>) -> UnsafePointer<tm>
func gmtime_r(_: CConstPointer<time_t>, _: CMutablePointer<tm>) -> UnsafePointer<tm>
struct gpu_energy_data {
  var task_gpu_utilisation: UInt64
  var task_gpu_stat_reserved0: UInt64
  var task_gpu_stat_reserved1: UInt64
  var task_gpu_stat_reserved2: UInt64
  init(task_gpu_utilisation: UInt64, task_gpu_stat_reserved0: UInt64, task_gpu_stat_reserved1: UInt64, task_gpu_stat_reserved2: UInt64)
}
typealias gpu_energy_data_t = UnsafePointer<gpu_energy_data>
func grantpt(_: CInt) -> CInt
func grantpt(_: CInt) -> CInt
struct group {
  var gr_name: UnsafePointer<CChar>
  var gr_passwd: UnsafePointer<CChar>
  var gr_gid: gid_t
  var gr_mem: UnsafePointer<UnsafePointer<CChar>>
  init(gr_name: UnsafePointer<CChar>, gr_passwd: UnsafePointer<CChar>, gr_gid: gid_t, gr_mem: UnsafePointer<UnsafePointer<CChar>>)
}
func group_from_gid(_: gid_t, _: CInt) -> UnsafePointer<CChar>
func group_from_gid(_: gid_t, _: CInt) -> UnsafePointer<CChar>
struct group_req {
  var gr_interface: UInt32
  var gr_group: sockaddr_storage
  init(gr_interface: UInt32, gr_group: sockaddr_storage)
}
struct group_source_req {
  var gsr_interface: UInt32
  var gsr_group: sockaddr_storage
  var gsr_source: sockaddr_storage
  init(gsr_interface: UInt32, gsr_group: sockaddr_storage, gsr_source: sockaddr_storage)
}
struct guid_t {
  var g_guid: (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
  init(g_guid: (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar))
}
var h_errno: CInt
struct hash_info_bucket {
  var hib_count: natural_t
  init(hib_count: natural_t)
}
typealias hash_info_bucket_array_t = UnsafePointer<hash_info_bucket_t>
typealias hash_info_bucket_t = hash_info_bucket
func hcreate(_: UInt) -> CInt
func hcreate(_: UInt) -> CInt
func hdestroy()
func hdestroy()
func heapsort_b(_: CMutableVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!) -> CInt
func heapsort_b(_: CMutableVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!) -> CInt
func herror(_: CString)
func herror(_: CString)
struct hfs_mount_args {
  var fspec: UnsafePointer<CChar>
  var hfs_uid: uid_t
  var hfs_gid: gid_t
  var hfs_mask: mode_t
  var hfs_encoding: UInt32
  var hfs_timezone: timezone
  var flags: CInt
  var journal_tbuffer_size: CInt
  var journal_flags: CInt
  var journal_disable: CInt
  init(fspec: UnsafePointer<CChar>, hfs_uid: uid_t, hfs_gid: gid_t, hfs_mask: mode_t, hfs_encoding: UInt32, hfs_timezone: timezone, flags: CInt, journal_tbuffer_size: CInt, journal_flags: CInt, journal_disable: CInt)
}
func hfs_remconverter(kmod_id: CInt, encoding: UInt32) -> CInt
func hfs_remconverter(kmod_id: CInt, encoding: UInt32) -> CInt
struct host_basic_info {
  var max_cpus: integer_t
  var avail_cpus: integer_t
  var memory_size: natural_t
  var cpu_type: cpu_type_t
  var cpu_subtype: cpu_subtype_t
  var cpu_threadtype: cpu_threadtype_t
  var physical_cpu: integer_t
  var physical_cpu_max: integer_t
  var logical_cpu: integer_t
  var logical_cpu_max: integer_t
  var max_mem: UInt64
  init(max_cpus: integer_t, avail_cpus: integer_t, memory_size: natural_t, cpu_type: cpu_type_t, cpu_subtype: cpu_subtype_t, cpu_threadtype: cpu_threadtype_t, physical_cpu: integer_t, physical_cpu_max: integer_t, logical_cpu: integer_t, logical_cpu_max: integer_t, max_mem: UInt64)
}
typealias host_basic_info_data_t = host_basic_info
typealias host_basic_info_t = UnsafePointer<host_basic_info>
struct host_cpu_load_info {
  var cpu_ticks: (natural_t, natural_t, natural_t, natural_t)
  init(cpu_ticks: (natural_t, natural_t, natural_t, natural_t))
}
typealias host_cpu_load_info_data_t = host_cpu_load_info
typealias host_cpu_load_info_t = UnsafePointer<host_cpu_load_info>
func host_create_mach_voucher(host: host_t, recipes: CMutablePointer<UInt8>, recipesCnt: mach_msg_type_number_t, voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func host_create_mach_voucher(host: host_t, recipes: CMutablePointer<UInt8>, recipesCnt: mach_msg_type_number_t, voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func host_default_memory_manager(host_priv: host_priv_t, default_manager: CMutablePointer<memory_object_default_t>, cluster_size: memory_object_cluster_size_t) -> kern_return_t
func host_default_memory_manager(host_priv: host_priv_t, default_manager: CMutablePointer<memory_object_default_t>, cluster_size: memory_object_cluster_size_t) -> kern_return_t
typealias host_flavor_t = integer_t
func host_get_UNDServer(host: host_priv_t, server: CMutablePointer<UNDServerRef>) -> kern_return_t
func host_get_UNDServer(host: host_priv_t, server: CMutablePointer<UNDServerRef>) -> kern_return_t
func host_get_boot_info(host_priv: host_priv_t, boot_info: CMutablePointer<CChar>) -> kern_return_t
func host_get_boot_info(host_priv: host_priv_t, boot_info: CMutablePointer<CChar>) -> kern_return_t
func host_get_clock_control(host_priv: host_priv_t, clock_id: clock_id_t, clock_ctrl: CMutablePointer<clock_ctrl_t>) -> kern_return_t
func host_get_clock_control(host_priv: host_priv_t, clock_id: clock_id_t, clock_ctrl: CMutablePointer<clock_ctrl_t>) -> kern_return_t
func host_get_clock_service(host: host_t, clock_id: clock_id_t, clock_serv: CMutablePointer<clock_serv_t>) -> kern_return_t
func host_get_clock_service(host: host_t, clock_id: clock_id_t, clock_serv: CMutablePointer<clock_serv_t>) -> kern_return_t
func host_get_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlers: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func host_get_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlers: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func host_get_io_master(host: host_t, io_master: CMutablePointer<io_master_t>) -> kern_return_t
func host_get_io_master(host: host_t, io_master: CMutablePointer<io_master_t>) -> kern_return_t
func host_get_special_port(host_priv: host_priv_t, node: CInt, which: CInt, port: CMutablePointer<mach_port_t>) -> kern_return_t
func host_get_special_port(host_priv: host_priv_t, node: CInt, which: CInt, port: CMutablePointer<mach_port_t>) -> kern_return_t
func host_info(host: host_t, flavor: host_flavor_t, host_info_out: CMutablePointer<integer_t>, host_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_info(host: host_t, flavor: host_flavor_t, host_info_out: CMutablePointer<integer_t>, host_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias host_info64_t = UnsafePointer<integer_t>
typealias host_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias host_info_t = UnsafePointer<integer_t>
func host_kernel_version(host: host_t, kernel_version: CMutablePointer<CChar>) -> kern_return_t
func host_kernel_version(host: host_t, kernel_version: CMutablePointer<CChar>) -> kern_return_t
struct host_load_info {
  var avenrun: (integer_t, integer_t, integer_t)
  var mach_factor: (integer_t, integer_t, integer_t)
  init(avenrun: (integer_t, integer_t, integer_t), mach_factor: (integer_t, integer_t, integer_t))
}
typealias host_load_info_data_t = host_load_info
typealias host_load_info_t = UnsafePointer<host_load_info>
func host_lockgroup_info(host: host_t, lockgroup_info: CMutablePointer<lockgroup_info_array_t>, lockgroup_infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_lockgroup_info(host: host_t, lockgroup_info: CMutablePointer<lockgroup_info_array_t>, lockgroup_infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias host_name_port_t = host_t
typealias host_name_t = host_t
func host_page_size(_: host_t, _: CMutablePointer<vm_size_t>) -> kern_return_t
func host_page_size(_: host_t, _: CMutablePointer<vm_size_t>) -> kern_return_t
struct host_priority_info {
  var kernel_priority: integer_t
  var system_priority: integer_t
  var server_priority: integer_t
  var user_priority: integer_t
  var depress_priority: integer_t
  var idle_priority: integer_t
  var minimum_priority: integer_t
  var maximum_priority: integer_t
  init(kernel_priority: integer_t, system_priority: integer_t, server_priority: integer_t, user_priority: integer_t, depress_priority: integer_t, idle_priority: integer_t, minimum_priority: integer_t, maximum_priority: integer_t)
}
typealias host_priority_info_data_t = host_priority_info
typealias host_priority_info_t = UnsafePointer<host_priority_info>
func host_priv_statistics(host_priv: host_priv_t, flavor: host_flavor_t, host_info_out: CMutablePointer<integer_t>, host_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_priv_statistics(host_priv: host_priv_t, flavor: host_flavor_t, host_info_out: CMutablePointer<integer_t>, host_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias host_priv_t = mach_port_t
func host_processor_info(host: host_t, flavor: processor_flavor_t, out_processor_count: CMutablePointer<natural_t>, out_processor_info: CMutablePointer<processor_info_array_t>, out_processor_infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_processor_info(host: host_t, flavor: processor_flavor_t, out_processor_count: CMutablePointer<natural_t>, out_processor_info: CMutablePointer<processor_info_array_t>, out_processor_infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_processor_set_priv(host_priv: host_priv_t, set_name: processor_set_name_t, set: CMutablePointer<processor_set_t>) -> kern_return_t
func host_processor_set_priv(host_priv: host_priv_t, set_name: processor_set_name_t, set: CMutablePointer<processor_set_t>) -> kern_return_t
func host_processor_sets(host_priv: host_priv_t, processor_sets: CMutablePointer<processor_set_name_array_t>, processor_setsCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_processor_sets(host_priv: host_priv_t, processor_sets: CMutablePointer<processor_set_name_array_t>, processor_setsCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_processors(host_priv: host_priv_t, out_processor_list: CMutablePointer<processor_array_t>, out_processor_listCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_processors(host_priv: host_priv_t, out_processor_list: CMutablePointer<processor_array_t>, out_processor_listCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias host_purgable_info_data_t = vm_purgeable_info
typealias host_purgable_info_t = UnsafePointer<vm_purgeable_info>
func host_reboot(host_priv: host_priv_t, options: CInt) -> kern_return_t
func host_reboot(host_priv: host_priv_t, options: CInt) -> kern_return_t
func host_register_mach_voucher_attr_manager(host: host_t, attr_manager: mach_voucher_attr_manager_t, default_value: mach_voucher_attr_value_handle_t, new_key: CMutablePointer<mach_voucher_attr_key_t>, new_attr_control: CMutablePointer<ipc_voucher_attr_control_t>) -> kern_return_t
func host_register_mach_voucher_attr_manager(host: host_t, attr_manager: mach_voucher_attr_manager_t, default_value: mach_voucher_attr_value_handle_t, new_key: CMutablePointer<mach_voucher_attr_key_t>, new_attr_control: CMutablePointer<ipc_voucher_attr_control_t>) -> kern_return_t
func host_register_well_known_mach_voucher_attr_manager(host: host_t, attr_manager: mach_voucher_attr_manager_t, default_value: mach_voucher_attr_value_handle_t, key: mach_voucher_attr_key_t, new_attr_control: CMutablePointer<ipc_voucher_attr_control_t>) -> kern_return_t
func host_register_well_known_mach_voucher_attr_manager(host: host_t, attr_manager: mach_voucher_attr_manager_t, default_value: mach_voucher_attr_value_handle_t, key: mach_voucher_attr_key_t, new_attr_control: CMutablePointer<ipc_voucher_attr_control_t>) -> kern_return_t
func host_request_notification(host: host_t, notify_type: host_flavor_t, notify_port: mach_port_t) -> kern_return_t
func host_request_notification(host: host_t, notify_type: host_flavor_t, notify_port: mach_port_t) -> kern_return_t
struct host_sched_info {
  var min_timeout: integer_t
  var min_quantum: integer_t
  init(min_timeout: integer_t, min_quantum: integer_t)
}
typealias host_sched_info_data_t = host_sched_info
typealias host_sched_info_t = UnsafePointer<host_sched_info>
func host_security_create_task_token(host_security: host_security_t, parent_task: task_t, sec_token: security_token_t, audit_token: audit_token_t, host: host_t, ledgers: CMutablePointer<ledger_t>, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t, child_task: CMutablePointer<task_t>) -> kern_return_t
func host_security_create_task_token(host_security: host_security_t, parent_task: task_t, sec_token: security_token_t, audit_token: audit_token_t, host: host_t, ledgers: CMutablePointer<ledger_t>, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t, child_task: CMutablePointer<task_t>) -> kern_return_t
func host_security_set_task_token(host_security: host_security_t, target_task: task_t, sec_token: security_token_t, audit_token: audit_token_t, host: host_t) -> kern_return_t
func host_security_set_task_token(host_security: host_security_t, target_task: task_t, sec_token: security_token_t, audit_token: audit_token_t, host: host_t) -> kern_return_t
typealias host_security_t = mach_port_t
func host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t
func host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t
func host_set_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func host_set_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func host_set_special_port(host_priv: host_priv_t, which: CInt, port: mach_port_t) -> kern_return_t
func host_set_special_port(host_priv: host_priv_t, which: CInt, port: mach_port_t) -> kern_return_t
func host_statistics(host_priv: host_t, flavor: host_flavor_t, host_info_out: CMutablePointer<integer_t>, host_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_statistics(host_priv: host_t, flavor: host_flavor_t, host_info_out: CMutablePointer<integer_t>, host_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_statistics64(host_priv: host_t, flavor: host_flavor_t, host_info64_out: CMutablePointer<integer_t>, host_info64_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_statistics64(host_priv: host_t, flavor: host_flavor_t, host_info64_out: CMutablePointer<integer_t>, host_info64_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_swap_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlerss: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func host_swap_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlerss: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
typealias host_t = mach_port_t
func host_virtual_physical_table_info(host: host_t, info: CMutablePointer<hash_info_bucket_array_t>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_virtual_physical_table_info(host: host_t, info: CMutablePointer<hash_info_bucket_array_t>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_zone_info(host: host_priv_t, names: CMutablePointer<zone_name_array_t>, namesCnt: CMutablePointer<mach_msg_type_number_t>, info: CMutablePointer<zone_info_array_t>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_zone_info(host: host_priv_t, names: CMutablePointer<zone_name_array_t>, namesCnt: CMutablePointer<mach_msg_type_number_t>, info: CMutablePointer<zone_info_array_t>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct hostent {
  var h_name: UnsafePointer<CChar>
  var h_aliases: UnsafePointer<UnsafePointer<CChar>>
  var h_addrtype: CInt
  var h_length: CInt
  var h_addr_list: UnsafePointer<UnsafePointer<CChar>>
  init(h_name: UnsafePointer<CChar>, h_aliases: UnsafePointer<UnsafePointer<CChar>>, h_addrtype: CInt, h_length: CInt, h_addr_list: UnsafePointer<UnsafePointer<CChar>>)
}
func hsearch(_: ENTRY, _: ACTION) -> UnsafePointer<ENTRY>
func hsearch(_: ENTRY, _: ACTION) -> UnsafePointer<ENTRY>
func hstrerror(_: CInt) -> CString
func hstrerror(_: CInt) -> CString
func hypot(_: CDouble, _: CDouble) -> CDouble
func hypot(_: CDouble, _: CDouble) -> CDouble
func hypotf(_: CFloat, _: CFloat) -> CFloat
func hypotf(_: CFloat, _: CFloat) -> CFloat
typealias i386_exception_state_t = __darwin_i386_exception_state
typealias i386_float_state_t = __darwin_i386_float_state
typealias i386_thread_state_t = __darwin_i386_thread_state
func iconv(_: CMutableVoidPointer, _: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UInt>, _: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UInt>) -> UInt
func iconv(_: CMutableVoidPointer, _: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UInt>, _: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UInt>) -> UInt
func iconv_canonicalize(name: CString) -> CString
func iconv_canonicalize(name: CString) -> CString
func iconv_close(_: CMutableVoidPointer) -> CInt
func iconv_close(_: CMutableVoidPointer) -> CInt
struct iconv_fallbacks {
  var data: COpaquePointer
  init(data: COpaquePointer)
}
struct iconv_hooks {
  var data: COpaquePointer
  init(data: COpaquePointer)
}
func iconv_open(_: CString, _: CString) -> iconv_t
func iconv_open(_: CString, _: CString) -> iconv_t
typealias iconv_t = COpaquePointer
func iconvctl(_: CMutableVoidPointer, _: CInt, _: CMutableVoidPointer) -> CInt
func iconvctl(_: CMutableVoidPointer, _: CInt, _: CMutableVoidPointer) -> CInt
typealias id_t = __darwin_id_t
struct idtype_t {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
typealias if_clone_t = COpaquePointer
struct if_clonereq {
  var ifcr_total: CInt
  var ifcr_count: CInt
  var ifcr_buffer: UnsafePointer<CChar>
  init(ifcr_total: CInt, ifcr_count: CInt, ifcr_buffer: UnsafePointer<CChar>)
}
struct if_data {
  var ifi_type: u_char
  var ifi_typelen: u_char
  var ifi_physical: u_char
  var ifi_addrlen: u_char
  var ifi_hdrlen: u_char
  var ifi_recvquota: u_char
  var ifi_xmitquota: u_char
  var ifi_unused1: u_char
  var ifi_mtu: UInt32
  var ifi_metric: UInt32
  var ifi_baudrate: UInt32
  var ifi_ipackets: UInt32
  var ifi_ierrors: UInt32
  var ifi_opackets: UInt32
  var ifi_oerrors: UInt32
  var ifi_collisions: UInt32
  var ifi_ibytes: UInt32
  var ifi_obytes: UInt32
  var ifi_imcasts: UInt32
  var ifi_omcasts: UInt32
  var ifi_iqdrops: UInt32
  var ifi_noproto: UInt32
  var ifi_recvtiming: UInt32
  var ifi_xmittiming: UInt32
  var ifi_lastchange: timeval32
  var ifi_unused2: UInt32
  var ifi_hwassist: UInt32
  var ifi_reserved1: UInt32
  var ifi_reserved2: UInt32
  init(ifi_type: u_char, ifi_typelen: u_char, ifi_physical: u_char, ifi_addrlen: u_char, ifi_hdrlen: u_char, ifi_recvquota: u_char, ifi_xmitquota: u_char, ifi_unused1: u_char, ifi_mtu: UInt32, ifi_metric: UInt32, ifi_baudrate: UInt32, ifi_ipackets: UInt32, ifi_ierrors: UInt32, ifi_opackets: UInt32, ifi_oerrors: UInt32, ifi_collisions: UInt32, ifi_ibytes: UInt32, ifi_obytes: UInt32, ifi_imcasts: UInt32, ifi_omcasts: UInt32, ifi_iqdrops: UInt32, ifi_noproto: UInt32, ifi_recvtiming: UInt32, ifi_xmittiming: UInt32, ifi_lastchange: timeval32, ifi_unused2: UInt32, ifi_hwassist: UInt32, ifi_reserved1: UInt32, ifi_reserved2: UInt32)
}
struct if_data64 {
  var ifi_type: u_char
  var ifi_typelen: u_char
  var ifi_physical: u_char
  var ifi_addrlen: u_char
  var ifi_hdrlen: u_char
  var ifi_recvquota: u_char
  var ifi_xmitquota: u_char
  var ifi_unused1: u_char
  var ifi_mtu: UInt32
  var ifi_metric: UInt32
  var ifi_baudrate: UInt64
  var ifi_ipackets: UInt64
  var ifi_ierrors: UInt64
  var ifi_opackets: UInt64
  var ifi_oerrors: UInt64
  var ifi_collisions: UInt64
  var ifi_ibytes: UInt64
  var ifi_obytes: UInt64
  var ifi_imcasts: UInt64
  var ifi_omcasts: UInt64
  var ifi_iqdrops: UInt64
  var ifi_noproto: UInt64
  var ifi_recvtiming: UInt32
  var ifi_xmittiming: UInt32
  var ifi_lastchange: timeval32
  init(ifi_type: u_char, ifi_typelen: u_char, ifi_physical: u_char, ifi_addrlen: u_char, ifi_hdrlen: u_char, ifi_recvquota: u_char, ifi_xmitquota: u_char, ifi_unused1: u_char, ifi_mtu: UInt32, ifi_metric: UInt32, ifi_baudrate: UInt64, ifi_ipackets: UInt64, ifi_ierrors: UInt64, ifi_opackets: UInt64, ifi_oerrors: UInt64, ifi_collisions: UInt64, ifi_ibytes: UInt64, ifi_obytes: UInt64, ifi_imcasts: UInt64, ifi_omcasts: UInt64, ifi_iqdrops: UInt64, ifi_noproto: UInt64, ifi_recvtiming: UInt32, ifi_xmittiming: UInt32, ifi_lastchange: timeval32)
}
func if_freenameindex(_: CMutablePointer<if_nameindex>)
func if_freenameindex(_: CMutablePointer<if_nameindex>)
func if_indextoname(_: CUnsignedInt, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func if_indextoname(_: CUnsignedInt, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
struct if_msghdr {
  var ifm_msglen: CUnsignedShort
  var ifm_version: CUnsignedChar
  var ifm_type: CUnsignedChar
  var ifm_addrs: CInt
  var ifm_flags: CInt
  var ifm_index: CUnsignedShort
  var ifm_data: if_data
  init(ifm_msglen: CUnsignedShort, ifm_version: CUnsignedChar, ifm_type: CUnsignedChar, ifm_addrs: CInt, ifm_flags: CInt, ifm_index: CUnsignedShort, ifm_data: if_data)
}
struct if_msghdr2 {
  var ifm_msglen: u_short
  var ifm_version: u_char
  var ifm_type: u_char
  var ifm_addrs: CInt
  var ifm_flags: CInt
  var ifm_index: u_short
  var ifm_snd_len: CInt
  var ifm_snd_maxlen: CInt
  var ifm_snd_drops: CInt
  var ifm_timer: CInt
  var ifm_data: if_data64
  init(ifm_msglen: u_short, ifm_version: u_char, ifm_type: u_char, ifm_addrs: CInt, ifm_flags: CInt, ifm_index: u_short, ifm_snd_len: CInt, ifm_snd_maxlen: CInt, ifm_snd_drops: CInt, ifm_timer: CInt, ifm_data: if_data64)
}
func if_nameindex() -> UnsafePointer<if_nameindex>
struct if_nameindex {
  var if_index: CUnsignedInt
  var if_name: UnsafePointer<CChar>
  init(if_index: CUnsignedInt, if_name: UnsafePointer<CChar>)
}
func if_nameindex() -> UnsafePointer<if_nameindex>
func if_nametoindex(_: CString) -> CUnsignedInt
func if_nametoindex(_: CString) -> CUnsignedInt
struct ifa_msghdr {
  var ifam_msglen: CUnsignedShort
  var ifam_version: CUnsignedChar
  var ifam_type: CUnsignedChar
  var ifam_addrs: CInt
  var ifam_flags: CInt
  var ifam_index: CUnsignedShort
  var ifam_metric: CInt
  init(ifam_msglen: CUnsignedShort, ifam_version: CUnsignedChar, ifam_type: CUnsignedChar, ifam_addrs: CInt, ifam_flags: CInt, ifam_index: CUnsignedShort, ifam_metric: CInt)
}
typealias ifaddr_t = COpaquePointer
struct ifaliasreq {
  var ifra_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ifra_addr: sockaddr
  var ifra_broadaddr: sockaddr
  var ifra_mask: sockaddr
  init(ifra_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ifra_addr: sockaddr, ifra_broadaddr: sockaddr, ifra_mask: sockaddr)
}
struct ifconf {
  var ifc_len: CInt
  init(ifc_len: CInt)
}
struct ifdevmtu {
  var ifdm_current: CInt
  var ifdm_min: CInt
  var ifdm_max: CInt
  init(ifdm_current: CInt, ifdm_min: CInt, ifdm_max: CInt)
}
struct ifdrv {
  var ifd_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ifd_cmd: CUnsignedLong
  var ifd_len: UInt
  var ifd_data: COpaquePointer
  init(ifd_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ifd_cmd: CUnsignedLong, ifd_len: UInt, ifd_data: COpaquePointer)
}
struct ifkpi {
  var ifk_module_id: CUnsignedInt
  var ifk_type: CUnsignedInt
  init(ifk_module_id: CUnsignedInt, ifk_type: CUnsignedInt)
}
struct ifma_msghdr {
  var ifmam_msglen: CUnsignedShort
  var ifmam_version: CUnsignedChar
  var ifmam_type: CUnsignedChar
  var ifmam_addrs: CInt
  var ifmam_flags: CInt
  var ifmam_index: CUnsignedShort
  init(ifmam_msglen: CUnsignedShort, ifmam_version: CUnsignedChar, ifmam_type: CUnsignedChar, ifmam_addrs: CInt, ifmam_flags: CInt, ifmam_index: CUnsignedShort)
}
struct ifma_msghdr2 {
  var ifmam_msglen: u_short
  var ifmam_version: u_char
  var ifmam_type: u_char
  var ifmam_addrs: CInt
  var ifmam_flags: CInt
  var ifmam_index: u_short
  var ifmam_refcount: Int32
  init(ifmam_msglen: u_short, ifmam_version: u_char, ifmam_type: u_char, ifmam_addrs: CInt, ifmam_flags: CInt, ifmam_index: u_short, ifmam_refcount: Int32)
}
struct ifmedia_description {
  var ifmt_word: CInt
  var ifmt_string: CString
  init(ifmt_word: CInt, ifmt_string: CString)
}
struct ifmediareq {
  var ifm_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ifm_current: CInt
  var ifm_mask: CInt
  var ifm_status: CInt
  var ifm_active: CInt
  var ifm_count: CInt
  var ifm_ulist: UnsafePointer<CInt>
  init(ifm_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ifm_current: CInt, ifm_mask: CInt, ifm_status: CInt, ifm_active: CInt, ifm_count: CInt, ifm_ulist: UnsafePointer<CInt>)
}
typealias ifmultiaddr_t = COpaquePointer
typealias ifnet_t = COpaquePointer
struct ifqueue {
  var ifq_head: COpaquePointer
  var ifq_tail: COpaquePointer
  var ifq_len: CInt
  var ifq_maxlen: CInt
  var ifq_drops: CInt
  init(ifq_head: COpaquePointer, ifq_tail: COpaquePointer, ifq_len: CInt, ifq_maxlen: CInt, ifq_drops: CInt)
}
struct ifreq {
  var ifr_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(ifr_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct ifstat {
  var ifs_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ascii: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(ifs_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ascii: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
func ilogb(_: CDouble) -> CInt
func ilogb(_: CDouble) -> CInt
func ilogbf(_: CFloat) -> CInt
func ilogbf(_: CFloat) -> CInt
func imaxabs(j: intmax_t) -> intmax_t
func imaxabs(j: intmax_t) -> intmax_t
func imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t
func imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t
struct imaxdiv_t {
  var quot: intmax_t
  var rem: intmax_t
  init(quot: intmax_t, rem: intmax_t)
}
struct in4in6_addr {
  var i46a_pad32: (UInt32, UInt32, UInt32)
  var i46a_addr4: in_addr
  init(i46a_pad32: (UInt32, UInt32, UInt32), i46a_addr4: in_addr)
}
struct in6_addr {
  init()
}
struct in6_pktinfo {
  var ipi6_addr: in6_addr
  var ipi6_ifindex: CUnsignedInt
  init(ipi6_addr: in6_addr, ipi6_ifindex: CUnsignedInt)
}
var in6addr_any: in6_addr
var in6addr_linklocal_allnodes: in6_addr
var in6addr_linklocal_allrouters: in6_addr
var in6addr_linklocal_allv2routers: in6_addr
var in6addr_loopback: in6_addr
var in6addr_nodelocal_allnodes: in6_addr
struct in_addr {
  var s_addr: in_addr_t
  init(s_addr: in_addr_t)
}
typealias in_addr_t = __uint32_t
struct in_pktinfo {
  var ipi_ifindex: CUnsignedInt
  var ipi_spec_dst: in_addr
  var ipi_addr: in_addr
  init(ipi_ifindex: CUnsignedInt, ipi_spec_dst: in_addr, ipi_addr: in_addr)
}
typealias in_port_t = __uint16_t
struct in_sockinfo {
  var insi_fport: CInt
  var insi_lport: CInt
  var insi_gencnt: UInt64
  var insi_flags: UInt32
  var insi_flow: UInt32
  var insi_vflag: UInt8
  var insi_ip_ttl: UInt8
  var rfu_1: UInt32
  init(insi_fport: CInt, insi_lport: CInt, insi_gencnt: UInt64, insi_flags: UInt32, insi_flow: UInt32, insi_vflag: UInt8, insi_ip_ttl: UInt8, rfu_1: UInt32)
}
func index(_: CString, _: CInt) -> UnsafePointer<CChar>
func index(_: CString, _: CInt) -> UnsafePointer<CChar>
func inet6_opt_append(_: CMutableVoidPointer, _: socklen_t, _: CInt, _: __uint8_t, _: socklen_t, _: __uint8_t, _: CMutablePointer<COpaquePointer>) -> CInt
func inet6_opt_append(_: CMutableVoidPointer, _: socklen_t, _: CInt, _: __uint8_t, _: socklen_t, _: __uint8_t, _: CMutablePointer<COpaquePointer>) -> CInt
func inet6_opt_find(_: CMutableVoidPointer, _: socklen_t, _: CInt, _: __uint8_t, _: CMutablePointer<socklen_t>, _: CMutablePointer<COpaquePointer>) -> CInt
func inet6_opt_find(_: CMutableVoidPointer, _: socklen_t, _: CInt, _: __uint8_t, _: CMutablePointer<socklen_t>, _: CMutablePointer<COpaquePointer>) -> CInt
func inet6_opt_finish(_: CMutableVoidPointer, _: socklen_t, _: CInt) -> CInt
func inet6_opt_finish(_: CMutableVoidPointer, _: socklen_t, _: CInt) -> CInt
func inet6_opt_get_val(_: CMutableVoidPointer, _: CInt, _: CMutableVoidPointer, _: socklen_t) -> CInt
func inet6_opt_get_val(_: CMutableVoidPointer, _: CInt, _: CMutableVoidPointer, _: socklen_t) -> CInt
func inet6_opt_init(_: CMutableVoidPointer, _: socklen_t) -> CInt
func inet6_opt_init(_: CMutableVoidPointer, _: socklen_t) -> CInt
func inet6_opt_next(_: CMutableVoidPointer, _: socklen_t, _: CInt, _: CMutablePointer<__uint8_t>, _: CMutablePointer<socklen_t>, _: CMutablePointer<COpaquePointer>) -> CInt
func inet6_opt_next(_: CMutableVoidPointer, _: socklen_t, _: CInt, _: CMutablePointer<__uint8_t>, _: CMutablePointer<socklen_t>, _: CMutablePointer<COpaquePointer>) -> CInt
func inet6_opt_set_val(_: CMutableVoidPointer, _: CInt, _: CMutableVoidPointer, _: socklen_t) -> CInt
func inet6_opt_set_val(_: CMutableVoidPointer, _: CInt, _: CMutableVoidPointer, _: socklen_t) -> CInt
func inet6_option_alloc(_: CMutablePointer<cmsghdr>, _: CInt, _: CInt, _: CInt) -> UnsafePointer<__uint8_t>
func inet6_option_alloc(_: CMutablePointer<cmsghdr>, _: CInt, _: CInt, _: CInt) -> UnsafePointer<__uint8_t>
func inet6_option_append(_: CMutablePointer<cmsghdr>, _: CConstPointer<__uint8_t>, _: CInt, _: CInt) -> CInt
func inet6_option_append(_: CMutablePointer<cmsghdr>, _: CConstPointer<__uint8_t>, _: CInt, _: CInt) -> CInt
func inet6_option_find(_: CConstPointer<cmsghdr>, _: CMutablePointer<UnsafePointer<__uint8_t>>, _: CInt) -> CInt
func inet6_option_find(_: CConstPointer<cmsghdr>, _: CMutablePointer<UnsafePointer<__uint8_t>>, _: CInt) -> CInt
func inet6_option_init(_: CMutableVoidPointer, _: CMutablePointer<UnsafePointer<cmsghdr>>, _: CInt) -> CInt
func inet6_option_init(_: CMutableVoidPointer, _: CMutablePointer<UnsafePointer<cmsghdr>>, _: CInt) -> CInt
func inet6_option_next(_: CConstPointer<cmsghdr>, _: CMutablePointer<UnsafePointer<__uint8_t>>) -> CInt
func inet6_option_next(_: CConstPointer<cmsghdr>, _: CMutablePointer<UnsafePointer<__uint8_t>>) -> CInt
func inet6_option_space(_: CInt) -> CInt
func inet6_option_space(_: CInt) -> CInt
func inet6_rth_add(_: CMutableVoidPointer, _: CConstPointer<in6_addr>) -> CInt
func inet6_rth_add(_: CMutableVoidPointer, _: CConstPointer<in6_addr>) -> CInt
func inet6_rth_getaddr(_: CConstVoidPointer, _: CInt) -> UnsafePointer<in6_addr>
func inet6_rth_getaddr(_: CConstVoidPointer, _: CInt) -> UnsafePointer<in6_addr>
func inet6_rth_init(_: CMutableVoidPointer, _: socklen_t, _: CInt, _: CInt) -> COpaquePointer
func inet6_rth_init(_: CMutableVoidPointer, _: socklen_t, _: CInt, _: CInt) -> COpaquePointer
func inet6_rth_reverse(_: CConstVoidPointer, _: CMutableVoidPointer) -> CInt
func inet6_rth_reverse(_: CConstVoidPointer, _: CMutableVoidPointer) -> CInt
func inet6_rth_segments(_: CConstVoidPointer) -> CInt
func inet6_rth_segments(_: CConstVoidPointer) -> CInt
func inet6_rth_space(_: CInt, _: CInt) -> socklen_t
func inet6_rth_space(_: CInt, _: CInt) -> socklen_t
func inet6_rthdr_add(_: CMutablePointer<cmsghdr>, _: CConstPointer<in6_addr>, _: CUnsignedInt) -> CInt
func inet6_rthdr_add(_: CMutablePointer<cmsghdr>, _: CConstPointer<in6_addr>, _: CUnsignedInt) -> CInt
func inet6_rthdr_getaddr(_: CMutablePointer<cmsghdr>, _: CInt) -> UnsafePointer<in6_addr>
func inet6_rthdr_getaddr(_: CMutablePointer<cmsghdr>, _: CInt) -> UnsafePointer<in6_addr>
func inet6_rthdr_getflags(_: CConstPointer<cmsghdr>, _: CInt) -> CInt
func inet6_rthdr_getflags(_: CConstPointer<cmsghdr>, _: CInt) -> CInt
func inet6_rthdr_init(_: CMutableVoidPointer, _: CInt) -> UnsafePointer<cmsghdr>
func inet6_rthdr_init(_: CMutableVoidPointer, _: CInt) -> UnsafePointer<cmsghdr>
func inet6_rthdr_lasthop(_: CMutablePointer<cmsghdr>, _: CUnsignedInt) -> CInt
func inet6_rthdr_lasthop(_: CMutablePointer<cmsghdr>, _: CUnsignedInt) -> CInt
func inet6_rthdr_segments(_: CConstPointer<cmsghdr>) -> CInt
func inet6_rthdr_segments(_: CConstPointer<cmsghdr>) -> CInt
func inet6_rthdr_space(_: CInt, _: CInt) -> UInt
func inet6_rthdr_space(_: CInt, _: CInt) -> UInt
func inet_addr(_: CString) -> in_addr_t
func inet_addr(_: CString) -> in_addr_t
func inet_aton(_: CString, _: CMutablePointer<in_addr>) -> CInt
func inet_aton(_: CString, _: CMutablePointer<in_addr>) -> CInt
func inet_lnaof(_: in_addr) -> in_addr_t
func inet_lnaof(_: in_addr) -> in_addr_t
func inet_makeaddr(_: in_addr_t, _: in_addr_t) -> in_addr
func inet_makeaddr(_: in_addr_t, _: in_addr_t) -> in_addr
func inet_net_ntop(_: CInt, _: CConstVoidPointer, _: CInt, _: CMutablePointer<CChar>, _: __darwin_size_t) -> UnsafePointer<CChar>
func inet_net_ntop(_: CInt, _: CConstVoidPointer, _: CInt, _: CMutablePointer<CChar>, _: __darwin_size_t) -> UnsafePointer<CChar>
func inet_net_pton(_: CInt, _: CString, _: CMutableVoidPointer, _: __darwin_size_t) -> CInt
func inet_net_pton(_: CInt, _: CString, _: CMutableVoidPointer, _: __darwin_size_t) -> CInt
func inet_neta(_: in_addr_t, _: CMutablePointer<CChar>, _: __darwin_size_t) -> UnsafePointer<CChar>
func inet_neta(_: in_addr_t, _: CMutablePointer<CChar>, _: __darwin_size_t) -> UnsafePointer<CChar>
func inet_netof(_: in_addr) -> in_addr_t
func inet_netof(_: in_addr) -> in_addr_t
func inet_network(_: CString) -> in_addr_t
func inet_network(_: CString) -> in_addr_t
func inet_nsap_addr(_: CString, _: CMutablePointer<CUnsignedChar>, _: CInt) -> CUnsignedInt
func inet_nsap_addr(_: CString, _: CMutablePointer<CUnsignedChar>, _: CInt) -> CUnsignedInt
func inet_nsap_ntoa(_: CInt, _: CConstPointer<CUnsignedChar>, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func inet_nsap_ntoa(_: CInt, _: CConstPointer<CUnsignedChar>, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func inet_ntoa(_: in_addr) -> UnsafePointer<CChar>
func inet_ntoa(_: in_addr) -> UnsafePointer<CChar>
func inet_ntop(_: CInt, _: CConstVoidPointer, _: CMutablePointer<CChar>, _: socklen_t) -> CString
func inet_ntop(_: CInt, _: CConstVoidPointer, _: CMutablePointer<CChar>, _: socklen_t) -> CString
func inet_pton(_: CInt, _: CString, _: CMutableVoidPointer) -> CInt
func inet_pton(_: CInt, _: CString, _: CMutableVoidPointer) -> CInt
func initgroups(_: CString, _: CInt) -> CInt
func initgroups(_: CString, _: CInt) -> CInt
func initstate(_: CUnsignedInt, _: CMutablePointer<CChar>, _: UInt) -> UnsafePointer<CChar>
func initstate(_: CUnsignedInt, _: CMutablePointer<CChar>, _: UInt) -> UnsafePointer<CChar>
func innetgr(_: CString, _: CString, _: CString, _: CString) -> CInt
func innetgr(_: CString, _: CString, _: CString, _: CString) -> CInt
typealias ino64_t = __darwin_ino64_t
typealias ino_t = __darwin_ino_t
func insque(_: CMutableVoidPointer, _: CMutableVoidPointer)
func insque(_: CMutableVoidPointer, _: CMutableVoidPointer)
typealias int_fast16_t = Int16
typealias int_fast32_t = Int32
typealias int_fast64_t = Int64
typealias int_fast8_t = Int8
typealias int_least16_t = Int16
typealias int_least32_t = Int32
typealias int_least64_t = Int64
typealias int_least8_t = Int8
typealias integer_t = CInt
typealias interface_filter_t = COpaquePointer
typealias intmax_t = CLong
typealias intptr_t = Int
typealias io_buf_ptr_t = UnsafePointer<CChar>
typealias io_master_t = mach_port_t
struct io_stat_entry {
  var count: UInt64
  var size: UInt64
  init(count: UInt64, size: UInt64)
}
struct io_stat_info {
  var disk_reads: io_stat_entry
  var io_priority: (io_stat_entry, io_stat_entry, io_stat_entry, io_stat_entry)
  var paging: io_stat_entry
  var metadata: io_stat_entry
  var total_io: io_stat_entry
  init(disk_reads: io_stat_entry, io_priority: (io_stat_entry, io_stat_entry, io_stat_entry, io_stat_entry), paging: io_stat_entry, metadata: io_stat_entry, total_io: io_stat_entry)
}
typealias io_stat_info_t = UnsafePointer<io_stat_info>
struct iovec {
  var iov_base: COpaquePointer
  var iov_len: UInt
  init(iov_base: COpaquePointer, iov_len: UInt)
}
struct ip6_mtuinfo {
  var ip6m_addr: sockaddr_in6
  var ip6m_mtu: UInt32
  init(ip6m_addr: sockaddr_in6, ip6m_mtu: UInt32)
}
struct ip_mreq {
  var imr_multiaddr: in_addr
  var imr_interface: in_addr
  init(imr_multiaddr: in_addr, imr_interface: in_addr)
}
struct ip_mreq_source {
  var imr_multiaddr: in_addr
  var imr_sourceaddr: in_addr
  var imr_interface: in_addr
  init(imr_multiaddr: in_addr, imr_sourceaddr: in_addr, imr_interface: in_addr)
}
struct ip_mreqn {
  var imr_multiaddr: in_addr
  var imr_address: in_addr
  var imr_ifindex: CInt
  init(imr_multiaddr: in_addr, imr_address: in_addr, imr_ifindex: CInt)
}
struct ip_opts {
  var ip_dst: in_addr
  var ip_opts: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(ip_dst: in_addr, ip_opts: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct ipc_info_name {
  var iin_name: mach_port_name_t
  var iin_collision: integer_t
  var iin_type: mach_port_type_t
  var iin_urefs: mach_port_urefs_t
  var iin_object: natural_t
  var iin_next: natural_t
  var iin_hash: natural_t
  init(iin_name: mach_port_name_t, iin_collision: integer_t, iin_type: mach_port_type_t, iin_urefs: mach_port_urefs_t, iin_object: natural_t, iin_next: natural_t, iin_hash: natural_t)
}
typealias ipc_info_name_array_t = UnsafePointer<ipc_info_name_t>
typealias ipc_info_name_t = ipc_info_name
struct ipc_info_space {
  var iis_genno_mask: natural_t
  var iis_table_size: natural_t
  var iis_table_next: natural_t
  var iis_tree_size: natural_t
  var iis_tree_small: natural_t
  var iis_tree_hash: natural_t
  init(iis_genno_mask: natural_t, iis_table_size: natural_t, iis_table_next: natural_t, iis_tree_size: natural_t, iis_tree_small: natural_t, iis_tree_hash: natural_t)
}
typealias ipc_info_space_t = ipc_info_space
struct ipc_info_tree_name {
  var iitn_name: ipc_info_name_t
  var iitn_lchild: mach_port_name_t
  var iitn_rchild: mach_port_name_t
  init(iitn_name: ipc_info_name_t, iitn_lchild: mach_port_name_t, iitn_rchild: mach_port_name_t)
}
typealias ipc_info_tree_name_array_t = UnsafePointer<ipc_info_tree_name_t>
typealias ipc_info_tree_name_t = ipc_info_tree_name
struct ipc_perm {
  var uid: uid_t
  var gid: gid_t
  var cuid: uid_t
  var cgid: gid_t
  var mode: mode_t
  var _seq: CUnsignedShort
  var _key: key_t
  init(uid: uid_t, gid: gid_t, cuid: uid_t, cgid: gid_t, mode: mode_t, _seq: CUnsignedShort, _key: key_t)
}
typealias ipc_space_port_t = ipc_space_t
typealias ipc_space_t = mach_port_t
typealias ipc_voucher_attr_control_t = mach_port_t
typealias ipc_voucher_attr_manager_t = mach_port_t
typealias ipc_voucher_t = mach_voucher_t
struct ipv6_mreq {
  var ipv6mr_multiaddr: in6_addr
  var ipv6mr_interface: CUnsignedInt
  init(ipv6mr_multiaddr: in6_addr, ipv6mr_interface: CUnsignedInt)
}
func iruserok(_: CUnsignedLong, _: CInt, _: CString, _: CString) -> CInt
func iruserok(_: CUnsignedLong, _: CInt, _: CString, _: CString) -> CInt
func iruserok_sa(_: CConstVoidPointer, _: CInt, _: CInt, _: CString, _: CString) -> CInt
func iruserok_sa(_: CConstVoidPointer, _: CInt, _: CInt, _: CString, _: CString) -> CInt
func isalnum(_c: CInt) -> CInt
func isalnum(_c: CInt) -> CInt
func isalpha(_c: CInt) -> CInt
func isalpha(_c: CInt) -> CInt
func isascii(_c: CInt) -> CInt
func isascii(_c: CInt) -> CInt
func isatty(_: CInt) -> CInt
func isatty(_: CInt) -> CInt
func isblank(_c: CInt) -> CInt
func isblank(_c: CInt) -> CInt
func iscntrl(_c: CInt) -> CInt
func iscntrl(_c: CInt) -> CInt
func isdigit(_c: CInt) -> CInt
func isdigit(_c: CInt) -> CInt
func isgraph(_c: CInt) -> CInt
func isgraph(_c: CInt) -> CInt
func ishexnumber(_c: CInt) -> CInt
func ishexnumber(_c: CInt) -> CInt
func isideogram(_c: CInt) -> CInt
func isideogram(_c: CInt) -> CInt
func islower(_c: CInt) -> CInt
func islower(_c: CInt) -> CInt
func isnumber(_c: CInt) -> CInt
func isnumber(_c: CInt) -> CInt
func isphonogram(_c: CInt) -> CInt
func isphonogram(_c: CInt) -> CInt
func isprint(_c: CInt) -> CInt
func isprint(_c: CInt) -> CInt
func ispunct(_c: CInt) -> CInt
func ispunct(_c: CInt) -> CInt
func isrune(_c: CInt) -> CInt
func isrune(_c: CInt) -> CInt
func issetugid() -> CInt
func issetugid() -> CInt
func isspace(_c: CInt) -> CInt
func isspace(_c: CInt) -> CInt
func isspecial(_c: CInt) -> CInt
func isspecial(_c: CInt) -> CInt
func isupper(_c: CInt) -> CInt
func isupper(_c: CInt) -> CInt
func iswalnum(_wc: wint_t) -> CInt
func iswalnum(_wc: wint_t) -> CInt
func iswalpha(_wc: wint_t) -> CInt
func iswalpha(_wc: wint_t) -> CInt
func iswascii(_wc: wint_t) -> CInt
func iswascii(_wc: wint_t) -> CInt
func iswblank(_wc: wint_t) -> CInt
func iswblank(_wc: wint_t) -> CInt
func iswcntrl(_wc: wint_t) -> CInt
func iswcntrl(_wc: wint_t) -> CInt
func iswctype(_wc: wint_t, _charclass: wctype_t) -> CInt
func iswctype(_wc: wint_t, _charclass: wctype_t) -> CInt
func iswdigit(_wc: wint_t) -> CInt
func iswdigit(_wc: wint_t) -> CInt
func iswgraph(_wc: wint_t) -> CInt
func iswgraph(_wc: wint_t) -> CInt
func iswhexnumber(_wc: wint_t) -> CInt
func iswhexnumber(_wc: wint_t) -> CInt
func iswideogram(_wc: wint_t) -> CInt
func iswideogram(_wc: wint_t) -> CInt
func iswlower(_wc: wint_t) -> CInt
func iswlower(_wc: wint_t) -> CInt
func iswnumber(_wc: wint_t) -> CInt
func iswnumber(_wc: wint_t) -> CInt
func iswphonogram(_wc: wint_t) -> CInt
func iswphonogram(_wc: wint_t) -> CInt
func iswprint(_wc: wint_t) -> CInt
func iswprint(_wc: wint_t) -> CInt
func iswpunct(_wc: wint_t) -> CInt
func iswpunct(_wc: wint_t) -> CInt
func iswrune(_wc: wint_t) -> CInt
func iswrune(_wc: wint_t) -> CInt
func iswspace(_wc: wint_t) -> CInt
func iswspace(_wc: wint_t) -> CInt
func iswspecial(_wc: wint_t) -> CInt
func iswspecial(_wc: wint_t) -> CInt
func iswupper(_wc: wint_t) -> CInt
func iswupper(_wc: wint_t) -> CInt
func iswxdigit(_wc: wint_t) -> CInt
func iswxdigit(_wc: wint_t) -> CInt
func isxdigit(_c: CInt) -> CInt
func isxdigit(_c: CInt) -> CInt
var italic: Int {
  get {
    return
  }
}
struct itimerval {
  var it_interval: timeval
  var it_value: timeval
  init(it_interval: timeval, it_value: timeval)
}
func j0(_: CDouble) -> CDouble
func j0(_: CDouble) -> CDouble
func j1(_: CDouble) -> CDouble
func j1(_: CDouble) -> CDouble
typealias jmp_buf = (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
func jn(_: CInt, _: CDouble) -> CDouble
func jn(_: CInt, _: CDouble) -> CDouble
func jrand48(_: CMutablePointer<CUnsignedShort>) -> CLong
func jrand48(_: CMutablePointer<CUnsignedShort>) -> CLong
var kAUBadParamErr: Int {
  get {
    return
  }
}
var kAUCloseErr: Int {
  get {
    return
  }
}
var kAULastErr: Int {
  get {
    return
  }
}
var kAUMakeReturnTokErr: Int {
  get {
    return
  }
}
var kAUMakeSubjectTokErr: Int {
  get {
    return
  }
}
var kAUMakeTextTokErr: Int {
  get {
    return
  }
}
var kAUNoErr: Int {
  get {
    return
  }
}
var kAUOpenErr: Int {
  get {
    return
  }
}
var kAUStatErr: Int {
  get {
    return
  }
}
var kAUSysctlErr: Int {
  get {
    return
  }
}
var kAUWriteCallerTokErr: Int {
  get {
    return
  }
}
var kAUWriteReturnTokErr: Int {
  get {
    return
  }
}
var kAUWriteSubjectTokErr: Int {
  get {
    return
  }
}
var kBTBadCloseMask: Int {
  get {
    return
  }
}
var kBTBigKeysMask: Int {
  get {
    return
  }
}
var kBTHeaderNode: Int {
  get {
    return
  }
}
var kBTIndexNode: Int {
  get {
    return
  }
}
var kBTLeafNode: Int {
  get {
    return
  }
}
var kBTMapNode: Int {
  get {
    return
  }
}
var kBTVariableIndexKeysMask: Int {
  get {
    return
  }
}
var kFSKMountVersion: Int {
  get {
    return
  }
}
var kGUARD_EXC_DESTROY: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kGUARD_EXC_INCORRECT_GUARD: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kHFSAllocationFileID: Int {
  get {
    return
  }
}
var kHFSAttributeDataFileID: Int {
  get {
    return
  }
}
var kHFSAttributesFileID: Int {
  get {
    return
  }
}
var kHFSBadBlockFileID: Int {
  get {
    return
  }
}
var kHFSBinaryCompare: Int {
  get {
    return
  }
}
var kHFSBogusExtentFileID: Int {
  get {
    return
  }
}
var kHFSBootVolumeInconsistentBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSBootVolumeInconsistentMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSCaseFolding: Int {
  get {
    return
  }
}
var kHFSCatalogFileID: Int {
  get {
    return
  }
}
var kHFSCatalogKeyMaximumLength: Int {
  get {
    return
  }
}
var kHFSCatalogKeyMinimumLength: Int {
  get {
    return
  }
}
var kHFSCatalogNodeIDsReusedBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSCatalogNodeIDsReusedMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSContentProtectionBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSContentProtectionMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSExtentDensity: Int {
  get {
    return
  }
}
var kHFSExtentKeyMaximumLength: Int {
  get {
    return
  }
}
var kHFSExtentsFileID: Int {
  get {
    return
  }
}
var kHFSFileLockedBit: Int {
  get {
    return
  }
}
var kHFSFileLockedMask: Int {
  get {
    return
  }
}
var kHFSFileRecord: Int {
  get {
    return
  }
}
var kHFSFileThreadRecord: Int {
  get {
    return
  }
}
var kHFSFirstUserCatalogNodeID: Int {
  get {
    return
  }
}
var kHFSFolderRecord: Int {
  get {
    return
  }
}
var kHFSFolderThreadRecord: Int {
  get {
    return
  }
}
var kHFSHasAttributesBit: Int {
  get {
    return
  }
}
var kHFSHasAttributesMask: Int {
  get {
    return
  }
}
var kHFSHasChildLinkBit: Int {
  get {
    return
  }
}
var kHFSHasChildLinkMask: Int {
  get {
    return
  }
}
var kHFSHasDateAddedBit: Int {
  get {
    return
  }
}
var kHFSHasDateAddedMask: Int {
  get {
    return
  }
}
var kHFSHasFolderCountBit: Int {
  get {
    return
  }
}
var kHFSHasFolderCountMask: Int {
  get {
    return
  }
}
var kHFSHasLinkChainBit: Int {
  get {
    return
  }
}
var kHFSHasLinkChainMask: Int {
  get {
    return
  }
}
var kHFSHasSecurityBit: Int {
  get {
    return
  }
}
var kHFSHasSecurityMask: Int {
  get {
    return
  }
}
var kHFSJMountVersion: Int {
  get {
    return
  }
}
var kHFSMDBAttributesMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSMaxAttrNameLen: Int {
  get {
    return
  }
}
var kHFSMaxFileNameChars: Int {
  get {
    return
  }
}
var kHFSMaxVolumeNameChars: Int {
  get {
    return
  }
}
var kHFSPlusAttrExtents: Int {
  get {
    return
  }
}
var kHFSPlusAttrForkData: Int {
  get {
    return
  }
}
var kHFSPlusAttrInlineData: Int {
  get {
    return
  }
}
var kHFSPlusAttrMinNodeSize: Int {
  get {
    return
  }
}
var kHFSPlusCatalogKeyMaximumLength: Int {
  get {
    return
  }
}
var kHFSPlusCatalogKeyMinimumLength: Int {
  get {
    return
  }
}
var kHFSPlusCatalogMinNodeSize: Int {
  get {
    return
  }
}
var kHFSPlusCreator: Int {
  get {
    return
  }
}
var kHFSPlusExtentDensity: Int {
  get {
    return
  }
}
var kHFSPlusExtentKeyMaximumLength: Int {
  get {
    return
  }
}
var kHFSPlusExtentMinNodeSize: Int {
  get {
    return
  }
}
var kHFSPlusFileRecord: Int {
  get {
    return
  }
}
var kHFSPlusFileThreadRecord: Int {
  get {
    return
  }
}
var kHFSPlusFolderRecord: Int {
  get {
    return
  }
}
var kHFSPlusFolderThreadRecord: Int {
  get {
    return
  }
}
var kHFSPlusMaxFileNameChars: Int {
  get {
    return
  }
}
var kHFSPlusMountVersion: Int {
  get {
    return
  }
}
var kHFSPlusSigWord: Int {
  get {
    return
  }
}
var kHFSPlusVersion: Int {
  get {
    return
  }
}
var kHFSRepairCatalogFileID: Int {
  get {
    return
  }
}
var kHFSRootFolderID: Int {
  get {
    return
  }
}
var kHFSRootParentID: Int {
  get {
    return
  }
}
var kHFSSigWord: Int {
  get {
    return
  }
}
var kHFSStartupFileID: Int {
  get {
    return
  }
}
var kHFSThreadExistsBit: Int {
  get {
    return
  }
}
var kHFSThreadExistsMask: Int {
  get {
    return
  }
}
var kHFSUnusedNodeFixBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSUnusedNodeFixMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSUnusedNodesFixDate: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeHardwareLockBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeHardwareLockMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeInconsistentBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeInconsistentMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeJournaledBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeJournaledMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeNoCacheRequiredBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeNoCacheRequiredMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeSoftwareLockBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeSoftwareLockMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeSparedBlocksBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeSparedBlocksMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeUnmountedBit: CUnsignedInt {
  get {
    return
  }
}
var kHFSVolumeUnmountedMask: CUnsignedInt {
  get {
    return
  }
}
var kHFSXSigWord: Int {
  get {
    return
  }
}
var kHFSXVersion: Int {
  get {
    return
  }
}
var kHardLinkFileType: Int {
  get {
    return
  }
}
var kJIJournalInFSMask: Int {
  get {
    return
  }
}
var kJIJournalNeedInitMask: Int {
  get {
    return
  }
}
var kJIJournalOnOtherDeviceMask: Int {
  get {
    return
  }
}
var kMaxKeyLength: BTreeKeyLimits {
  get {
    return
  }
}
var kNilOptions: Int {
  get {
    return
  }
}
var kSymLinkCreator: Int {
  get {
    return
  }
}
var kSymLinkFileType: Int {
  get {
    return
  }
}
var kUnknownType: Int {
  get {
    return
  }
}
@availability(*, unavailable) var kVariableLengthArray: Int {
  get {
    return
  }
}
struct kauth_ace {
  var ace_applicable: guid_t
  var ace_flags: UInt32
  var ace_rights: kauth_ace_rights_t
  init(ace_applicable: guid_t, ace_flags: UInt32, ace_rights: kauth_ace_rights_t)
}
typealias kauth_ace_rights_t = UInt32
typealias kauth_ace_t = UnsafePointer<kauth_ace>
struct kauth_acl {
  var acl_entrycount: UInt32
  var acl_flags: UInt32
  var acl_ace: (kauth_ace)
  init(acl_entrycount: UInt32, acl_flags: UInt32, acl_ace: (kauth_ace))
}
typealias kauth_acl_t = UnsafePointer<kauth_acl>
struct kauth_cache_sizes {
  var kcs_group_size: UInt32
  var kcs_id_size: UInt32
  init(kcs_group_size: UInt32, kcs_id_size: UInt32)
}
typealias kauth_cred_t = UnsafePointer<ucred>
struct kauth_filesec {
  var fsec_magic: UInt32
  var fsec_owner: guid_t
  var fsec_group: guid_t
  var fsec_acl: kauth_acl
  init(fsec_magic: UInt32, fsec_owner: guid_t, fsec_group: guid_t, fsec_acl: kauth_acl)
}
typealias kauth_filesec_t = UnsafePointer<kauth_filesec>
struct kauth_identity_extlookup {
  var el_seqno: UInt32
  var el_result: UInt32
  var el_flags: UInt32
  var el_info_pid: __darwin_pid_t
  var el_extend: UInt64
  var el_info_reserved_1: UInt32
  var el_uid: uid_t
  var el_uguid: guid_t
  var el_uguid_valid: UInt32
  var el_usid: ntsid_t
  var el_usid_valid: UInt32
  var el_gid: gid_t
  var el_gguid: guid_t
  var el_gguid_valid: UInt32
  var el_gsid: ntsid_t
  var el_gsid_valid: UInt32
  var el_member_valid: UInt32
  var el_sup_grp_cnt: UInt32
  var el_sup_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t)
  init(el_seqno: UInt32, el_result: UInt32, el_flags: UInt32, el_info_pid: __darwin_pid_t, el_extend: UInt64, el_info_reserved_1: UInt32, el_uid: uid_t, el_uguid: guid_t, el_uguid_valid: UInt32, el_usid: ntsid_t, el_usid_valid: UInt32, el_gid: gid_t, el_gguid: guid_t, el_gguid_valid: UInt32, el_gsid: ntsid_t, el_gsid_valid: UInt32, el_member_valid: UInt32, el_sup_grp_cnt: UInt32, el_sup_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t))
}
struct kern_ctl_info {
  var kcsi_id: UInt32
  var kcsi_reg_unit: UInt32
  var kcsi_flags: UInt32
  var kcsi_recvbufsize: UInt32
  var kcsi_sendbufsize: UInt32
  var kcsi_unit: UInt32
  var kcsi_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(kcsi_id: UInt32, kcsi_reg_unit: UInt32, kcsi_flags: UInt32, kcsi_recvbufsize: UInt32, kcsi_sendbufsize: UInt32, kcsi_unit: UInt32, kcsi_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct kern_event_info {
  var kesi_vendor_code_filter: UInt32
  var kesi_class_filter: UInt32
  var kesi_subclass_filter: UInt32
  init(kesi_vendor_code_filter: UInt32, kesi_class_filter: UInt32, kesi_subclass_filter: UInt32)
}
typealias kern_return_t = CInt
typealias kernel_boot_info_t = (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
struct kernel_resource_sizes {
  var task: natural_t
  var thread: natural_t
  var port: natural_t
  var memory_region: natural_t
  var memory_object: natural_t
  init(task: natural_t, thread: natural_t, port: natural_t, memory_region: natural_t, memory_object: natural_t)
}
typealias kernel_resource_sizes_data_t = kernel_resource_sizes
typealias kernel_resource_sizes_t = UnsafePointer<kernel_resource_sizes>
typealias kernel_version_t = (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
struct kev_dl_proto_data {
  var link_data: net_event_data
  var proto_family: UInt32
  var proto_remaining_count: UInt32
  init(link_data: net_event_data, proto_family: UInt32, proto_remaining_count: UInt32)
}
struct kevent {
  var ident: UInt
  var filter: Int16
  var flags: UInt16
  var fflags: UInt32
  var data: Int
  var udata: COpaquePointer
  init(ident: UInt, filter: Int16, flags: UInt16, fflags: UInt32, data: Int, udata: COpaquePointer)
}
func kevent(kq: CInt, changelist: CConstPointer<kevent>, nchanges: CInt, eventlist: CMutablePointer<kevent>, nevents: CInt, timeout: CConstPointer<timespec>) -> CInt
func kevent(kq: CInt, changelist: CConstPointer<kevent>, nchanges: CInt, eventlist: CMutablePointer<kevent>, nevents: CInt, timeout: CConstPointer<timespec>) -> CInt
func kevent64(kq: CInt, changelist: CConstPointer<kevent64_s>, nchanges: CInt, eventlist: CMutablePointer<kevent64_s>, nevents: CInt, flags: CUnsignedInt, timeout: CConstPointer<timespec>) -> CInt
func kevent64(kq: CInt, changelist: CConstPointer<kevent64_s>, nchanges: CInt, eventlist: CMutablePointer<kevent64_s>, nevents: CInt, flags: CUnsignedInt, timeout: CConstPointer<timespec>) -> CInt
struct kevent64_s {
  var ident: UInt64
  var filter: Int16
  var flags: UInt16
  var fflags: UInt32
  var data: Int64
  var udata: UInt64
  var ext: (UInt64, UInt64)
  init(ident: UInt64, filter: Int16, flags: UInt16, fflags: UInt32, data: Int64, udata: UInt64, ext: (UInt64, UInt64))
}
func kext_request(host_priv: host_priv_t, user_log_flags: UInt32, request_data: vm_offset_t, request_dataCnt: mach_msg_type_number_t, response_data: CMutablePointer<vm_offset_t>, response_dataCnt: CMutablePointer<mach_msg_type_number_t>, log_data: CMutablePointer<vm_offset_t>, log_dataCnt: CMutablePointer<mach_msg_type_number_t>, op_result: CMutablePointer<kern_return_t>) -> kern_return_t
func kext_request(host_priv: host_priv_t, user_log_flags: UInt32, request_data: vm_offset_t, request_dataCnt: mach_msg_type_number_t, response_data: CMutablePointer<vm_offset_t>, response_dataCnt: CMutablePointer<mach_msg_type_number_t>, log_data: CMutablePointer<vm_offset_t>, log_dataCnt: CMutablePointer<mach_msg_type_number_t>, op_result: CMutablePointer<kern_return_t>) -> kern_return_t
typealias key_t = __int32_t
func kill(_: pid_t, _: CInt) -> CInt
func kill(_: pid_t, _: CInt) -> CInt
func killpg(_: pid_t, _: CInt) -> CInt
func killpg(_: pid_t, _: CInt) -> CInt
struct kinfo_lctx {
  var id: pid_t
  var mc: CInt
  init(id: pid_t, mc: CInt)
}
struct kinfo_proc {
  var kp_proc: extern_proc
  var kp_eproc: eproc
  init(kp_proc: extern_proc, kp_eproc: eproc)
}
struct klist {
  var slh_first: COpaquePointer
  init(slh_first: COpaquePointer)
}
typealias kmod_args_t = COpaquePointer
func kmod_control(host_priv: host_priv_t, module: kmod_t, flavor: kmod_control_flavor_t, data: CMutablePointer<kmod_args_t>, dataCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func kmod_control(host_priv: host_priv_t, module: kmod_t, flavor: kmod_control_flavor_t, data: CMutablePointer<kmod_args_t>, dataCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias kmod_control_flavor_t = CInt
func kmod_create(host_priv: host_priv_t, info: vm_address_t, module: CMutablePointer<kmod_t>) -> kern_return_t
func kmod_create(host_priv: host_priv_t, info: vm_address_t, module: CMutablePointer<kmod_t>) -> kern_return_t
func kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t
func kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t
func kmod_get_info(host: host_t, modules: CMutablePointer<kmod_args_t>, modulesCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func kmod_get_info(host: host_t, modules: CMutablePointer<kmod_args_t>, modulesCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct kmod_info {
  var next: UnsafePointer<kmod_info>
  var info_version: Int32
  var id: UInt32
  var name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var version: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var reference_count: Int32
  var reference_list: UnsafePointer<kmod_reference_t>
  var address: vm_address_t
  var size: vm_size_t
  var hdr_size: vm_size_t
  init(next: UnsafePointer<kmod_info>, info_version: Int32, id: UInt32, name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), version: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), reference_count: Int32, reference_list: UnsafePointer<kmod_reference_t>, address: vm_address_t, size: vm_size_t, hdr_size: vm_size_t)
}
struct kmod_info_32_v1 {
  var next_addr: UInt32
  var info_version: Int32
  var id: UInt32
  var name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var version: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var reference_count: Int32
  var reference_list_addr: UInt32
  var address: UInt32
  var size: UInt32
  var hdr_size: UInt32
  var start_addr: UInt32
  var stop_addr: UInt32
  init(next_addr: UInt32, info_version: Int32, id: UInt32, name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), version: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), reference_count: Int32, reference_list_addr: UInt32, address: UInt32, size: UInt32, hdr_size: UInt32, start_addr: UInt32, stop_addr: UInt32)
}
typealias kmod_info_32_v1_t = kmod_info_32_v1
struct kmod_info_64_v1 {
  var next_addr: UInt64
  var info_version: Int32
  var id: UInt32
  var name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var version: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var reference_count: Int32
  var reference_list_addr: UInt64
  var address: UInt64
  var size: UInt64
  var hdr_size: UInt64
  var start_addr: UInt64
  var stop_addr: UInt64
  init(next_addr: UInt64, info_version: Int32, id: UInt32, name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), version: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), reference_count: Int32, reference_list_addr: UInt64, address: UInt64, size: UInt64, hdr_size: UInt64, start_addr: UInt64, stop_addr: UInt64)
}
typealias kmod_info_64_v1_t = kmod_info_64_v1
typealias kmod_info_array_t = UnsafePointer<kmod_info_t>
typealias kmod_info_t = kmod_info
struct kmod_reference {
  var next: UnsafePointer<kmod_reference>
  var info: UnsafePointer<kmod_info>
  init(next: UnsafePointer<kmod_reference>, info: UnsafePointer<kmod_info>)
}
typealias kmod_reference_t = kmod_reference
typealias kmod_start_func_t = (CMutablePointer<kmod_info>, CMutableVoidPointer) -> kern_return_t
typealias kmod_stop_func_t = (CMutablePointer<kmod_info>, CMutableVoidPointer) -> kern_return_t
typealias kmod_t = CInt
func kqueue() -> CInt
func kqueue() -> CInt
struct kqueue_fdinfo {
  var pfi: proc_fileinfo
  var kqueueinfo: kqueue_info
  init(pfi: proc_fileinfo, kqueueinfo: kqueue_info)
}
struct kqueue_info {
  var kq_stat: vinfo_stat
  var kq_state: UInt32
  var rfu_1: UInt32
  init(kq_stat: vinfo_stat, kq_state: UInt32, rfu_1: UInt32)
}
func l64a(_: CLong) -> UnsafePointer<CChar>
func l64a(_: CLong) -> UnsafePointer<CChar>
typealias labelstr_t = UnsafePointer<CChar>
func labs(_: CLong) -> CLong
func labs(_: CLong) -> CLong
struct lastlogx {
  var ll_tv: timeval
  var ll_line: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ll_host: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(ll_tv: timeval, ll_line: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ll_host: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
func lchflags(_: CString, _: __uint32_t) -> CInt
func lchflags(_: CString, _: __uint32_t) -> CInt
func lchmod(_: CString, _: mode_t) -> CInt
func lchmod(_: CString, _: mode_t) -> CInt
func lchown(_: CString, _: uid_t, _: gid_t) -> CInt
func lchown(_: CString, _: uid_t, _: gid_t) -> CInt
func lcong48(_: CMutablePointer<CUnsignedShort>)
func lcong48(_: CMutablePointer<CUnsignedShort>)
struct lconv {
  var decimal_point: UnsafePointer<CChar>
  var thousands_sep: UnsafePointer<CChar>
  var grouping: UnsafePointer<CChar>
  var int_curr_symbol: UnsafePointer<CChar>
  var currency_symbol: UnsafePointer<CChar>
  var mon_decimal_point: UnsafePointer<CChar>
  var mon_thousands_sep: UnsafePointer<CChar>
  var mon_grouping: UnsafePointer<CChar>
  var positive_sign: UnsafePointer<CChar>
  var negative_sign: UnsafePointer<CChar>
  var int_frac_digits: CChar
  var frac_digits: CChar
  var p_cs_precedes: CChar
  var p_sep_by_space: CChar
  var n_cs_precedes: CChar
  var n_sep_by_space: CChar
  var p_sign_posn: CChar
  var n_sign_posn: CChar
  var int_p_cs_precedes: CChar
  var int_n_cs_precedes: CChar
  var int_p_sep_by_space: CChar
  var int_n_sep_by_space: CChar
  var int_p_sign_posn: CChar
  var int_n_sign_posn: CChar
  init(decimal_point: UnsafePointer<CChar>, thousands_sep: UnsafePointer<CChar>, grouping: UnsafePointer<CChar>, int_curr_symbol: UnsafePointer<CChar>, currency_symbol: UnsafePointer<CChar>, mon_decimal_point: UnsafePointer<CChar>, mon_thousands_sep: UnsafePointer<CChar>, mon_grouping: UnsafePointer<CChar>, positive_sign: UnsafePointer<CChar>, negative_sign: UnsafePointer<CChar>, int_frac_digits: CChar, frac_digits: CChar, p_cs_precedes: CChar, p_sep_by_space: CChar, n_cs_precedes: CChar, n_sep_by_space: CChar, p_sign_posn: CChar, n_sign_posn: CChar, int_p_cs_precedes: CChar, int_n_cs_precedes: CChar, int_p_sep_by_space: CChar, int_n_sep_by_space: CChar, int_p_sign_posn: CChar, int_n_sign_posn: CChar)
}
func ldexp(_: CDouble, _: CInt) -> CDouble
func ldexp(_: CDouble, _: CInt) -> CDouble
func ldexpf(_: CFloat, _: CInt) -> CFloat
func ldexpf(_: CFloat, _: CInt) -> CFloat
func ldiv(_: CLong, _: CLong) -> ldiv_t
func ldiv(_: CLong, _: CLong) -> ldiv_t
struct ldiv_t {
  var quot: CLong
  var rem: CLong
  init(quot: CLong, rem: CLong)
}
var leaf: VISIT {
  get {
    return
  }
}
typealias ledger_amount_t = Int64
typealias ledger_array_t = UnsafePointer<ledger_t>
typealias ledger_item_t = natural_t
typealias ledger_port_array_t = ledger_array_t
typealias ledger_port_t = ledger_t
typealias ledger_t = mach_port_t
func lgamma(_: CDouble) -> CDouble
func lgamma(_: CDouble) -> CDouble
func lgammaf(_: CFloat) -> CFloat
func lgammaf(_: CFloat) -> CFloat
func libiconv_set_relocation_prefix(_: CString, _: CString)
func libiconv_set_relocation_prefix(_: CString, _: CString)
struct linger {
  var l_onoff: CInt
  var l_linger: CInt
  init(l_onoff: CInt, l_linger: CInt)
}
func link(_: CString, _: CString) -> CInt
func link(_: CString, _: CString) -> CInt
func linkat(_: CInt, _: CString, _: CInt, _: CString, _: CInt) -> CInt
func linkat(_: CInt, _: CString, _: CInt, _: CString, _: CInt) -> CInt
func lio_listio(mode: CInt, aiocblist: CConstPointer<UnsafePointer<aiocb>>, nent: CInt, sigp: CMutablePointer<sigevent>) -> CInt
func lio_listio(mode: CInt, aiocblist: CConstPointer<UnsafePointer<aiocb>>, nent: CInt, sigp: CMutablePointer<sigevent>) -> CInt
func listen(_: CInt, _: CInt) -> CInt
func listen(_: CInt, _: CInt) -> CInt
func llabs(_: CLongLong) -> CLongLong
func llabs(_: CLongLong) -> CLongLong
func lldiv(_: CLongLong, _: CLongLong) -> lldiv_t
func lldiv(_: CLongLong, _: CLongLong) -> lldiv_t
struct lldiv_t {
  var quot: CLongLong
  var rem: CLongLong
  init(quot: CLongLong, rem: CLongLong)
}
func llrint(_: CDouble) -> CLongLong
func llrint(_: CDouble) -> CLongLong
func llrintf(_: CFloat) -> CLongLong
func llrintf(_: CFloat) -> CLongLong
func llround(_: CDouble) -> CLongLong
func llround(_: CDouble) -> CLongLong
func llroundf(_: CFloat) -> CLongLong
func llroundf(_: CFloat) -> CLongLong
struct loadavg {
  var ldavg: (fixpt_t, fixpt_t, fixpt_t)
  var fscale: CLong
  init(ldavg: (fixpt_t, fixpt_t, fixpt_t), fscale: CLong)
}
func localeconv() -> UnsafePointer<lconv>
func localeconv() -> UnsafePointer<lconv>
func localtime(_: CConstPointer<time_t>) -> UnsafePointer<tm>
func localtime(_: CConstPointer<time_t>) -> UnsafePointer<tm>
func localtime_r(_: CConstPointer<time_t>, _: CMutablePointer<tm>) -> UnsafePointer<tm>
func localtime_r(_: CConstPointer<time_t>, _: CMutablePointer<tm>) -> UnsafePointer<tm>
func lock_acquire(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_acquire(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_handoff(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_handoff(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_handoff_accept(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_handoff_accept(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_make_stable(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_make_stable(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_release(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_release(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_set_create(task: task_t, new_lock_set: CMutablePointer<lock_set_t>, n_ulocks: CInt, policy: CInt) -> kern_return_t
func lock_set_create(task: task_t, new_lock_set: CMutablePointer<lock_set_t>, n_ulocks: CInt, policy: CInt) -> kern_return_t
func lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t
func lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t
typealias lock_set_port_t = lock_set_t
typealias lock_set_t = mach_port_t
func lock_try(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lock_try(lock_set: lock_set_t, lock_id: CInt) -> kern_return_t
func lockf(_: CInt, _: CInt, _: off_t) -> CInt
func lockf(_: CInt, _: CInt, _: off_t) -> CInt
struct lockgroup_info {
  var lockgroup_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var lockgroup_attr: UInt64
  var lock_spin_cnt: UInt64
  var lock_spin_util_cnt: UInt64
  var lock_spin_held_cnt: UInt64
  var lock_spin_miss_cnt: UInt64
  var lock_spin_held_max: UInt64
  var lock_spin_held_cum: UInt64
  var lock_mtx_cnt: UInt64
  var lock_mtx_util_cnt: UInt64
  var lock_mtx_held_cnt: UInt64
  var lock_mtx_miss_cnt: UInt64
  var lock_mtx_wait_cnt: UInt64
  var lock_mtx_held_max: UInt64
  var lock_mtx_held_cum: UInt64
  var lock_mtx_wait_max: UInt64
  var lock_mtx_wait_cum: UInt64
  var lock_rw_cnt: UInt64
  var lock_rw_util_cnt: UInt64
  var lock_rw_held_cnt: UInt64
  var lock_rw_miss_cnt: UInt64
  var lock_rw_wait_cnt: UInt64
  var lock_rw_held_max: UInt64
  var lock_rw_held_cum: UInt64
  var lock_rw_wait_max: UInt64
  var lock_rw_wait_cum: UInt64
  init(lockgroup_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), lockgroup_attr: UInt64, lock_spin_cnt: UInt64, lock_spin_util_cnt: UInt64, lock_spin_held_cnt: UInt64, lock_spin_miss_cnt: UInt64, lock_spin_held_max: UInt64, lock_spin_held_cum: UInt64, lock_mtx_cnt: UInt64, lock_mtx_util_cnt: UInt64, lock_mtx_held_cnt: UInt64, lock_mtx_miss_cnt: UInt64, lock_mtx_wait_cnt: UInt64, lock_mtx_held_max: UInt64, lock_mtx_held_cum: UInt64, lock_mtx_wait_max: UInt64, lock_mtx_wait_cum: UInt64, lock_rw_cnt: UInt64, lock_rw_util_cnt: UInt64, lock_rw_held_cnt: UInt64, lock_rw_miss_cnt: UInt64, lock_rw_wait_cnt: UInt64, lock_rw_held_max: UInt64, lock_rw_held_cum: UInt64, lock_rw_wait_max: UInt64, lock_rw_wait_cum: UInt64)
}
typealias lockgroup_info_array_t = UnsafePointer<lockgroup_info_t>
typealias lockgroup_info_t = lockgroup_info
func log(_: CDouble) -> CDouble
func log(_: CDouble) -> CDouble
func log10(_: CDouble) -> CDouble
func log10(_: CDouble) -> CDouble
func log10f(_: CFloat) -> CFloat
func log10f(_: CFloat) -> CFloat
func log1p(_: CDouble) -> CDouble
func log1p(_: CDouble) -> CDouble
func log1pf(_: CFloat) -> CFloat
func log1pf(_: CFloat) -> CFloat
func log2(_: CDouble) -> CDouble
func log2(_: CDouble) -> CDouble
func log2f(_: CFloat) -> CFloat
func log2f(_: CFloat) -> CFloat
struct log2phys {
  var l2p_flags: CUnsignedInt
  var l2p_contigbytes: off_t
  var l2p_devoffset: off_t
  init(l2p_flags: CUnsignedInt, l2p_contigbytes: off_t, l2p_devoffset: off_t)
}
func logb(_: CDouble) -> CDouble
func logb(_: CDouble) -> CDouble
func logbf(_: CFloat) -> CFloat
func logbf(_: CFloat) -> CFloat
func logf(_: CFloat) -> CFloat
func logf(_: CFloat) -> CFloat
@noreturn func longjmp(_: CMutablePointer<CInt>, _: CInt)
@noreturn func longjmp(_: CMutablePointer<CInt>, _: CInt)
func longjmperror()
func longjmperror()
func lrand48() -> CLong
func lrand48() -> CLong
func lrint(_: CDouble) -> CLong
func lrint(_: CDouble) -> CLong
func lrintf(_: CFloat) -> CLong
func lrintf(_: CFloat) -> CLong
func lround(_: CDouble) -> CLong
func lround(_: CDouble) -> CLong
func lroundf(_: CFloat) -> CLong
func lroundf(_: CFloat) -> CLong
func lseek(_: CInt, _: off_t, _: CInt) -> off_t
func lseek(_: CInt, _: off_t, _: CInt) -> off_t
func lstat(_: CString, _: CMutablePointer<stat>) -> CInt
func lstat(_: CString, _: CMutablePointer<stat>) -> CInt
func lstat64(_: CString, _: CMutablePointer<stat64>) -> CInt
func lstat64(_: CString, _: CMutablePointer<stat64>) -> CInt
func lstatx64_np(_: CString, _: CMutablePointer<stat64>, _: filesec_t) -> CInt
func lstatx64_np(_: CString, _: CMutablePointer<stat64>, _: filesec_t) -> CInt
func lstatx_np(_: CString, _: CMutablePointer<stat>, _: filesec_t) -> CInt
func lstatx_np(_: CString, _: CMutablePointer<stat>, _: filesec_t) -> CInt
func lutimes(_: CString, _: CConstPointer<timeval>) -> CInt
func lutimes(_: CString, _: CConstPointer<timeval>) -> CInt
func mach_absolute_time() -> UInt64
func mach_absolute_time() -> UInt64
func mach_approximate_time() -> UInt64
func mach_approximate_time() -> UInt64
struct mach_dead_name_notification_t {
  var not_header: mach_msg_header_t
  var NDR: NDR_record_t
  var not_port: mach_port_name_t
  var trailer: mach_msg_format_0_trailer_t
  init(not_header: mach_msg_header_t, NDR: NDR_record_t, not_port: mach_port_name_t, trailer: mach_msg_format_0_trailer_t)
}
func mach_error(str: CString, error_value: mach_error_t)
func mach_error(str: CString, error_value: mach_error_t)
func mach_error_string(error_value: mach_error_t) -> UnsafePointer<CChar>
func mach_error_string(error_value: mach_error_t) -> UnsafePointer<CChar>
typealias mach_error_t = kern_return_t
func mach_error_type(error_value: mach_error_t) -> UnsafePointer<CChar>
func mach_error_type(error_value: mach_error_t) -> UnsafePointer<CChar>
typealias mach_exception_code_t = mach_exception_data_type_t
typealias mach_exception_data_t = UnsafePointer<mach_exception_data_type_t>
typealias mach_exception_data_type_t = Int64
typealias mach_exception_subcode_t = mach_exception_data_type_t
func mach_host_self() -> mach_port_t
func mach_host_self() -> mach_port_t
func mach_make_memory_entry(target_task: vm_map_t, size: CMutablePointer<vm_size_t>, offset: vm_offset_t, permission: vm_prot_t, object_handle: CMutablePointer<mem_entry_name_port_t>, parent_entry: mem_entry_name_port_t) -> kern_return_t
func mach_make_memory_entry(target_task: vm_map_t, size: CMutablePointer<vm_size_t>, offset: vm_offset_t, permission: vm_prot_t, object_handle: CMutablePointer<mem_entry_name_port_t>, parent_entry: mem_entry_name_port_t) -> kern_return_t
func mach_make_memory_entry_64(target_task: vm_map_t, size: CMutablePointer<memory_object_size_t>, offset: memory_object_offset_t, permission: vm_prot_t, object_handle: CMutablePointer<mach_port_t>, parent_entry: mem_entry_name_port_t) -> kern_return_t
func mach_make_memory_entry_64(target_task: vm_map_t, size: CMutablePointer<memory_object_size_t>, offset: memory_object_offset_t, permission: vm_prot_t, object_handle: CMutablePointer<mach_port_t>, parent_entry: mem_entry_name_port_t) -> kern_return_t
func mach_memory_object_memory_entry(host: host_t, internal: boolean_t, size: vm_size_t, permission: vm_prot_t, pager: memory_object_t, entry_handle: CMutablePointer<mach_port_t>) -> kern_return_t
func mach_memory_object_memory_entry(host: host_t, internal: boolean_t, size: vm_size_t, permission: vm_prot_t, pager: memory_object_t, entry_handle: CMutablePointer<mach_port_t>) -> kern_return_t
func mach_memory_object_memory_entry_64(host: host_t, internal: boolean_t, size: memory_object_size_t, permission: vm_prot_t, pager: memory_object_t, entry_handle: CMutablePointer<mach_port_t>) -> kern_return_t
func mach_memory_object_memory_entry_64(host: host_t, internal: boolean_t, size: memory_object_size_t, permission: vm_prot_t, pager: memory_object_t, entry_handle: CMutablePointer<mach_port_t>) -> kern_return_t
func mach_msg(msg: CMutablePointer<mach_msg_header_t>, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t) -> mach_msg_return_t
func mach_msg(msg: CMutablePointer<mach_msg_header_t>, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t) -> mach_msg_return_t
struct mach_msg_audit_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  var msgh_sender: security_token_t
  var msgh_audit: audit_token_t
  init(msgh_trailer_type: mach_msg_trailer_type_t, msgh_trailer_size: mach_msg_trailer_size_t, msgh_seqno: mach_port_seqno_t, msgh_sender: security_token_t, msgh_audit: audit_token_t)
}
struct mach_msg_base_t {
  var header: mach_msg_header_t
  var body: mach_msg_body_t
  init(header: mach_msg_header_t, body: mach_msg_body_t)
}
typealias mach_msg_bits_t = CUnsignedInt
struct mach_msg_body_t {
  var msgh_descriptor_count: mach_msg_size_t
  init(msgh_descriptor_count: mach_msg_size_t)
}
struct mach_msg_context_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  var msgh_sender: security_token_t
  var msgh_audit: audit_token_t
  var msgh_context: mach_port_context_t
  init(msgh_trailer_type: mach_msg_trailer_type_t, msgh_trailer_size: mach_msg_trailer_size_t, msgh_seqno: mach_port_seqno_t, msgh_sender: security_token_t, msgh_audit: audit_token_t, msgh_context: mach_port_context_t)
}
typealias mach_msg_copy_options_t = CUnsignedInt
typealias mach_msg_descriptor_type_t = CUnsignedInt
func mach_msg_destroy(_: CMutablePointer<mach_msg_header_t>)
func mach_msg_destroy(_: CMutablePointer<mach_msg_header_t>)
struct mach_msg_empty_rcv_t {
  var header: mach_msg_header_t
  var trailer: mach_msg_trailer_t
  init(header: mach_msg_header_t, trailer: mach_msg_trailer_t)
}
struct mach_msg_empty_send_t {
  var header: mach_msg_header_t
  init(header: mach_msg_header_t)
}
typealias mach_msg_format_0_trailer_t = mach_msg_security_trailer_t
struct mach_msg_header_t {
  var msgh_bits: mach_msg_bits_t
  var msgh_size: mach_msg_size_t
  var msgh_remote_port: mach_port_t
  var msgh_local_port: mach_port_t
  var msgh_voucher_port: mach_port_name_t
  var msgh_id: mach_msg_id_t
  init(msgh_bits: mach_msg_bits_t, msgh_size: mach_msg_size_t, msgh_remote_port: mach_port_t, msgh_local_port: mach_port_t, msgh_voucher_port: mach_port_name_t, msgh_id: mach_msg_id_t)
}
typealias mach_msg_id_t = integer_t
struct mach_msg_mac_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  var msgh_sender: security_token_t
  var msgh_audit: audit_token_t
  var msgh_context: mach_port_context_t
  var msgh_ad: CInt
  var msgh_labels: msg_labels_t
  init(msgh_trailer_type: mach_msg_trailer_type_t, msgh_trailer_size: mach_msg_trailer_size_t, msgh_seqno: mach_port_seqno_t, msgh_sender: security_token_t, msgh_audit: audit_token_t, msgh_context: mach_port_context_t, msgh_ad: CInt, msgh_labels: msg_labels_t)
}
typealias mach_msg_max_trailer_t = mach_msg_mac_trailer_t
typealias mach_msg_option_t = integer_t
typealias mach_msg_options_t = integer_t
func mach_msg_overwrite(msg: CMutablePointer<mach_msg_header_t>, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t, rcv_msg: CMutablePointer<mach_msg_header_t>, rcv_limit: mach_msg_size_t) -> mach_msg_return_t
func mach_msg_overwrite(msg: CMutablePointer<mach_msg_header_t>, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t, rcv_msg: CMutablePointer<mach_msg_header_t>, rcv_limit: mach_msg_size_t) -> mach_msg_return_t
func mach_msg_receive(_: CMutablePointer<mach_msg_header_t>) -> mach_msg_return_t
func mach_msg_receive(_: CMutablePointer<mach_msg_header_t>) -> mach_msg_return_t
typealias mach_msg_return_t = kern_return_t
struct mach_msg_security_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  var msgh_sender: security_token_t
  init(msgh_trailer_type: mach_msg_trailer_type_t, msgh_trailer_size: mach_msg_trailer_size_t, msgh_seqno: mach_port_seqno_t, msgh_sender: security_token_t)
}
func mach_msg_send(_: CMutablePointer<mach_msg_header_t>) -> mach_msg_return_t
func mach_msg_send(_: CMutablePointer<mach_msg_header_t>) -> mach_msg_return_t
struct mach_msg_seqno_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  init(msgh_trailer_type: mach_msg_trailer_type_t, msgh_trailer_size: mach_msg_trailer_size_t, msgh_seqno: mach_port_seqno_t)
}
typealias mach_msg_size_t = natural_t
typealias mach_msg_timeout_t = natural_t
typealias mach_msg_trailer_info_t = UnsafePointer<CChar>
typealias mach_msg_trailer_size_t = CUnsignedInt
struct mach_msg_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  init(msgh_trailer_type: mach_msg_trailer_type_t, msgh_trailer_size: mach_msg_trailer_size_t)
}
typealias mach_msg_trailer_type_t = CUnsignedInt
typealias mach_msg_type_name_t = CUnsignedInt
typealias mach_msg_type_number_t = natural_t
typealias mach_msg_type_size_t = natural_t
struct mach_no_senders_notification_t {
  var not_header: mach_msg_header_t
  var NDR: NDR_record_t
  var not_count: mach_msg_type_number_t
  var trailer: mach_msg_format_0_trailer_t
  init(not_header: mach_msg_header_t, NDR: NDR_record_t, not_count: mach_msg_type_number_t, trailer: mach_msg_format_0_trailer_t)
}
func mach_port_allocate(task: ipc_space_t, right: mach_port_right_t, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func mach_port_allocate(task: ipc_space_t, right: mach_port_right_t, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func mach_port_allocate_full(task: ipc_space_t, right: mach_port_right_t, proto: mach_port_t, qos: COpaquePointer, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func mach_port_allocate_full(task: ipc_space_t, right: mach_port_right_t, proto: mach_port_t, qos: COpaquePointer, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func mach_port_allocate_name(task: ipc_space_t, right: mach_port_right_t, name: mach_port_name_t) -> kern_return_t
func mach_port_allocate_name(task: ipc_space_t, right: mach_port_right_t, name: mach_port_name_t) -> kern_return_t
func mach_port_allocate_qos(task: ipc_space_t, right: mach_port_right_t, qos: COpaquePointer, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func mach_port_allocate_qos(task: ipc_space_t, right: mach_port_right_t, qos: COpaquePointer, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
typealias mach_port_array_t = UnsafePointer<mach_port_t>
func mach_port_construct(task: ipc_space_t, options: CMutablePointer<mach_port_options_t>, context: mach_port_context_t, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
func mach_port_construct(task: ipc_space_t, options: CMutablePointer<mach_port_options_t>, context: mach_port_context_t, name: CMutablePointer<mach_port_name_t>) -> kern_return_t
typealias mach_port_context_t = mach_vm_address_t
func mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t
func mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t
struct mach_port_deleted_notification_t {
  var not_header: mach_msg_header_t
  var NDR: NDR_record_t
  var not_port: mach_port_name_t
  var trailer: mach_msg_format_0_trailer_t
  init(not_header: mach_msg_header_t, NDR: NDR_record_t, not_port: mach_port_name_t, trailer: mach_msg_format_0_trailer_t)
}
typealias mach_port_delta_t = integer_t
func mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t
func mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t
struct mach_port_destroyed_notification_t {
  var not_header: mach_msg_header_t
  var not_body: mach_msg_body_t
  var trailer: mach_msg_format_0_trailer_t
  init(not_header: mach_msg_header_t, not_body: mach_msg_body_t, trailer: mach_msg_format_0_trailer_t)
}
func mach_port_destruct(task: ipc_space_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: mach_port_context_t) -> kern_return_t
func mach_port_destruct(task: ipc_space_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: mach_port_context_t) -> kern_return_t
func mach_port_dnrequest_info(task: ipc_space_t, name: mach_port_name_t, dnr_total: CMutablePointer<CUnsignedInt>, dnr_used: CMutablePointer<CUnsignedInt>) -> kern_return_t
func mach_port_dnrequest_info(task: ipc_space_t, name: mach_port_name_t, dnr_total: CMutablePointer<CUnsignedInt>, dnr_used: CMutablePointer<CUnsignedInt>) -> kern_return_t
func mach_port_extract_member(task: ipc_space_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func mach_port_extract_member(task: ipc_space_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func mach_port_extract_right(task: ipc_space_t, name: mach_port_name_t, msgt_name: mach_msg_type_name_t, poly: CMutablePointer<mach_port_t>, polyPoly: CMutablePointer<mach_msg_type_name_t>) -> kern_return_t
func mach_port_extract_right(task: ipc_space_t, name: mach_port_name_t, msgt_name: mach_msg_type_name_t, poly: CMutablePointer<mach_port_t>, polyPoly: CMutablePointer<mach_msg_type_name_t>) -> kern_return_t
typealias mach_port_flavor_t = CInt
func mach_port_get_attributes(task: ipc_space_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info_out: CMutablePointer<integer_t>, port_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_get_attributes(task: ipc_space_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info_out: CMutablePointer<integer_t>, port_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_get_context(task: ipc_space_t, name: mach_port_name_t, context: CMutablePointer<mach_port_context_t>) -> kern_return_t
func mach_port_get_context(task: ipc_space_t, name: mach_port_name_t, context: CMutablePointer<mach_port_context_t>) -> kern_return_t
func mach_port_get_refs(task: ipc_space_t, name: mach_port_name_t, right: mach_port_right_t, refs: CMutablePointer<mach_port_urefs_t>) -> kern_return_t
func mach_port_get_refs(task: ipc_space_t, name: mach_port_name_t, right: mach_port_right_t, refs: CMutablePointer<mach_port_urefs_t>) -> kern_return_t
func mach_port_get_set_status(task: ipc_space_t, name: mach_port_name_t, members: CMutablePointer<mach_port_name_array_t>, membersCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_get_set_status(task: ipc_space_t, name: mach_port_name_t, members: CMutablePointer<mach_port_name_array_t>, membersCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_get_srights(task: ipc_space_t, name: mach_port_name_t, srights: CMutablePointer<mach_port_rights_t>) -> kern_return_t
func mach_port_get_srights(task: ipc_space_t, name: mach_port_name_t, srights: CMutablePointer<mach_port_rights_t>) -> kern_return_t
func mach_port_guard(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t, strict: boolean_t) -> kern_return_t
func mach_port_guard(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t, strict: boolean_t) -> kern_return_t
struct mach_port_guard_exception_codes {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
struct mach_port_info_ext {
  var mpie_status: mach_port_status_t
  var mpie_boost_cnt: mach_port_msgcount_t
  var reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(mpie_status: mach_port_status_t, mpie_boost_cnt: mach_port_msgcount_t, reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
typealias mach_port_info_ext_t = mach_port_info_ext
typealias mach_port_info_t = UnsafePointer<integer_t>
func mach_port_insert_member(task: ipc_space_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func mach_port_insert_member(task: ipc_space_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func mach_port_insert_right(task: ipc_space_t, name: mach_port_name_t, poly: mach_port_t, polyPoly: mach_msg_type_name_t) -> kern_return_t
func mach_port_insert_right(task: ipc_space_t, name: mach_port_name_t, poly: mach_port_t, polyPoly: mach_msg_type_name_t) -> kern_return_t
func mach_port_kernel_object(task: ipc_space_t, name: mach_port_name_t, object_type: CMutablePointer<CUnsignedInt>, object_addr: CMutablePointer<CUnsignedInt>) -> kern_return_t
func mach_port_kernel_object(task: ipc_space_t, name: mach_port_name_t, object_type: CMutablePointer<CUnsignedInt>, object_addr: CMutablePointer<CUnsignedInt>) -> kern_return_t
func mach_port_kobject(task: ipc_space_t, name: mach_port_name_t, object_type: CMutablePointer<natural_t>, object_addr: CMutablePointer<mach_vm_address_t>) -> kern_return_t
func mach_port_kobject(task: ipc_space_t, name: mach_port_name_t, object_type: CMutablePointer<natural_t>, object_addr: CMutablePointer<mach_vm_address_t>) -> kern_return_t
struct mach_port_limits {
  var mpl_qlimit: mach_port_msgcount_t
  init(mpl_qlimit: mach_port_msgcount_t)
}
typealias mach_port_limits_t = mach_port_limits
func mach_port_mod_refs(task: ipc_space_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) -> kern_return_t
func mach_port_mod_refs(task: ipc_space_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) -> kern_return_t
func mach_port_move_member(task: ipc_space_t, member: mach_port_name_t, after: mach_port_name_t) -> kern_return_t
func mach_port_move_member(task: ipc_space_t, member: mach_port_name_t, after: mach_port_name_t) -> kern_return_t
typealias mach_port_mscount_t = natural_t
typealias mach_port_msgcount_t = natural_t
typealias mach_port_name_array_t = UnsafePointer<mach_port_name_t>
typealias mach_port_name_t = natural_t
func mach_port_names(task: ipc_space_t, names: CMutablePointer<mach_port_name_array_t>, namesCnt: CMutablePointer<mach_msg_type_number_t>, types: CMutablePointer<mach_port_type_array_t>, typesCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_names(task: ipc_space_t, names: CMutablePointer<mach_port_name_array_t>, namesCnt: CMutablePointer<mach_msg_type_number_t>, types: CMutablePointer<mach_port_type_array_t>, typesCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct mach_port_options {
  var flags: UInt32
  var mpl: mach_port_limits_t
  var reserved: (UInt64, UInt64)
  init(flags: UInt32, mpl: mach_port_limits_t, reserved: (UInt64, UInt64))
}
typealias mach_port_options_ptr_t = UnsafePointer<mach_port_options_t>
typealias mach_port_options_t = mach_port_options
func mach_port_peek(task: ipc_space_t, name: mach_port_name_t, trailer_type: mach_msg_trailer_type_t, request_seqnop: CMutablePointer<mach_port_seqno_t>, msg_sizep: CMutablePointer<mach_msg_size_t>, msg_idp: CMutablePointer<mach_msg_id_t>, trailer_infop: CMutablePointer<CChar>, trailer_infopCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_peek(task: ipc_space_t, name: mach_port_name_t, trailer_type: mach_msg_trailer_type_t, request_seqnop: CMutablePointer<mach_port_seqno_t>, msg_sizep: CMutablePointer<mach_msg_size_t>, msg_idp: CMutablePointer<mach_msg_id_t>, trailer_infop: CMutablePointer<CChar>, trailer_infopCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_rename(task: ipc_space_t, old_name: mach_port_name_t, new_name: mach_port_name_t) -> kern_return_t
func mach_port_rename(task: ipc_space_t, old_name: mach_port_name_t, new_name: mach_port_name_t) -> kern_return_t
func mach_port_request_notification(task: ipc_space_t, name: mach_port_name_t, msgid: mach_msg_id_t, sync: mach_port_mscount_t, notify: mach_port_t, notifyPoly: mach_msg_type_name_t, previous: CMutablePointer<mach_port_t>) -> kern_return_t
func mach_port_request_notification(task: ipc_space_t, name: mach_port_name_t, msgid: mach_msg_id_t, sync: mach_port_mscount_t, notify: mach_port_t, notifyPoly: mach_msg_type_name_t, previous: CMutablePointer<mach_port_t>) -> kern_return_t
typealias mach_port_right_t = natural_t
typealias mach_port_rights_t = natural_t
typealias mach_port_seqno_t = natural_t
func mach_port_set_attributes(task: ipc_space_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info: CMutablePointer<integer_t>, port_infoCnt: mach_msg_type_number_t) -> kern_return_t
func mach_port_set_attributes(task: ipc_space_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info: CMutablePointer<integer_t>, port_infoCnt: mach_msg_type_number_t) -> kern_return_t
func mach_port_set_context(task: ipc_space_t, name: mach_port_name_t, context: mach_port_context_t) -> kern_return_t
func mach_port_set_context(task: ipc_space_t, name: mach_port_name_t, context: mach_port_context_t) -> kern_return_t
func mach_port_set_mscount(task: ipc_space_t, name: mach_port_name_t, mscount: mach_port_mscount_t) -> kern_return_t
func mach_port_set_mscount(task: ipc_space_t, name: mach_port_name_t, mscount: mach_port_mscount_t) -> kern_return_t
func mach_port_set_seqno(task: ipc_space_t, name: mach_port_name_t, seqno: mach_port_seqno_t) -> kern_return_t
func mach_port_set_seqno(task: ipc_space_t, name: mach_port_name_t, seqno: mach_port_seqno_t) -> kern_return_t
func mach_port_space_info(task: ipc_space_t, space_info: CMutablePointer<ipc_info_space_t>, table_info: CMutablePointer<ipc_info_name_array_t>, table_infoCnt: CMutablePointer<mach_msg_type_number_t>, tree_info: CMutablePointer<ipc_info_tree_name_array_t>, tree_infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_space_info(task: ipc_space_t, space_info: CMutablePointer<ipc_info_space_t>, table_info: CMutablePointer<ipc_info_name_array_t>, table_infoCnt: CMutablePointer<mach_msg_type_number_t>, tree_info: CMutablePointer<ipc_info_tree_name_array_t>, tree_infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias mach_port_srights_t = CUnsignedInt
struct mach_port_status {
  var mps_pset: mach_port_rights_t
  var mps_seqno: mach_port_seqno_t
  var mps_mscount: mach_port_mscount_t
  var mps_qlimit: mach_port_msgcount_t
  var mps_msgcount: mach_port_msgcount_t
  var mps_sorights: mach_port_rights_t
  var mps_srights: boolean_t
  var mps_pdrequest: boolean_t
  var mps_nsrequest: boolean_t
  var mps_flags: natural_t
  init(mps_pset: mach_port_rights_t, mps_seqno: mach_port_seqno_t, mps_mscount: mach_port_mscount_t, mps_qlimit: mach_port_msgcount_t, mps_msgcount: mach_port_msgcount_t, mps_sorights: mach_port_rights_t, mps_srights: boolean_t, mps_pdrequest: boolean_t, mps_nsrequest: boolean_t, mps_flags: natural_t)
}
typealias mach_port_status_t = mach_port_status
typealias mach_port_t = __darwin_mach_port_t
func mach_port_type(task: ipc_space_t, name: mach_port_name_t, ptype: CMutablePointer<mach_port_type_t>) -> kern_return_t
func mach_port_type(task: ipc_space_t, name: mach_port_name_t, ptype: CMutablePointer<mach_port_type_t>) -> kern_return_t
typealias mach_port_type_array_t = UnsafePointer<mach_port_type_t>
typealias mach_port_type_t = natural_t
func mach_port_unguard(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t) -> kern_return_t
func mach_port_unguard(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t) -> kern_return_t
typealias mach_port_urefs_t = natural_t
func mach_ports_lookup(target_task: task_t, init_port_set: CMutablePointer<mach_port_array_t>, init_port_setCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_ports_lookup(target_task: task_t, init_port_set: CMutablePointer<mach_port_array_t>, init_port_setCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_ports_register(target_task: task_t, init_port_set: CMutablePointer<mach_port_t>, init_port_setCnt: mach_msg_type_number_t) -> kern_return_t
func mach_ports_register(target_task: task_t, init_port_set: CMutablePointer<mach_port_t>, init_port_setCnt: mach_msg_type_number_t) -> kern_return_t
struct mach_send_once_notification_t {
  var not_header: mach_msg_header_t
  var trailer: mach_msg_format_0_trailer_t
  init(not_header: mach_msg_header_t, trailer: mach_msg_format_0_trailer_t)
}
struct mach_send_possible_notification_t {
  var not_header: mach_msg_header_t
  var NDR: NDR_record_t
  var not_port: mach_port_name_t
  var trailer: mach_msg_format_0_trailer_t
  init(not_header: mach_msg_header_t, NDR: NDR_record_t, not_port: mach_port_name_t, trailer: mach_msg_format_0_trailer_t)
}
struct mach_task_basic_info {
  var virtual_size: mach_vm_size_t
  var resident_size: mach_vm_size_t
  var resident_size_max: mach_vm_size_t
  var user_time: time_value_t
  var system_time: time_value_t
  var policy: policy_t
  var suspend_count: integer_t
  init(virtual_size: mach_vm_size_t, resident_size: mach_vm_size_t, resident_size_max: mach_vm_size_t, user_time: time_value_t, system_time: time_value_t, policy: policy_t, suspend_count: integer_t)
}
typealias mach_task_basic_info_data_t = mach_task_basic_info
typealias mach_task_basic_info_t = UnsafePointer<mach_task_basic_info>
var mach_task_self_: mach_port_t
func mach_thread_self() -> mach_port_t
func mach_thread_self() -> mach_port_t
func mach_timebase_info(info: CMutablePointer<mach_timebase_info>) -> kern_return_t
func mach_timebase_info(info: CMutablePointer<mach_timebase_info>) -> kern_return_t
struct mach_timebase_info {
  var numer: UInt32
  var denom: UInt32
  init(numer: UInt32, denom: UInt32)
}
typealias mach_timebase_info_data_t = mach_timebase_info
typealias mach_timebase_info_t = UnsafePointer<mach_timebase_info>
struct mach_timespec {
  var tv_sec: CUnsignedInt
  var tv_nsec: clock_res_t
  init(tv_sec: CUnsignedInt, tv_nsec: clock_res_t)
}
typealias mach_timespec_t = mach_timespec
typealias mach_vm_address_t = UInt64
func mach_vm_allocate(target: vm_map_t, address: CMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, flags: CInt) -> kern_return_t
func mach_vm_allocate(target: vm_map_t, address: CMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, flags: CInt) -> kern_return_t
func mach_vm_behavior_set(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, new_behavior: vm_behavior_t) -> kern_return_t
func mach_vm_behavior_set(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, new_behavior: vm_behavior_t) -> kern_return_t
func mach_vm_copy(target_task: vm_map_t, source_address: mach_vm_address_t, size: mach_vm_size_t, dest_address: mach_vm_address_t) -> kern_return_t
func mach_vm_copy(target_task: vm_map_t, source_address: mach_vm_address_t, size: mach_vm_size_t, dest_address: mach_vm_address_t) -> kern_return_t
func mach_vm_deallocate(target: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t) -> kern_return_t
func mach_vm_deallocate(target: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t) -> kern_return_t
struct mach_vm_info_region {
  var vir_start: mach_vm_offset_t
  var vir_end: mach_vm_offset_t
  var vir_object: mach_vm_offset_t
  var vir_offset: memory_object_offset_t
  var vir_needs_copy: boolean_t
  var vir_protection: vm_prot_t
  var vir_max_protection: vm_prot_t
  var vir_inheritance: vm_inherit_t
  var vir_wired_count: natural_t
  var vir_user_wired_count: natural_t
  init(vir_start: mach_vm_offset_t, vir_end: mach_vm_offset_t, vir_object: mach_vm_offset_t, vir_offset: memory_object_offset_t, vir_needs_copy: boolean_t, vir_protection: vm_prot_t, vir_max_protection: vm_prot_t, vir_inheritance: vm_inherit_t, vir_wired_count: natural_t, vir_user_wired_count: natural_t)
}
typealias mach_vm_info_region_t = mach_vm_info_region
func mach_vm_inherit(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, new_inheritance: vm_inherit_t) -> kern_return_t
func mach_vm_inherit(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, new_inheritance: vm_inherit_t) -> kern_return_t
func mach_vm_machine_attribute(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, attribute: vm_machine_attribute_t, value: CMutablePointer<vm_machine_attribute_val_t>) -> kern_return_t
func mach_vm_machine_attribute(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, attribute: vm_machine_attribute_t, value: CMutablePointer<vm_machine_attribute_val_t>) -> kern_return_t
func mach_vm_map(target_task: vm_map_t, address: CMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: CInt, object: mem_entry_name_port_t, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
func mach_vm_map(target_task: vm_map_t, address: CMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: CInt, object: mem_entry_name_port_t, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
func mach_vm_msync(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, sync_flags: vm_sync_t) -> kern_return_t
func mach_vm_msync(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, sync_flags: vm_sync_t) -> kern_return_t
typealias mach_vm_offset_t = UInt64
func mach_vm_page_info(target_task: vm_map_t, address: mach_vm_address_t, flavor: vm_page_info_flavor_t, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_page_info(target_task: vm_map_t, address: mach_vm_address_t, flavor: vm_page_info_flavor_t, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_page_query(target_map: vm_map_t, offset: mach_vm_offset_t, disposition: CMutablePointer<integer_t>, ref_count: CMutablePointer<integer_t>) -> kern_return_t
func mach_vm_page_query(target_map: vm_map_t, offset: mach_vm_offset_t, disposition: CMutablePointer<integer_t>, ref_count: CMutablePointer<integer_t>) -> kern_return_t
func mach_vm_protect(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
func mach_vm_protect(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
func mach_vm_purgable_control(target_task: vm_map_t, address: mach_vm_address_t, control: vm_purgable_t, state: CMutablePointer<CInt>) -> kern_return_t
func mach_vm_purgable_control(target_task: vm_map_t, address: mach_vm_address_t, control: vm_purgable_t, state: CMutablePointer<CInt>) -> kern_return_t
func mach_vm_read(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, data: CMutablePointer<vm_offset_t>, dataCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_read(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, data: CMutablePointer<vm_offset_t>, dataCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct mach_vm_read_entry {
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  init(address: mach_vm_address_t, size: mach_vm_size_t)
}
typealias mach_vm_read_entry_t = (mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry)
func mach_vm_read_list(target_task: vm_map_t, data_list: CMutablePointer<mach_vm_read_entry>, count: natural_t) -> kern_return_t
func mach_vm_read_list(target_task: vm_map_t, data_list: CMutablePointer<mach_vm_read_entry>, count: natural_t) -> kern_return_t
func mach_vm_read_overwrite(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, data: mach_vm_address_t, outsize: CMutablePointer<mach_vm_size_t>) -> kern_return_t
func mach_vm_read_overwrite(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, data: mach_vm_address_t, outsize: CMutablePointer<mach_vm_size_t>) -> kern_return_t
func mach_vm_region(target_task: vm_map_t, address: CMutablePointer<mach_vm_address_t>, size: CMutablePointer<mach_vm_size_t>, flavor: vm_region_flavor_t, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>, object_name: CMutablePointer<mach_port_t>) -> kern_return_t
func mach_vm_region(target_task: vm_map_t, address: CMutablePointer<mach_vm_address_t>, size: CMutablePointer<mach_vm_size_t>, flavor: vm_region_flavor_t, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>, object_name: CMutablePointer<mach_port_t>) -> kern_return_t
func mach_vm_region_info(task: vm_map_t, address: vm_address_t, region: CMutablePointer<vm_info_region_t>, objects: CMutablePointer<vm_info_object_array_t>, objectsCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_region_info(task: vm_map_t, address: vm_address_t, region: CMutablePointer<vm_info_region_t>, objects: CMutablePointer<vm_info_object_array_t>, objectsCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_region_info_64(task: vm_map_t, address: vm_address_t, region: CMutablePointer<vm_info_region_64_t>, objects: CMutablePointer<vm_info_object_array_t>, objectsCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_region_info_64(task: vm_map_t, address: vm_address_t, region: CMutablePointer<vm_info_region_64_t>, objects: CMutablePointer<vm_info_object_array_t>, objectsCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_region_recurse(target_task: vm_map_t, address: CMutablePointer<mach_vm_address_t>, size: CMutablePointer<mach_vm_size_t>, nesting_depth: CMutablePointer<natural_t>, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_region_recurse(target_task: vm_map_t, address: CMutablePointer<mach_vm_address_t>, size: CMutablePointer<mach_vm_size_t>, nesting_depth: CMutablePointer<natural_t>, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_remap(target_task: vm_map_t, target_address: CMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: CInt, src_task: vm_map_t, src_address: mach_vm_address_t, copy: boolean_t, cur_protection: CMutablePointer<vm_prot_t>, max_protection: CMutablePointer<vm_prot_t>, inheritance: vm_inherit_t) -> kern_return_t
func mach_vm_remap(target_task: vm_map_t, target_address: CMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: CInt, src_task: vm_map_t, src_address: mach_vm_address_t, copy: boolean_t, cur_protection: CMutablePointer<vm_prot_t>, max_protection: CMutablePointer<vm_prot_t>, inheritance: vm_inherit_t) -> kern_return_t
typealias mach_vm_size_t = UInt64
func mach_vm_wire(host_priv: host_priv_t, task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, desired_access: vm_prot_t) -> kern_return_t
func mach_vm_wire(host_priv: host_priv_t, task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, desired_access: vm_prot_t) -> kern_return_t
func mach_vm_write(target_task: vm_map_t, address: mach_vm_address_t, data: vm_offset_t, dataCnt: mach_msg_type_number_t) -> kern_return_t
func mach_vm_write(target_task: vm_map_t, address: mach_vm_address_t, data: vm_offset_t, dataCnt: mach_msg_type_number_t) -> kern_return_t
typealias mach_voucher_attr_command_t = UInt32
typealias mach_voucher_attr_content_size_t = UInt32
typealias mach_voucher_attr_content_t = UnsafePointer<UInt8>
typealias mach_voucher_attr_control_flags_t = UInt32
typealias mach_voucher_attr_control_t = mach_port_t
typealias mach_voucher_attr_key_array_t = UnsafePointer<mach_voucher_attr_key_t>
typealias mach_voucher_attr_key_t = UInt32
typealias mach_voucher_attr_manager_t = mach_port_t
typealias mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t
typealias mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t
typealias mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t
typealias mach_voucher_attr_raw_recipe_t = UnsafePointer<UInt8>
typealias mach_voucher_attr_recipe_command_array_t = UnsafePointer<mach_voucher_attr_recipe_command_t>
typealias mach_voucher_attr_recipe_command_t = UInt32
struct mach_voucher_attr_recipe_data {
  var key: mach_voucher_attr_key_t
  var command: mach_voucher_attr_recipe_command_t
  var previous_voucher: mach_voucher_name_t
  var content_size: mach_voucher_attr_content_size_t
  init(key: mach_voucher_attr_key_t, command: mach_voucher_attr_recipe_command_t, previous_voucher: mach_voucher_name_t, content_size: mach_voucher_attr_content_size_t)
}
typealias mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data
typealias mach_voucher_attr_recipe_size_t = mach_msg_type_number_t
typealias mach_voucher_attr_recipe_t = UnsafePointer<mach_voucher_attr_recipe_data_t>
typealias mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t
typealias mach_voucher_attr_value_handle_array_t = UnsafePointer<mach_voucher_attr_value_handle_t>
typealias mach_voucher_attr_value_handle_t = UInt64
typealias mach_voucher_attr_value_reference_t = UInt32
func mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t
func mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t
typealias mach_voucher_name_array_t = UnsafePointer<mach_voucher_name_t>
typealias mach_voucher_name_t = mach_port_name_t
typealias mach_voucher_selector_t = UInt32
typealias mach_voucher_t = mach_port_t
func mach_wait_until(deadline: UInt64) -> kern_return_t
func mach_wait_until(deadline: UInt64) -> kern_return_t
func mach_zone_info(host: host_priv_t, names: CMutablePointer<mach_zone_name_array_t>, namesCnt: CMutablePointer<mach_msg_type_number_t>, info: CMutablePointer<mach_zone_info_array_t>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_zone_info(host: host_priv_t, names: CMutablePointer<mach_zone_name_array_t>, namesCnt: CMutablePointer<mach_msg_type_number_t>, info: CMutablePointer<mach_zone_info_array_t>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias mach_zone_info_array_t = UnsafePointer<mach_zone_info_t>
struct mach_zone_info_data {
  var mzi_count: UInt64
  var mzi_cur_size: UInt64
  var mzi_max_size: UInt64
  var mzi_elem_size: UInt64
  var mzi_alloc_size: UInt64
  var mzi_sum_size: UInt64
  var mzi_exhaustible: UInt64
  var mzi_collectable: UInt64
  init(mzi_count: UInt64, mzi_cur_size: UInt64, mzi_max_size: UInt64, mzi_elem_size: UInt64, mzi_alloc_size: UInt64, mzi_sum_size: UInt64, mzi_exhaustible: UInt64, mzi_collectable: UInt64)
}
typealias mach_zone_info_t = mach_zone_info_data
struct mach_zone_name {
  var mzn_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(mzn_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
typealias mach_zone_name_array_t = UnsafePointer<mach_zone_name_t>
typealias mach_zone_name_t = mach_zone_name
func macx_backing_store_recovery(pid: CInt) -> kern_return_t
func macx_backing_store_recovery(pid: CInt) -> kern_return_t
func macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t
func macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t
func macx_swapoff(filename: UInt64, flags: CInt) -> kern_return_t
func macx_swapoff(filename: UInt64, flags: CInt) -> kern_return_t
func macx_swapon(filename: UInt64, flags: CInt, size: CInt, priority: CInt) -> kern_return_t
func macx_swapon(filename: UInt64, flags: CInt, size: CInt, priority: CInt) -> kern_return_t
func macx_triggers(hi_water: CInt, low_water: CInt, flags: CInt, alert_port: mach_port_t) -> kern_return_t
func macx_triggers(hi_water: CInt, low_water: CInt, flags: CInt, alert_port: mach_port_t) -> kern_return_t
func madvise(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func madvise(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func malloc(_: UInt) -> COpaquePointer
func malloc(_: UInt) -> COpaquePointer
func malloc_create_zone(start_size: vm_size_t, flags: CUnsignedInt) -> UnsafePointer<malloc_zone_t>
func malloc_create_zone(start_size: vm_size_t, flags: CUnsignedInt) -> UnsafePointer<malloc_zone_t>
func malloc_default_purgeable_zone() -> UnsafePointer<malloc_zone_t>
func malloc_default_purgeable_zone() -> UnsafePointer<malloc_zone_t>
func malloc_default_zone() -> UnsafePointer<malloc_zone_t>
func malloc_default_zone() -> UnsafePointer<malloc_zone_t>
func malloc_destroy_zone(zone: CMutablePointer<malloc_zone_t>)
func malloc_destroy_zone(zone: CMutablePointer<malloc_zone_t>)
func malloc_get_zone_name(zone: CMutablePointer<malloc_zone_t>) -> CString
func malloc_get_zone_name(zone: CMutablePointer<malloc_zone_t>) -> CString
func malloc_good_size(size: UInt) -> UInt
func malloc_good_size(size: UInt) -> UInt
struct malloc_introspection_t {
  init()
}
func malloc_make_nonpurgeable(ptr: CMutableVoidPointer) -> CInt
func malloc_make_nonpurgeable(ptr: CMutableVoidPointer) -> CInt
func malloc_make_purgeable(ptr: CMutableVoidPointer)
func malloc_make_purgeable(ptr: CMutableVoidPointer)
func malloc_set_zone_name(zone: CMutablePointer<malloc_zone_t>, name: CString)
func malloc_set_zone_name(zone: CMutablePointer<malloc_zone_t>, name: CString)
func malloc_size(ptr: CConstVoidPointer) -> UInt
func malloc_size(ptr: CConstVoidPointer) -> UInt
struct malloc_statistics_t {
  var blocks_in_use: CUnsignedInt
  var size_in_use: UInt
  var max_size_in_use: UInt
  var size_allocated: UInt
  init(blocks_in_use: CUnsignedInt, size_in_use: UInt, max_size_in_use: UInt, size_allocated: UInt)
}
func malloc_zone_batch_free(zone: CMutablePointer<malloc_zone_t>, to_be_freed: CMutablePointer<COpaquePointer>, num: CUnsignedInt)
func malloc_zone_batch_free(zone: CMutablePointer<malloc_zone_t>, to_be_freed: CMutablePointer<COpaquePointer>, num: CUnsignedInt)
func malloc_zone_batch_malloc(zone: CMutablePointer<malloc_zone_t>, size: UInt, results: CMutablePointer<COpaquePointer>, num_requested: CUnsignedInt) -> CUnsignedInt
func malloc_zone_batch_malloc(zone: CMutablePointer<malloc_zone_t>, size: UInt, results: CMutablePointer<COpaquePointer>, num_requested: CUnsignedInt) -> CUnsignedInt
func malloc_zone_calloc(zone: CMutablePointer<malloc_zone_t>, num_items: UInt, size: UInt) -> COpaquePointer
func malloc_zone_calloc(zone: CMutablePointer<malloc_zone_t>, num_items: UInt, size: UInt) -> COpaquePointer
func malloc_zone_check(zone: CMutablePointer<malloc_zone_t>) -> boolean_t
func malloc_zone_check(zone: CMutablePointer<malloc_zone_t>) -> boolean_t
func malloc_zone_disable_discharge_checking(zone: CMutablePointer<malloc_zone_t>)
func malloc_zone_disable_discharge_checking(zone: CMutablePointer<malloc_zone_t>)
func malloc_zone_discharge(zone: CMutablePointer<malloc_zone_t>, memory: CMutableVoidPointer)
func malloc_zone_discharge(zone: CMutablePointer<malloc_zone_t>, memory: CMutableVoidPointer)
func malloc_zone_enable_discharge_checking(zone: CMutablePointer<malloc_zone_t>) -> boolean_t
func malloc_zone_enable_discharge_checking(zone: CMutablePointer<malloc_zone_t>) -> boolean_t
func malloc_zone_enumerate_discharged_pointers(zone: CMutablePointer<malloc_zone_t>, report_discharged: ((CMutableVoidPointer, CMutableVoidPointer) -> Void)!)
func malloc_zone_enumerate_discharged_pointers(zone: CMutablePointer<malloc_zone_t>, report_discharged: ((CMutableVoidPointer, CMutableVoidPointer) -> Void)!)
func malloc_zone_free(zone: CMutablePointer<malloc_zone_t>, ptr: CMutableVoidPointer)
func malloc_zone_free(zone: CMutablePointer<malloc_zone_t>, ptr: CMutableVoidPointer)
func malloc_zone_from_ptr(ptr: CConstVoidPointer) -> UnsafePointer<malloc_zone_t>
func malloc_zone_from_ptr(ptr: CConstVoidPointer) -> UnsafePointer<malloc_zone_t>
func malloc_zone_log(zone: CMutablePointer<malloc_zone_t>, address: CMutableVoidPointer)
func malloc_zone_log(zone: CMutablePointer<malloc_zone_t>, address: CMutableVoidPointer)
func malloc_zone_malloc(zone: CMutablePointer<malloc_zone_t>, size: UInt) -> COpaquePointer
func malloc_zone_malloc(zone: CMutablePointer<malloc_zone_t>, size: UInt) -> COpaquePointer
func malloc_zone_memalign(zone: CMutablePointer<malloc_zone_t>, alignment: UInt, size: UInt) -> COpaquePointer
func malloc_zone_memalign(zone: CMutablePointer<malloc_zone_t>, alignment: UInt, size: UInt) -> COpaquePointer
func malloc_zone_pressure_relief(zone: CMutablePointer<malloc_zone_t>, goal: UInt) -> UInt
func malloc_zone_pressure_relief(zone: CMutablePointer<malloc_zone_t>, goal: UInt) -> UInt
func malloc_zone_print(zone: CMutablePointer<malloc_zone_t>, verbose: boolean_t)
func malloc_zone_print(zone: CMutablePointer<malloc_zone_t>, verbose: boolean_t)
func malloc_zone_print_ptr_info(ptr: CMutableVoidPointer)
func malloc_zone_print_ptr_info(ptr: CMutableVoidPointer)
func malloc_zone_realloc(zone: CMutablePointer<malloc_zone_t>, ptr: CMutableVoidPointer, size: UInt) -> COpaquePointer
func malloc_zone_realloc(zone: CMutablePointer<malloc_zone_t>, ptr: CMutableVoidPointer, size: UInt) -> COpaquePointer
func malloc_zone_register(zone: CMutablePointer<malloc_zone_t>)
func malloc_zone_register(zone: CMutablePointer<malloc_zone_t>)
func malloc_zone_statistics(zone: CMutablePointer<malloc_zone_t>, stats: CMutablePointer<malloc_statistics_t>)
func malloc_zone_statistics(zone: CMutablePointer<malloc_zone_t>, stats: CMutablePointer<malloc_statistics_t>)
typealias malloc_zone_t = _malloc_zone_t
func malloc_zone_unregister(zone: CMutablePointer<malloc_zone_t>)
func malloc_zone_unregister(zone: CMutablePointer<malloc_zone_t>)
func malloc_zone_valloc(zone: CMutablePointer<malloc_zone_t>, size: UInt) -> COpaquePointer
func malloc_zone_valloc(zone: CMutablePointer<malloc_zone_t>, size: UInt) -> COpaquePointer
func map_fd(fd: CInt, offset: vm_offset_t, addr: CMutablePointer<vm_offset_t>, find_space: boolean_t, numbytes: vm_size_t) -> kern_return_t
func map_fd(fd: CInt, offset: vm_offset_t, addr: CMutablePointer<vm_offset_t>, find_space: boolean_t, numbytes: vm_size_t) -> kern_return_t
var master_device_port: mach_port_t
func matherr(_: CMutablePointer<exception>) -> CInt
func matherr(_: CMutablePointer<exception>) -> CInt
struct mb_class_stat {
  var mbcl_cname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var mbcl_size: UInt32
  var mbcl_total: UInt32
  var mbcl_active: UInt32
  var mbcl_infree: UInt32
  var mbcl_slab_cnt: UInt32
  var mbcl_pad: UInt32
  var mbcl_alloc_cnt: UInt64
  var mbcl_free_cnt: UInt64
  var mbcl_notified: UInt64
  var mbcl_purge_cnt: UInt64
  var mbcl_fail_cnt: UInt64
  var mbcl_ctotal: UInt32
  var mbcl_release_cnt: UInt32
  var mbcl_mc_state: UInt32
  var mbcl_mc_cached: UInt32
  var mbcl_mc_waiter_cnt: UInt32
  var mbcl_mc_wretry_cnt: UInt32
  var mbcl_mc_nwretry_cnt: UInt32
  var mbcl_peak_reported: UInt32
  var mbcl_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(mbcl_cname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), mbcl_size: UInt32, mbcl_total: UInt32, mbcl_active: UInt32, mbcl_infree: UInt32, mbcl_slab_cnt: UInt32, mbcl_pad: UInt32, mbcl_alloc_cnt: UInt64, mbcl_free_cnt: UInt64, mbcl_notified: UInt64, mbcl_purge_cnt: UInt64, mbcl_fail_cnt: UInt64, mbcl_ctotal: UInt32, mbcl_release_cnt: UInt32, mbcl_mc_state: UInt32, mbcl_mc_cached: UInt32, mbcl_mc_waiter_cnt: UInt32, mbcl_mc_wretry_cnt: UInt32, mbcl_mc_nwretry_cnt: UInt32, mbcl_peak_reported: UInt32, mbcl_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
typealias mb_class_stat_t = mb_class_stat
struct mb_stat {
  var mbs_cnt: UInt32
  var mbs_pad: UInt32
  var mbs_class: (mb_class_stat_t)
  init(mbs_cnt: UInt32, mbs_pad: UInt32, mbs_class: (mb_class_stat_t))
}
typealias mb_stat_t = mb_stat
func mblen(_: CString, _: UInt) -> CInt
func mblen(_: CString, _: UInt) -> CInt
func mbrlen(_: CString, _: UInt, _: COpaquePointer) -> UInt
func mbrlen(_: CString, _: UInt, _: COpaquePointer) -> UInt
func mbrtowc(_: CMutablePointer<wchar_t>, _: CString, _: UInt, _: COpaquePointer) -> UInt
func mbrtowc(_: CMutablePointer<wchar_t>, _: CString, _: UInt, _: COpaquePointer) -> UInt
func mbsinit(_: COpaquePointer) -> CInt
func mbsinit(_: COpaquePointer) -> CInt
func mbsnrtowcs(_: CMutablePointer<wchar_t>, _: CMutablePointer<CString>, _: UInt, _: UInt, _: COpaquePointer) -> UInt
func mbsnrtowcs(_: CMutablePointer<wchar_t>, _: CMutablePointer<CString>, _: UInt, _: UInt, _: COpaquePointer) -> UInt
func mbsrtowcs(_: CMutablePointer<wchar_t>, _: CMutablePointer<CString>, _: UInt, _: COpaquePointer) -> UInt
func mbsrtowcs(_: CMutablePointer<wchar_t>, _: CMutablePointer<CString>, _: UInt, _: COpaquePointer) -> UInt
struct mbstat {
  var m_mbufs: UInt32
  var m_clusters: UInt32
  var m_spare: UInt32
  var m_clfree: UInt32
  var m_drops: UInt32
  var m_wait: UInt32
  var m_drain: UInt32
  var m_mtypes: (u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short)
  var m_mcfail: UInt32
  var m_mpfail: UInt32
  var m_msize: UInt32
  var m_mclbytes: UInt32
  var m_minclsize: UInt32
  var m_mlen: UInt32
  var m_mhlen: UInt32
  var m_bigclusters: UInt32
  var m_bigclfree: UInt32
  var m_bigmclbytes: UInt32
  init(m_mbufs: UInt32, m_clusters: UInt32, m_spare: UInt32, m_clfree: UInt32, m_drops: UInt32, m_wait: UInt32, m_drain: UInt32, m_mtypes: (u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short), m_mcfail: UInt32, m_mpfail: UInt32, m_msize: UInt32, m_mclbytes: UInt32, m_minclsize: UInt32, m_mlen: UInt32, m_mhlen: UInt32, m_bigclusters: UInt32, m_bigclfree: UInt32, m_bigmclbytes: UInt32)
}
func mbstowcs(_: CMutablePointer<wchar_t>, _: CString, _: UInt) -> UInt
func mbstowcs(_: CMutablePointer<wchar_t>, _: CString, _: UInt) -> UInt
func mbtowc(_: CMutablePointer<wchar_t>, _: CString, _: UInt) -> CInt
func mbtowc(_: CMutablePointer<wchar_t>, _: CString, _: UInt) -> CInt
typealias mbuf_t = COpaquePointer
typealias mcontext_t = UnsafePointer<__darwin_mcontext64>
typealias mem_entry_name_port_t = mach_port_t
func memccpy(_: CMutableVoidPointer, _: CConstVoidPointer, _: CInt, _: UInt) -> COpaquePointer
func memccpy(_: CMutableVoidPointer, _: CConstVoidPointer, _: CInt, _: UInt) -> COpaquePointer
func memchr(_: CConstVoidPointer, _: CInt, _: UInt) -> COpaquePointer
func memchr(_: CConstVoidPointer, _: CInt, _: UInt) -> COpaquePointer
func memcmp(_: CConstVoidPointer, _: CConstVoidPointer, _: UInt) -> CInt
func memcmp(_: CConstVoidPointer, _: CConstVoidPointer, _: UInt) -> CInt
func memcpy(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt) -> COpaquePointer
func memcpy(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt) -> COpaquePointer
func memmem(_: CConstVoidPointer, _: UInt, _: CConstVoidPointer, _: UInt) -> COpaquePointer
func memmem(_: CConstVoidPointer, _: UInt, _: CConstVoidPointer, _: UInt) -> COpaquePointer
func memmove(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt) -> COpaquePointer
func memmove(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt) -> COpaquePointer
typealias memory_object_array_t = UnsafePointer<memory_object_t>
struct memory_object_attr_info {
  var copy_strategy: memory_object_copy_strategy_t
  var cluster_size: memory_object_cluster_size_t
  var may_cache_object: boolean_t
  var temporary: boolean_t
  init(copy_strategy: memory_object_copy_strategy_t, cluster_size: memory_object_cluster_size_t, may_cache_object: boolean_t, temporary: boolean_t)
}
typealias memory_object_attr_info_data_t = memory_object_attr_info
typealias memory_object_attr_info_t = UnsafePointer<memory_object_attr_info>
struct memory_object_behave_info {
  var copy_strategy: memory_object_copy_strategy_t
  var temporary: boolean_t
  var invalidate: boolean_t
  var silent_overwrite: boolean_t
  var advisory_pageout: boolean_t
  init(copy_strategy: memory_object_copy_strategy_t, temporary: boolean_t, invalidate: boolean_t, silent_overwrite: boolean_t, advisory_pageout: boolean_t)
}
typealias memory_object_behave_info_data_t = memory_object_behave_info
typealias memory_object_behave_info_t = UnsafePointer<memory_object_behave_info>
typealias memory_object_cluster_size_t = natural_t
typealias memory_object_control_t = mach_port_t
typealias memory_object_copy_strategy_t = CInt
typealias memory_object_default_t = mach_port_t
typealias memory_object_fault_info_t = UnsafePointer<natural_t>
typealias memory_object_flavor_t = CInt
typealias memory_object_info_data_t = (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
typealias memory_object_info_t = UnsafePointer<CInt>
typealias memory_object_name_t = mach_port_t
typealias memory_object_offset_t = CUnsignedLongLong
struct memory_object_perf_info {
  var cluster_size: memory_object_cluster_size_t
  var may_cache: boolean_t
  init(cluster_size: memory_object_cluster_size_t, may_cache: boolean_t)
}
typealias memory_object_perf_info_data_t = memory_object_perf_info
typealias memory_object_perf_info_t = UnsafePointer<memory_object_perf_info>
typealias memory_object_return_t = CInt
typealias memory_object_size_t = CUnsignedLongLong
typealias memory_object_t = mach_port_t
typealias memory_reader_t = (task_t, vm_address_t, vm_size_t, CMutablePointer<COpaquePointer>) -> kern_return_t
func memset(_: CMutableVoidPointer, _: CInt, _: UInt) -> COpaquePointer
func memset(_: CMutableVoidPointer, _: CInt, _: UInt) -> COpaquePointer
func memset_pattern16(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt)
func memset_pattern16(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt)
func memset_pattern4(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt)
func memset_pattern4(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt)
func memset_pattern8(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt)
func memset_pattern8(_: CMutableVoidPointer, _: CConstVoidPointer, _: UInt)
func memset_s(_: CMutableVoidPointer, _: rsize_t, _: CInt, _: rsize_t) -> errno_t
func memset_s(_: CMutableVoidPointer, _: rsize_t, _: CInt, _: rsize_t) -> errno_t
func mergesort_b(_: CMutableVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!) -> CInt
func mergesort_b(_: CMutableVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!) -> CInt
func mig_allocate(_: CMutablePointer<vm_address_t>, _: vm_size_t)
func mig_allocate(_: CMutablePointer<vm_address_t>, _: vm_size_t)
func mig_dealloc_reply_port(reply_port: mach_port_t)
func mig_dealloc_reply_port(reply_port: mach_port_t)
func mig_deallocate(_: vm_address_t, _: vm_size_t)
func mig_deallocate(_: vm_address_t, _: vm_size_t)
func mig_get_reply_port() -> mach_port_t
func mig_get_reply_port() -> mach_port_t
func mig_put_reply_port(reply_port: mach_port_t)
func mig_put_reply_port(reply_port: mach_port_t)
struct mig_reply_error_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  init(Head: mach_msg_header_t, NDR: NDR_record_t, RetCode: kern_return_t)
}
func mig_reply_setup(_: CMutablePointer<mach_msg_header_t>, _: CMutablePointer<mach_msg_header_t>)
func mig_reply_setup(_: CMutablePointer<mach_msg_header_t>, _: CMutablePointer<mach_msg_header_t>)
typealias mig_routine_arg_descriptor_t = COpaquePointer
typealias mig_routine_descriptor = routine_descriptor
typealias mig_routine_descriptor_t = UnsafePointer<mig_routine_descriptor>
func mig_strncpy(dest: CMutablePointer<CChar>, src: CString, len: CInt) -> CInt
func mig_strncpy(dest: CMutablePointer<CChar>, src: CString, len: CInt) -> CInt
struct mig_subsystem {
  var start: mach_msg_id_t
  var end: mach_msg_id_t
  var maxsize: mach_msg_size_t
  var reserved: vm_address_t
  var routine: (mig_routine_descriptor)
  init(start: mach_msg_id_t, end: mach_msg_id_t, maxsize: mach_msg_size_t, reserved: vm_address_t, routine: (mig_routine_descriptor))
}
typealias mig_subsystem_t = UnsafePointer<mig_subsystem>
struct mig_symtab {
  var ms_routine_name: UnsafePointer<CChar>
  var ms_routine_number: CInt
  init(ms_routine_name: UnsafePointer<CChar>, ms_routine_number: CInt)
}
typealias mig_symtab_t = mig_symtab
func mincore(_: CConstVoidPointer, _: UInt, _: CMutablePointer<CChar>) -> CInt
func mincore(_: CConstVoidPointer, _: UInt, _: CMutablePointer<CChar>) -> CInt
func minherit(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func minherit(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func minphys(bp: buf_t) -> u_int
func minphys(bp: buf_t) -> u_int
func mkdir(_: CString, _: mode_t) -> CInt
func mkdir(_: CString, _: mode_t) -> CInt
func mkdirat(_: CInt, _: CString, _: mode_t) -> CInt
func mkdirat(_: CInt, _: CString, _: mode_t) -> CInt
func mkdirx_np(_: CString, _: filesec_t) -> CInt
func mkdirx_np(_: CString, _: filesec_t) -> CInt
func mkdtemp(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func mkdtemp(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func mkfifo(_: CString, _: mode_t) -> CInt
func mkfifo(_: CString, _: mode_t) -> CInt
func mkfifox_np(_: CString, _: filesec_t) -> CInt
func mkfifox_np(_: CString, _: filesec_t) -> CInt
func mknod(_: CString, _: mode_t, _: dev_t) -> CInt
func mknod(_: CString, _: mode_t, _: dev_t) -> CInt
func mkpath_np(path: CString, omode: mode_t) -> CInt
func mkpath_np(path: CString, omode: mode_t) -> CInt
func mkstemp(_: CMutablePointer<CChar>) -> CInt
func mkstemp(_: CMutablePointer<CChar>) -> CInt
func mkstemps(_: CMutablePointer<CChar>, _: CInt) -> CInt
func mkstemps(_: CMutablePointer<CChar>, _: CInt) -> CInt
func mktemp(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func mktemp(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func mktime(_: CMutablePointer<tm>) -> time_t
func mktime(_: CMutablePointer<tm>) -> time_t
func mlock(_: CConstVoidPointer, _: UInt) -> CInt
func mlock(_: CConstVoidPointer, _: UInt) -> CInt
func mlockall(_: CInt) -> CInt
func mlockall(_: CInt) -> CInt
func mmap(_: CMutableVoidPointer, _: UInt, _: CInt, _: CInt, _: CInt, _: off_t) -> COpaquePointer
func mmap(_: CMutableVoidPointer, _: UInt, _: CInt, _: CInt, _: CInt, _: off_t) -> COpaquePointer
typealias mode_t = __darwin_mode_t
func modf(_: CDouble, _: CMutablePointer<CDouble>) -> CDouble
func modf(_: CDouble, _: CMutablePointer<CDouble>) -> CDouble
func modff(_: CFloat, _: CMutablePointer<CFloat>) -> CFloat
func modff(_: CFloat, _: CMutablePointer<CFloat>) -> CFloat
func modwatch(_: CMutablePointer<eventreq>, _: CInt) -> CInt
func modwatch(_: CMutablePointer<eventreq>, _: CInt) -> CInt
func mount(_: CString, _: CString, _: CInt, _: CMutableVoidPointer) -> CInt
func mount(_: CString, _: CString, _: CInt, _: CMutableVoidPointer) -> CInt
typealias mount_t = COpaquePointer
func mprotect(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func mprotect(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func mrand48() -> CLong
func mrand48() -> CLong
struct msg {
  var msg_next: UnsafePointer<msg>
  var msg_type: CLong
  var msg_ts: CUnsignedShort
  var msg_spot: CShort
  var label: COpaquePointer
  init(msg_next: UnsafePointer<msg>, msg_type: CLong, msg_ts: CUnsignedShort, msg_spot: CShort, label: COpaquePointer)
}
struct msg_labels_t {
  var sender: mach_port_name_t
  init(sender: mach_port_name_t)
}
struct msgbuf {
  var msg_magic: CInt
  var msg_size: CInt
  var msg_bufx: CInt
  var msg_bufr: CInt
  var msg_bufc: UnsafePointer<CChar>
  init(msg_magic: CInt, msg_size: CInt, msg_bufx: CInt, msg_bufr: CInt, msg_bufc: UnsafePointer<CChar>)
}
func msgctl(_: CInt, _: CInt, _: CMutablePointer<__msqid_ds_new>) -> CInt
func msgctl(_: CInt, _: CInt, _: CMutablePointer<__msqid_ds_new>) -> CInt
func msgget(_: key_t, _: CInt) -> CInt
func msgget(_: key_t, _: CInt) -> CInt
struct msghdr {
  var msg_name: COpaquePointer
  var msg_namelen: socklen_t
  var msg_iov: UnsafePointer<iovec>
  var msg_iovlen: CInt
  var msg_control: COpaquePointer
  var msg_controllen: socklen_t
  var msg_flags: CInt
  init(msg_name: COpaquePointer, msg_namelen: socklen_t, msg_iov: UnsafePointer<iovec>, msg_iovlen: CInt, msg_control: COpaquePointer, msg_controllen: socklen_t, msg_flags: CInt)
}
struct msginfo {
  var msgmax: CInt
  var msgmni: CInt
  var msgmnb: CInt
  var msgtql: CInt
  var msgssz: CInt
  var msgseg: CInt
  init(msgmax: CInt, msgmni: CInt, msgmnb: CInt, msgtql: CInt, msgssz: CInt, msgseg: CInt)
}
typealias msglen_t = CUnsignedLong
typealias msgqnum_t = CUnsignedLong
func msgrcv(_: CInt, _: CMutableVoidPointer, _: UInt, _: CLong, _: CInt) -> Int
func msgrcv(_: CInt, _: CMutableVoidPointer, _: UInt, _: CLong, _: CInt) -> Int
func msgsnd(_: CInt, _: CConstVoidPointer, _: UInt, _: CInt) -> CInt
func msgsnd(_: CInt, _: CConstVoidPointer, _: UInt, _: CInt) -> CInt
func mstats() -> mstats
func mstats() -> mstats
struct mstats {
  var bytes_total: UInt
  var chunks_used: UInt
  var bytes_used: UInt
  var chunks_free: UInt
  var bytes_free: UInt
  init(bytes_total: UInt, chunks_used: UInt, bytes_used: UInt, chunks_free: UInt, bytes_free: UInt)
}
func msync(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func msync(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func munlock(_: CConstVoidPointer, _: UInt) -> CInt
func munlock(_: CConstVoidPointer, _: UInt) -> CInt
func munlockall() -> CInt
func munlockall() -> CInt
func munmap(_: CMutableVoidPointer, _: UInt) -> CInt
func munmap(_: CMutableVoidPointer, _: UInt) -> CInt
struct mymsg {
  var mtype: CLong
  var mtext: (CChar)
  init(mtype: CLong, mtext: (CChar))
}
func nan(_: CString) -> CDouble
func nan(_: CString) -> CDouble
func nanf(_: CString) -> CFloat
func nanf(_: CString) -> CFloat
func nanosleep(_: CConstPointer<timespec>, _: CMutablePointer<timespec>) -> CInt
func nanosleep(_: CConstPointer<timespec>, _: CMutablePointer<timespec>) -> CInt
typealias natural_t = __darwin_natural_t
struct ndrv_info {
  var ndrvsi_if_family: UInt32
  var ndrvsi_if_unit: UInt32
  var ndrvsi_if_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(ndrvsi_if_family: UInt32, ndrvsi_if_unit: UInt32, ndrvsi_if_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
func nearbyint(_: CDouble) -> CDouble
func nearbyint(_: CDouble) -> CDouble
func nearbyintf(_: CFloat) -> CFloat
func nearbyintf(_: CFloat) -> CFloat
struct net_event_data {
  var if_family: UInt32
  var if_unit: UInt32
  var if_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(if_family: UInt32, if_unit: UInt32, if_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
typealias netaddr_t = UInt32
struct netent {
  var n_name: UnsafePointer<CChar>
  var n_aliases: UnsafePointer<UnsafePointer<CChar>>
  var n_addrtype: CInt
  var n_net: UInt32
  init(n_name: UnsafePointer<CChar>, n_aliases: UnsafePointer<UnsafePointer<CChar>>, n_addrtype: CInt, n_net: UInt32)
}
struct netfs_status {
  var ns_status: UInt32
  var ns_mountopts: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ns_waittime: UInt32
  var ns_threadcount: UInt32
  var ns_threadids: ()
  init(ns_status: UInt32, ns_mountopts: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ns_waittime: UInt32, ns_threadcount: UInt32, ns_threadids: ())
}
struct network_port_t {
  var np_receiver: netaddr_t
  var np_owner: netaddr_t
  var np_puid: np_uid_t
  var np_sid: np_uid_t
  init(np_receiver: netaddr_t, np_owner: netaddr_t, np_puid: np_uid_t, np_sid: np_uid_t)
}
func nextafter(_: CDouble, _: CDouble) -> CDouble
func nextafter(_: CDouble, _: CDouble) -> CDouble
func nextafterf(_: CFloat, _: CFloat) -> CFloat
func nextafterf(_: CFloat, _: CFloat) -> CFloat
func nextwctype(_: wint_t, _: wctype_t) -> wint_t
func nextwctype(_: wint_t, _: wctype_t) -> wint_t
typealias nfds_t = CUnsignedInt
func nfssvc(_: CInt, _: CMutableVoidPointer) -> CInt
func nfssvc(_: CInt, _: CMutableVoidPointer) -> CInt
func nice(_: CInt) -> CInt
func nice(_: CInt) -> CInt
typealias nl_catd = UnsafePointer<__nl_cat_d>
typealias nl_item = __darwin_nl_item
func nl_langinfo(_: nl_item) -> UnsafePointer<CChar>
func nl_langinfo(_: nl_item) -> UnsafePointer<CChar>
typealias nlink_t = __uint16_t
var noErr: Int {
  get {
    return
  }
}
var normal: Int {
  get {
    return
  }
}
typealias notify_port_t = mach_port_t
struct np_uid_t {
  var np_uid_high: CLong
  var np_uid_low: CLong
  init(np_uid_high: CLong, np_uid_low: CLong)
}
func nrand48(_: CMutablePointer<CUnsignedShort>) -> CLong
func nrand48(_: CMutablePointer<CUnsignedShort>) -> CLong
struct ntsid_t {
  var sid_kind: UInt8
  var sid_authcount: UInt8
  var sid_authority: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var sid_authorities: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(sid_kind: UInt8, sid_authcount: UInt8, sid_authority: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), sid_authorities: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
typealias off_t = __darwin_off_t
struct ombstat {
  var m_mbufs: UInt32
  var m_clusters: UInt32
  var m_spare: UInt32
  var m_clfree: UInt32
  var m_drops: UInt32
  var m_wait: UInt32
  var m_drain: UInt32
  var m_mtypes: (u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short)
  var m_mcfail: UInt32
  var m_mpfail: UInt32
  var m_msize: UInt32
  var m_mclbytes: UInt32
  var m_minclsize: UInt32
  var m_mlen: UInt32
  var m_mhlen: UInt32
  init(m_mbufs: UInt32, m_clusters: UInt32, m_spare: UInt32, m_clfree: UInt32, m_drops: UInt32, m_wait: UInt32, m_drain: UInt32, m_mtypes: (u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short), m_mcfail: UInt32, m_mpfail: UInt32, m_msize: UInt32, m_mclbytes: UInt32, m_minclsize: UInt32, m_mlen: UInt32, m_mhlen: UInt32)
}
func opendir(_: CString) -> UnsafePointer<DIR>
func opendir(_: CString) -> UnsafePointer<DIR>
func openlog(_: CString, _: CInt, _: CInt)
func openlog(_: CString, _: CInt, _: CInt)
func openx_np(_: CString, _: CInt, _: filesec_t) -> CInt
func openx_np(_: CString, _: CInt, _: filesec_t) -> CInt
var optarg: UnsafePointer<CChar>
var opterr: CInt
var optind: CInt
struct option {
  var name: CString
  var has_arg: CInt
  var flag: UnsafePointer<CInt>
  var val: CInt
  init(name: CString, has_arg: CInt, flag: UnsafePointer<CInt>, val: CInt)
}
var optopt: CInt
var optreset: CInt
struct ostat {
  var st_dev: __uint16_t
  var st_ino: ino_t
  var st_mode: mode_t
  var st_nlink: nlink_t
  var st_uid: __uint16_t
  var st_gid: __uint16_t
  var st_rdev: __uint16_t
  var st_size: __int32_t
  var st_atimespec: timespec
  var st_mtimespec: timespec
  var st_ctimespec: timespec
  var st_blksize: __int32_t
  var st_blocks: __int32_t
  var st_flags: __uint32_t
  var st_gen: __uint32_t
  init(st_dev: __uint16_t, st_ino: ino_t, st_mode: mode_t, st_nlink: nlink_t, st_uid: __uint16_t, st_gid: __uint16_t, st_rdev: __uint16_t, st_size: __int32_t, st_atimespec: timespec, st_mtimespec: timespec, st_ctimespec: timespec, st_blksize: __int32_t, st_blocks: __int32_t, st_flags: __uint32_t, st_gen: __uint32_t)
}
var outline: Int {
  get {
    return
  }
}
typealias page_address_array_t = UnsafePointer<vm_offset_t>
func panic_init(_: mach_port_t)
func panic_init(_: mach_port_t)
struct passwd {
  var pw_name: UnsafePointer<CChar>
  var pw_passwd: UnsafePointer<CChar>
  var pw_uid: uid_t
  var pw_gid: gid_t
  var pw_change: __darwin_time_t
  var pw_class: UnsafePointer<CChar>
  var pw_gecos: UnsafePointer<CChar>
  var pw_dir: UnsafePointer<CChar>
  var pw_shell: UnsafePointer<CChar>
  var pw_expire: __darwin_time_t
  init(pw_name: UnsafePointer<CChar>, pw_passwd: UnsafePointer<CChar>, pw_uid: uid_t, pw_gid: gid_t, pw_change: __darwin_time_t, pw_class: UnsafePointer<CChar>, pw_gecos: UnsafePointer<CChar>, pw_dir: UnsafePointer<CChar>, pw_shell: UnsafePointer<CChar>, pw_expire: __darwin_time_t)
}
func pathconf(_: CString, _: CInt) -> CLong
func pathconf(_: CString, _: CInt) -> CLong
func pause() -> CInt
func pause() -> CInt
func pclose(_: CMutablePointer<FILE>) -> CInt
func pclose(_: CMutablePointer<FILE>) -> CInt
func perror(_: CString)
func perror(_: CString)
func pfctlinput(_: CInt, _: CMutablePointer<sockaddr>)
func pfctlinput(_: CInt, _: CMutablePointer<sockaddr>)
func pid_for_task(t: mach_port_name_t, x: CMutablePointer<CInt>) -> kern_return_t
func pid_for_task(t: mach_port_name_t, x: CMutablePointer<CInt>) -> kern_return_t
typealias pid_t = __darwin_pid_t
func pipe(_: CMutablePointer<CInt>) -> CInt
func pipe(_: CMutablePointer<CInt>) -> CInt
struct pipe_fdinfo {
  var pfi: proc_fileinfo
  var pipeinfo: pipe_info
  init(pfi: proc_fileinfo, pipeinfo: pipe_info)
}
struct pipe_info {
  var pipe_stat: vinfo_stat
  var pipe_handle: UInt64
  var pipe_peerhandle: UInt64
  var pipe_status: CInt
  var rfu_1: CInt
  init(pipe_stat: vinfo_stat, pipe_handle: UInt64, pipe_peerhandle: UInt64, pipe_status: CInt, rfu_1: CInt)
}
struct pipebuf {
  var cnt: u_int
  var `in`: u_int
  var out: u_int
  var size: u_int
  var buffer: caddr_t
  init(cnt: u_int, `in`: u_int, out: u_int, size: u_int, buffer: caddr_t)
}
typealias pkthdr_t = COpaquePointer
struct plimit {
  var pl_rlimit: (rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit)
  var pl_refcnt: CInt
  init(pl_rlimit: (rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit), pl_refcnt: CInt)
}
typealias pointer_t = vm_offset_t
typealias policy_base_data_t = policy_bases
typealias policy_base_t = UnsafePointer<integer_t>
struct policy_bases {
  var ts: policy_timeshare_base_data_t
  var rr: policy_rr_base_data_t
  var fifo: policy_fifo_base_data_t
  init(ts: policy_timeshare_base_data_t, rr: policy_rr_base_data_t, fifo: policy_fifo_base_data_t)
}
struct policy_fifo_base {
  var base_priority: integer_t
  init(base_priority: integer_t)
}
typealias policy_fifo_base_data_t = policy_fifo_base
typealias policy_fifo_base_t = UnsafePointer<policy_fifo_base>
struct policy_fifo_info {
  var max_priority: integer_t
  var base_priority: integer_t
  var depressed: boolean_t
  var depress_priority: integer_t
  init(max_priority: integer_t, base_priority: integer_t, depressed: boolean_t, depress_priority: integer_t)
}
typealias policy_fifo_info_data_t = policy_fifo_info
typealias policy_fifo_info_t = UnsafePointer<policy_fifo_info>
struct policy_fifo_limit {
  var max_priority: integer_t
  init(max_priority: integer_t)
}
typealias policy_fifo_limit_data_t = policy_fifo_limit
typealias policy_fifo_limit_t = UnsafePointer<policy_fifo_limit>
typealias policy_info_data_t = policy_infos
typealias policy_info_t = UnsafePointer<integer_t>
struct policy_infos {
  var ts: policy_timeshare_info_data_t
  var rr: policy_rr_info_data_t
  var fifo: policy_fifo_info_data_t
  init(ts: policy_timeshare_info_data_t, rr: policy_rr_info_data_t, fifo: policy_fifo_info_data_t)
}
typealias policy_limit_data_t = policy_limits
typealias policy_limit_t = UnsafePointer<integer_t>
struct policy_limits {
  var ts: policy_timeshare_limit_data_t
  var rr: policy_rr_limit_data_t
  var fifo: policy_fifo_limit_data_t
  init(ts: policy_timeshare_limit_data_t, rr: policy_rr_limit_data_t, fifo: policy_fifo_limit_data_t)
}
struct policy_rr_base {
  var base_priority: integer_t
  var quantum: integer_t
  init(base_priority: integer_t, quantum: integer_t)
}
typealias policy_rr_base_data_t = policy_rr_base
typealias policy_rr_base_t = UnsafePointer<policy_rr_base>
struct policy_rr_info {
  var max_priority: integer_t
  var base_priority: integer_t
  var quantum: integer_t
  var depressed: boolean_t
  var depress_priority: integer_t
  init(max_priority: integer_t, base_priority: integer_t, quantum: integer_t, depressed: boolean_t, depress_priority: integer_t)
}
typealias policy_rr_info_data_t = policy_rr_info
typealias policy_rr_info_t = UnsafePointer<policy_rr_info>
struct policy_rr_limit {
  var max_priority: integer_t
  init(max_priority: integer_t)
}
typealias policy_rr_limit_data_t = policy_rr_limit
typealias policy_rr_limit_t = UnsafePointer<policy_rr_limit>
typealias policy_t = CInt
struct policy_timeshare_base {
  var base_priority: integer_t
  init(base_priority: integer_t)
}
typealias policy_timeshare_base_data_t = policy_timeshare_base
typealias policy_timeshare_base_t = UnsafePointer<policy_timeshare_base>
struct policy_timeshare_info {
  var max_priority: integer_t
  var base_priority: integer_t
  var cur_priority: integer_t
  var depressed: boolean_t
  var depress_priority: integer_t
  init(max_priority: integer_t, base_priority: integer_t, cur_priority: integer_t, depressed: boolean_t, depress_priority: integer_t)
}
typealias policy_timeshare_info_data_t = policy_timeshare_info
typealias policy_timeshare_info_t = UnsafePointer<policy_timeshare_info>
struct policy_timeshare_limit {
  var max_priority: integer_t
  init(max_priority: integer_t)
}
typealias policy_timeshare_limit_data_t = policy_timeshare_limit
typealias policy_timeshare_limit_t = UnsafePointer<policy_timeshare_limit>
func poll(_: CMutablePointer<pollfd>, _: nfds_t, _: CInt) -> CInt
func poll(_: CMutablePointer<pollfd>, _: nfds_t, _: CInt) -> CInt
struct pollfd {
  var fd: CInt
  var events: CShort
  var revents: CShort
  init(fd: CInt, events: CShort, revents: CShort)
}
func popen(_: CString, _: CString) -> UnsafePointer<FILE>
func popen(_: CString, _: CString) -> UnsafePointer<FILE>
func port_obj_init(_: CInt)
func port_obj_init(_: CInt)
var port_obj_table: UnsafePointer<port_obj_tentry>
var port_obj_table_size: CInt
struct port_obj_tentry {
  var pos_value: COpaquePointer
  var pos_type: CInt
  init(pos_value: COpaquePointer, pos_type: CInt)
}
func posix2time(_: time_t) -> time_t
func posix2time(_: time_t) -> time_t
typealias posix_cred_t = UnsafePointer<posix_cred>
func posix_madvise(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func posix_madvise(_: CMutableVoidPointer, _: UInt, _: CInt) -> CInt
func posix_memalign(__memptr: CMutablePointer<COpaquePointer>, __alignment: UInt, __size: UInt) -> CInt
func posix_memalign(__memptr: CMutablePointer<COpaquePointer>, __alignment: UInt, __size: UInt) -> CInt
func posix_openpt(_: CInt) -> CInt
func posix_openpt(_: CInt) -> CInt
func posix_spawn(_: CMutablePointer<pid_t>, _: CString, _: CConstPointer<posix_spawn_file_actions_t>, _: CConstPointer<posix_spawnattr_t>, __argv: CConstPointer<UnsafePointer<CChar>>, __envp: CConstPointer<UnsafePointer<CChar>>) -> CInt
func posix_spawn(_: CMutablePointer<pid_t>, _: CString, _: CConstPointer<posix_spawn_file_actions_t>, _: CConstPointer<posix_spawnattr_t>, __argv: CConstPointer<UnsafePointer<CChar>>, __envp: CConstPointer<UnsafePointer<CChar>>) -> CInt
func posix_spawn_file_actions_addclose(_: CMutablePointer<posix_spawn_file_actions_t>, _: CInt) -> CInt
func posix_spawn_file_actions_addclose(_: CMutablePointer<posix_spawn_file_actions_t>, _: CInt) -> CInt
func posix_spawn_file_actions_adddup2(_: CMutablePointer<posix_spawn_file_actions_t>, _: CInt, _: CInt) -> CInt
func posix_spawn_file_actions_adddup2(_: CMutablePointer<posix_spawn_file_actions_t>, _: CInt, _: CInt) -> CInt
func posix_spawn_file_actions_addinherit_np(_: CMutablePointer<posix_spawn_file_actions_t>, _: CInt) -> CInt
func posix_spawn_file_actions_addinherit_np(_: CMutablePointer<posix_spawn_file_actions_t>, _: CInt) -> CInt
func posix_spawn_file_actions_addopen(_: CMutablePointer<posix_spawn_file_actions_t>, _: CInt, _: CString, _: CInt, _: mode_t) -> CInt
func posix_spawn_file_actions_addopen(_: CMutablePointer<posix_spawn_file_actions_t>, _: CInt, _: CString, _: CInt, _: mode_t) -> CInt
func posix_spawn_file_actions_destroy(_: CMutablePointer<posix_spawn_file_actions_t>) -> CInt
func posix_spawn_file_actions_destroy(_: CMutablePointer<posix_spawn_file_actions_t>) -> CInt
func posix_spawn_file_actions_init(_: CMutablePointer<posix_spawn_file_actions_t>) -> CInt
func posix_spawn_file_actions_init(_: CMutablePointer<posix_spawn_file_actions_t>) -> CInt
typealias posix_spawn_file_actions_t = COpaquePointer
func posix_spawnattr_destroy(_: CMutablePointer<posix_spawnattr_t>) -> CInt
func posix_spawnattr_destroy(_: CMutablePointer<posix_spawnattr_t>) -> CInt
func posix_spawnattr_getbinpref_np(_: CConstPointer<posix_spawnattr_t>, _: UInt, _: CMutablePointer<cpu_type_t>, _: CMutablePointer<UInt>) -> CInt
func posix_spawnattr_getbinpref_np(_: CConstPointer<posix_spawnattr_t>, _: UInt, _: CMutablePointer<cpu_type_t>, _: CMutablePointer<UInt>) -> CInt
func posix_spawnattr_getflags(_: CConstPointer<posix_spawnattr_t>, _: CMutablePointer<CShort>) -> CInt
func posix_spawnattr_getflags(_: CConstPointer<posix_spawnattr_t>, _: CMutablePointer<CShort>) -> CInt
func posix_spawnattr_getpgroup(_: CConstPointer<posix_spawnattr_t>, _: CMutablePointer<pid_t>) -> CInt
func posix_spawnattr_getpgroup(_: CConstPointer<posix_spawnattr_t>, _: CMutablePointer<pid_t>) -> CInt
func posix_spawnattr_getsigdefault(_: CConstPointer<posix_spawnattr_t>, _: CMutablePointer<sigset_t>) -> CInt
func posix_spawnattr_getsigdefault(_: CConstPointer<posix_spawnattr_t>, _: CMutablePointer<sigset_t>) -> CInt
func posix_spawnattr_getsigmask(_: CConstPointer<posix_spawnattr_t>, _: CMutablePointer<sigset_t>) -> CInt
func posix_spawnattr_getsigmask(_: CConstPointer<posix_spawnattr_t>, _: CMutablePointer<sigset_t>) -> CInt
func posix_spawnattr_init(_: CMutablePointer<posix_spawnattr_t>) -> CInt
func posix_spawnattr_init(_: CMutablePointer<posix_spawnattr_t>) -> CInt
func posix_spawnattr_setauditsessionport_np(_: CMutablePointer<posix_spawnattr_t>, _: mach_port_t) -> CInt
func posix_spawnattr_setauditsessionport_np(_: CMutablePointer<posix_spawnattr_t>, _: mach_port_t) -> CInt
func posix_spawnattr_setbinpref_np(_: CMutablePointer<posix_spawnattr_t>, _: UInt, _: CMutablePointer<cpu_type_t>, _: CMutablePointer<UInt>) -> CInt
func posix_spawnattr_setbinpref_np(_: CMutablePointer<posix_spawnattr_t>, _: UInt, _: CMutablePointer<cpu_type_t>, _: CMutablePointer<UInt>) -> CInt
func posix_spawnattr_setexceptionports_np(_: CMutablePointer<posix_spawnattr_t>, _: exception_mask_t, _: mach_port_t, _: exception_behavior_t, _: thread_state_flavor_t) -> CInt
func posix_spawnattr_setexceptionports_np(_: CMutablePointer<posix_spawnattr_t>, _: exception_mask_t, _: mach_port_t, _: exception_behavior_t, _: thread_state_flavor_t) -> CInt
func posix_spawnattr_setflags(_: CMutablePointer<posix_spawnattr_t>, _: CShort) -> CInt
func posix_spawnattr_setflags(_: CMutablePointer<posix_spawnattr_t>, _: CShort) -> CInt
func posix_spawnattr_setpgroup(_: CMutablePointer<posix_spawnattr_t>, _: pid_t) -> CInt
func posix_spawnattr_setpgroup(_: CMutablePointer<posix_spawnattr_t>, _: pid_t) -> CInt
func posix_spawnattr_setsigdefault(_: CMutablePointer<posix_spawnattr_t>, _: CConstPointer<sigset_t>) -> CInt
func posix_spawnattr_setsigdefault(_: CMutablePointer<posix_spawnattr_t>, _: CConstPointer<sigset_t>) -> CInt
func posix_spawnattr_setsigmask(_: CMutablePointer<posix_spawnattr_t>, _: CConstPointer<sigset_t>) -> CInt
func posix_spawnattr_setsigmask(_: CMutablePointer<posix_spawnattr_t>, _: CConstPointer<sigset_t>) -> CInt
func posix_spawnattr_setspecialport_np(_: CMutablePointer<posix_spawnattr_t>, _: mach_port_t, _: CInt) -> CInt
func posix_spawnattr_setspecialport_np(_: CMutablePointer<posix_spawnattr_t>, _: mach_port_t, _: CInt) -> CInt
typealias posix_spawnattr_t = COpaquePointer
func posix_spawnp(_: CMutablePointer<pid_t>, _: CString, _: CConstPointer<posix_spawn_file_actions_t>, _: CConstPointer<posix_spawnattr_t>, __argv: CConstPointer<UnsafePointer<CChar>>, __envp: CConstPointer<UnsafePointer<CChar>>) -> CInt
func posix_spawnp(_: CMutablePointer<pid_t>, _: CString, _: CConstPointer<posix_spawn_file_actions_t>, _: CConstPointer<posix_spawnattr_t>, __argv: CConstPointer<UnsafePointer<CChar>>, __envp: CConstPointer<UnsafePointer<CChar>>) -> CInt
var postorder: VISIT {
  get {
    return
  }
}
func pow(_: CDouble, _: CDouble) -> CDouble
func pow(_: CDouble, _: CDouble) -> CDouble
func powf(_: CFloat, _: CFloat) -> CFloat
func powf(_: CFloat, _: CFloat) -> CFloat
typealias ppnum_t = UInt32
func pread(_: CInt, _: CMutableVoidPointer, _: UInt, _: off_t) -> Int
func pread(_: CInt, _: CMutableVoidPointer, _: UInt, _: off_t) -> Int
var preorder: VISIT {
  get {
    return
  }
}
struct proc_bsdinfo {
  var pbi_flags: UInt32
  var pbi_status: UInt32
  var pbi_xstatus: UInt32
  var pbi_pid: UInt32
  var pbi_ppid: UInt32
  var pbi_uid: uid_t
  var pbi_gid: gid_t
  var pbi_ruid: uid_t
  var pbi_rgid: gid_t
  var pbi_svuid: uid_t
  var pbi_svgid: gid_t
  var rfu_1: UInt32
  var pbi_comm: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var pbi_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var pbi_nfiles: UInt32
  var pbi_pgid: UInt32
  var pbi_pjobc: UInt32
  var e_tdev: UInt32
  var e_tpgid: UInt32
  var pbi_nice: Int32
  var pbi_start_tvsec: UInt64
  var pbi_start_tvusec: UInt64
  init(pbi_flags: UInt32, pbi_status: UInt32, pbi_xstatus: UInt32, pbi_pid: UInt32, pbi_ppid: UInt32, pbi_uid: uid_t, pbi_gid: gid_t, pbi_ruid: uid_t, pbi_rgid: gid_t, pbi_svuid: uid_t, pbi_svgid: gid_t, rfu_1: UInt32, pbi_comm: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), pbi_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), pbi_nfiles: UInt32, pbi_pgid: UInt32, pbi_pjobc: UInt32, e_tdev: UInt32, e_tpgid: UInt32, pbi_nice: Int32, pbi_start_tvsec: UInt64, pbi_start_tvusec: UInt64)
}
struct proc_bsdshortinfo {
  var pbsi_pid: UInt32
  var pbsi_ppid: UInt32
  var pbsi_pgid: UInt32
  var pbsi_status: UInt32
  var pbsi_comm: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var pbsi_flags: UInt32
  var pbsi_uid: uid_t
  var pbsi_gid: gid_t
  var pbsi_ruid: uid_t
  var pbsi_rgid: gid_t
  var pbsi_svuid: uid_t
  var pbsi_svgid: gid_t
  var pbsi_rfu: UInt32
  init(pbsi_pid: UInt32, pbsi_ppid: UInt32, pbsi_pgid: UInt32, pbsi_status: UInt32, pbsi_comm: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), pbsi_flags: UInt32, pbsi_uid: uid_t, pbsi_gid: gid_t, pbsi_ruid: uid_t, pbsi_rgid: gid_t, pbsi_svuid: uid_t, pbsi_svgid: gid_t, pbsi_rfu: UInt32)
}
struct proc_fdinfo {
  var proc_fd: Int32
  var proc_fdtype: UInt32
  init(proc_fd: Int32, proc_fdtype: UInt32)
}
struct proc_fileinfo {
  var fi_openflags: UInt32
  var fi_status: UInt32
  var fi_offset: off_t
  var fi_type: Int32
  var fi_guardflags: UInt32
  init(fi_openflags: UInt32, fi_status: UInt32, fi_offset: off_t, fi_type: Int32, fi_guardflags: UInt32)
}
struct proc_fileportinfo {
  var proc_fileport: UInt32
  var proc_fdtype: UInt32
  init(proc_fileport: UInt32, proc_fdtype: UInt32)
}
struct proc_regioninfo {
  var pri_protection: UInt32
  var pri_max_protection: UInt32
  var pri_inheritance: UInt32
  var pri_flags: UInt32
  var pri_offset: UInt64
  var pri_behavior: UInt32
  var pri_user_wired_count: UInt32
  var pri_user_tag: UInt32
  var pri_pages_resident: UInt32
  var pri_pages_shared_now_private: UInt32
  var pri_pages_swapped_out: UInt32
  var pri_pages_dirtied: UInt32
  var pri_ref_count: UInt32
  var pri_shadow_depth: UInt32
  var pri_share_mode: UInt32
  var pri_private_pages_resident: UInt32
  var pri_shared_pages_resident: UInt32
  var pri_obj_id: UInt32
  var pri_depth: UInt32
  var pri_address: UInt64
  var pri_size: UInt64
  init(pri_protection: UInt32, pri_max_protection: UInt32, pri_inheritance: UInt32, pri_flags: UInt32, pri_offset: UInt64, pri_behavior: UInt32, pri_user_wired_count: UInt32, pri_user_tag: UInt32, pri_pages_resident: UInt32, pri_pages_shared_now_private: UInt32, pri_pages_swapped_out: UInt32, pri_pages_dirtied: UInt32, pri_ref_count: UInt32, pri_shadow_depth: UInt32, pri_share_mode: UInt32, pri_private_pages_resident: UInt32, pri_shared_pages_resident: UInt32, pri_obj_id: UInt32, pri_depth: UInt32, pri_address: UInt64, pri_size: UInt64)
}
struct proc_regionwithpathinfo {
  var prp_prinfo: proc_regioninfo
  var prp_vip: vnode_info_path
  init(prp_prinfo: proc_regioninfo, prp_vip: vnode_info_path)
}
struct proc_rlimit_control_wakeupmon {
  var wm_flags: UInt32
  var wm_rate: Int32
  init(wm_flags: UInt32, wm_rate: Int32)
}
typealias proc_t = COpaquePointer
struct proc_taskallinfo {
  var pbsd: proc_bsdinfo
  var ptinfo: proc_taskinfo
  init(pbsd: proc_bsdinfo, ptinfo: proc_taskinfo)
}
struct proc_taskinfo {
  var pti_virtual_size: UInt64
  var pti_resident_size: UInt64
  var pti_total_user: UInt64
  var pti_total_system: UInt64
  var pti_threads_user: UInt64
  var pti_threads_system: UInt64
  var pti_policy: Int32
  var pti_faults: Int32
  var pti_pageins: Int32
  var pti_cow_faults: Int32
  var pti_messages_sent: Int32
  var pti_messages_received: Int32
  var pti_syscalls_mach: Int32
  var pti_syscalls_unix: Int32
  var pti_csw: Int32
  var pti_threadnum: Int32
  var pti_numrunning: Int32
  var pti_priority: Int32
  init(pti_virtual_size: UInt64, pti_resident_size: UInt64, pti_total_user: UInt64, pti_total_system: UInt64, pti_threads_user: UInt64, pti_threads_system: UInt64, pti_policy: Int32, pti_faults: Int32, pti_pageins: Int32, pti_cow_faults: Int32, pti_messages_sent: Int32, pti_messages_received: Int32, pti_syscalls_mach: Int32, pti_syscalls_unix: Int32, pti_csw: Int32, pti_threadnum: Int32, pti_numrunning: Int32, pti_priority: Int32)
}
struct proc_threadinfo {
  var pth_user_time: UInt64
  var pth_system_time: UInt64
  var pth_cpu_usage: Int32
  var pth_policy: Int32
  var pth_run_state: Int32
  var pth_flags: Int32
  var pth_sleep_time: Int32
  var pth_curpri: Int32
  var pth_priority: Int32
  var pth_maxpriority: Int32
  var pth_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(pth_user_time: UInt64, pth_system_time: UInt64, pth_cpu_usage: Int32, pth_policy: Int32, pth_run_state: Int32, pth_flags: Int32, pth_sleep_time: Int32, pth_curpri: Int32, pth_priority: Int32, pth_maxpriority: Int32, pth_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct proc_threadwithpathinfo {
  var pt: proc_threadinfo
  var pvip: vnode_info_path
  init(pt: proc_threadinfo, pvip: vnode_info_path)
}
struct proc_vnodepathinfo {
  var pvi_cdir: vnode_info_path
  var pvi_rdir: vnode_info_path
  init(pvi_cdir: vnode_info_path, pvi_rdir: vnode_info_path)
}
struct proc_workqueueinfo {
  var pwq_nthreads: UInt32
  var pwq_runthreads: UInt32
  var pwq_blockedthreads: UInt32
  var pwq_state: UInt32
  init(pwq_nthreads: UInt32, pwq_runthreads: UInt32, pwq_blockedthreads: UInt32, pwq_state: UInt32)
}
typealias processor_array_t = UnsafePointer<processor_t>
func processor_assign(processor: processor_t, new_set: processor_set_t, wait: boolean_t) -> kern_return_t
func processor_assign(processor: processor_t, new_set: processor_set_t, wait: boolean_t) -> kern_return_t
struct processor_basic_info {
  var cpu_type: cpu_type_t
  var cpu_subtype: cpu_subtype_t
  var running: boolean_t
  var slot_num: CInt
  var is_master: boolean_t
  init(cpu_type: cpu_type_t, cpu_subtype: cpu_subtype_t, running: boolean_t, slot_num: CInt, is_master: boolean_t)
}
typealias processor_basic_info_data_t = processor_basic_info
typealias processor_basic_info_t = UnsafePointer<processor_basic_info>
func processor_control(processor: processor_t, processor_cmd: CMutablePointer<integer_t>, processor_cmdCnt: mach_msg_type_number_t) -> kern_return_t
func processor_control(processor: processor_t, processor_cmd: CMutablePointer<integer_t>, processor_cmdCnt: mach_msg_type_number_t) -> kern_return_t
struct processor_cpu_load_info {
  var cpu_ticks: (CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt)
  init(cpu_ticks: (CUnsignedInt, CUnsignedInt, CUnsignedInt, CUnsignedInt))
}
typealias processor_cpu_load_info_data_t = processor_cpu_load_info
typealias processor_cpu_load_info_t = UnsafePointer<processor_cpu_load_info>
func processor_exit(processor: processor_t) -> kern_return_t
func processor_exit(processor: processor_t) -> kern_return_t
typealias processor_flavor_t = CInt
func processor_get_assignment(processor: processor_t, assigned_set: CMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_get_assignment(processor: processor_t, assigned_set: CMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_info(processor: processor_t, flavor: processor_flavor_t, host: CMutablePointer<host_t>, processor_info_out: CMutablePointer<integer_t>, processor_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_info(processor: processor_t, flavor: processor_flavor_t, host: CMutablePointer<host_t>, processor_info_out: CMutablePointer<integer_t>, processor_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias processor_info_array_t = UnsafePointer<integer_t>
typealias processor_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias processor_info_t = UnsafePointer<integer_t>
typealias processor_port_array_t = processor_array_t
typealias processor_port_t = processor_t
typealias processor_set_array_t = UnsafePointer<processor_set_t>
struct processor_set_basic_info {
  var processor_count: CInt
  var default_policy: CInt
  init(processor_count: CInt, default_policy: CInt)
}
typealias processor_set_basic_info_data_t = processor_set_basic_info
typealias processor_set_basic_info_t = UnsafePointer<processor_set_basic_info>
typealias processor_set_control_port_t = processor_set_t
typealias processor_set_control_t = mach_port_t
func processor_set_create(host: host_t, new_set: CMutablePointer<processor_set_t>, new_name: CMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_set_create(host: host_t, new_set: CMutablePointer<processor_set_t>, new_name: CMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_set_default(host: host_t, default_set: CMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_set_default(host: host_t, default_set: CMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_set_destroy(set: processor_set_t) -> kern_return_t
func processor_set_destroy(set: processor_set_t) -> kern_return_t
typealias processor_set_flavor_t = CInt
func processor_set_info(set_name: processor_set_name_t, flavor: CInt, host: CMutablePointer<host_t>, info_out: CMutablePointer<integer_t>, info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_set_info(set_name: processor_set_name_t, flavor: CInt, host: CMutablePointer<host_t>, info_out: CMutablePointer<integer_t>, info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias processor_set_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias processor_set_info_t = UnsafePointer<integer_t>
struct processor_set_load_info {
  var task_count: CInt
  var thread_count: CInt
  var load_average: integer_t
  var mach_factor: integer_t
  init(task_count: CInt, thread_count: CInt, load_average: integer_t, mach_factor: integer_t)
}
typealias processor_set_load_info_data_t = processor_set_load_info
typealias processor_set_load_info_t = UnsafePointer<processor_set_load_info>
func processor_set_max_priority(processor_set: processor_set_t, max_priority: CInt, change_threads: boolean_t) -> kern_return_t
func processor_set_max_priority(processor_set: processor_set_t, max_priority: CInt, change_threads: boolean_t) -> kern_return_t
typealias processor_set_name_array_t = UnsafePointer<processor_set_t>
typealias processor_set_name_port_array_t = processor_set_array_t
typealias processor_set_name_port_t = processor_set_t
typealias processor_set_name_t = processor_set_t
func processor_set_policy_control(pset: processor_set_t, flavor: processor_set_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: mach_msg_type_number_t, change: boolean_t) -> kern_return_t
func processor_set_policy_control(pset: processor_set_t, flavor: processor_set_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: mach_msg_type_number_t, change: boolean_t) -> kern_return_t
func processor_set_policy_disable(processor_set: processor_set_t, policy: CInt, change_threads: boolean_t) -> kern_return_t
func processor_set_policy_disable(processor_set: processor_set_t, policy: CInt, change_threads: boolean_t) -> kern_return_t
func processor_set_policy_enable(processor_set: processor_set_t, policy: CInt) -> kern_return_t
func processor_set_policy_enable(processor_set: processor_set_t, policy: CInt) -> kern_return_t
typealias processor_set_port_t = processor_set_t
func processor_set_stack_usage(pset: processor_set_t, ltotal: CMutablePointer<CUnsignedInt>, space: CMutablePointer<vm_size_t>, resident: CMutablePointer<vm_size_t>, maxusage: CMutablePointer<vm_size_t>, maxstack: CMutablePointer<vm_offset_t>) -> kern_return_t
func processor_set_stack_usage(pset: processor_set_t, ltotal: CMutablePointer<CUnsignedInt>, space: CMutablePointer<vm_size_t>, resident: CMutablePointer<vm_size_t>, maxusage: CMutablePointer<vm_size_t>, maxstack: CMutablePointer<vm_offset_t>) -> kern_return_t
func processor_set_statistics(pset: processor_set_name_t, flavor: processor_set_flavor_t, info_out: CMutablePointer<integer_t>, info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_set_statistics(pset: processor_set_name_t, flavor: processor_set_flavor_t, info_out: CMutablePointer<integer_t>, info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias processor_set_t = mach_port_t
func processor_set_tasks(processor_set: processor_set_t, task_list: CMutablePointer<task_array_t>, task_listCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_set_tasks(processor_set: processor_set_t, task_list: CMutablePointer<task_array_t>, task_listCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_set_threads(processor_set: processor_set_t, thread_list: CMutablePointer<thread_act_array_t>, thread_listCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_set_threads(processor_set: processor_set_t, thread_list: CMutablePointer<thread_act_array_t>, thread_listCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_start(processor: processor_t) -> kern_return_t
func processor_start(processor: processor_t) -> kern_return_t
typealias processor_t = mach_port_t
func profil(_: CMutablePointer<CChar>, _: UInt, _: CUnsignedLong, _: CUnsignedInt) -> CInt
func profil(_: CMutablePointer<CChar>, _: UInt, _: CUnsignedLong, _: CUnsignedInt) -> CInt
struct protoent {
  var p_name: UnsafePointer<CChar>
  var p_aliases: UnsafePointer<UnsafePointer<CChar>>
  var p_proto: CInt
  init(p_name: UnsafePointer<CChar>, p_aliases: UnsafePointer<UnsafePointer<CChar>>, p_proto: CInt)
}
func pselect(_: CInt, _: CMutablePointer<fd_set>, _: CMutablePointer<fd_set>, _: CMutablePointer<fd_set>, _: CConstPointer<timespec>, _: CConstPointer<sigset_t>) -> CInt
func pselect(_: CInt, _: CMutablePointer<fd_set>, _: CMutablePointer<fd_set>, _: CMutablePointer<fd_set>, _: CConstPointer<timespec>, _: CConstPointer<sigset_t>) -> CInt
struct psem_fdinfo {
  var pfi: proc_fileinfo
  var pseminfo: psem_info
  init(pfi: proc_fileinfo, pseminfo: psem_info)
}
struct psem_info {
  var psem_stat: vinfo_stat
  var psem_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(psem_stat: vinfo_stat, psem_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct pseminfo {
  var psem_flags: CUnsignedInt
  var psem_usecount: CUnsignedInt
  var psem_mode: mode_t
  var psem_uid: uid_t
  var psem_gid: gid_t
  var psem_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var psem_semobject: COpaquePointer
  var psem_label: COpaquePointer
  var psem_creator_pid: pid_t
  var psem_creator_uniqueid: UInt64
  init(psem_flags: CUnsignedInt, psem_usecount: CUnsignedInt, psem_mode: mode_t, psem_uid: uid_t, psem_gid: gid_t, psem_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), psem_semobject: COpaquePointer, psem_label: COpaquePointer, psem_creator_pid: pid_t, psem_creator_uniqueid: UInt64)
}
struct pshm_fdinfo {
  var pfi: proc_fileinfo
  var pshminfo: pshm_info
  init(pfi: proc_fileinfo, pshminfo: pshm_info)
}
struct pshm_info {
  var pshm_stat: vinfo_stat
  var pshm_mappaddr: UInt64
  var pshm_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(pshm_stat: vinfo_stat, pshm_mappaddr: UInt64, pshm_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct pshminfo {
  var pshm_flags: CUnsignedInt
  var pshm_usecount: CUnsignedInt
  var pshm_length: off_t
  var pshm_mode: mode_t
  var pshm_uid: uid_t
  var pshm_gid: gid_t
  var pshm_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var pshm_memobject: COpaquePointer
  var pshm_label: COpaquePointer
  init(pshm_flags: CUnsignedInt, pshm_usecount: CUnsignedInt, pshm_length: off_t, pshm_mode: mode_t, pshm_uid: uid_t, pshm_gid: gid_t, pshm_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), pshm_memobject: COpaquePointer, pshm_label: COpaquePointer)
}
func psignal(_: CUnsignedInt, _: CString)
func psignal(_: CUnsignedInt, _: CString)
func psort_b(_: CMutableVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!)
func psort_b(_: CMutableVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!)
struct pstats {
  var p_ru: rusage
  var p_cru: rusage
  var p_prof: uprof
  var ps_start: UInt64
  init(p_ru: rusage, p_cru: rusage, p_prof: uprof, ps_start: UInt64)
}
func pthread_attr_destroy(_: CMutablePointer<pthread_attr_t>) -> CInt
func pthread_attr_destroy(_: CMutablePointer<pthread_attr_t>) -> CInt
func pthread_attr_get_qos_class_np(__attr: CMutablePointer<pthread_attr_t>, __qos_class: CMutablePointer<qos_class_t>, __relative_priority: CMutablePointer<CInt>) -> CInt
func pthread_attr_get_qos_class_np(__attr: CMutablePointer<pthread_attr_t>, __qos_class: CMutablePointer<qos_class_t>, __relative_priority: CMutablePointer<CInt>) -> CInt
func pthread_attr_getdetachstate(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_attr_getdetachstate(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_attr_getguardsize(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<UInt>) -> CInt
func pthread_attr_getguardsize(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<UInt>) -> CInt
func pthread_attr_getinheritsched(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_attr_getinheritsched(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_attr_getschedparam(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<sched_param>) -> CInt
func pthread_attr_getschedparam(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<sched_param>) -> CInt
func pthread_attr_getschedpolicy(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_attr_getschedpolicy(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_attr_getscope(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_attr_getscope(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_attr_getstack(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<COpaquePointer>, _: CMutablePointer<UInt>) -> CInt
func pthread_attr_getstack(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<COpaquePointer>, _: CMutablePointer<UInt>) -> CInt
func pthread_attr_getstackaddr(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<COpaquePointer>) -> CInt
func pthread_attr_getstackaddr(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<COpaquePointer>) -> CInt
func pthread_attr_getstacksize(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<UInt>) -> CInt
func pthread_attr_getstacksize(_: CConstPointer<pthread_attr_t>, _: CMutablePointer<UInt>) -> CInt
func pthread_attr_init(_: CMutablePointer<pthread_attr_t>) -> CInt
func pthread_attr_init(_: CMutablePointer<pthread_attr_t>) -> CInt
func pthread_attr_set_qos_class_np(__attr: CMutablePointer<pthread_attr_t>, __qos_class: qos_class_t, __relative_priority: CInt) -> CInt
func pthread_attr_set_qos_class_np(__attr: CMutablePointer<pthread_attr_t>, __qos_class: qos_class_t, __relative_priority: CInt) -> CInt
func pthread_attr_setdetachstate(_: CMutablePointer<pthread_attr_t>, _: CInt) -> CInt
func pthread_attr_setdetachstate(_: CMutablePointer<pthread_attr_t>, _: CInt) -> CInt
func pthread_attr_setguardsize(_: CMutablePointer<pthread_attr_t>, _: UInt) -> CInt
func pthread_attr_setguardsize(_: CMutablePointer<pthread_attr_t>, _: UInt) -> CInt
func pthread_attr_setinheritsched(_: CMutablePointer<pthread_attr_t>, _: CInt) -> CInt
func pthread_attr_setinheritsched(_: CMutablePointer<pthread_attr_t>, _: CInt) -> CInt
func pthread_attr_setschedparam(_: CMutablePointer<pthread_attr_t>, _: CConstPointer<sched_param>) -> CInt
func pthread_attr_setschedparam(_: CMutablePointer<pthread_attr_t>, _: CConstPointer<sched_param>) -> CInt
func pthread_attr_setschedpolicy(_: CMutablePointer<pthread_attr_t>, _: CInt) -> CInt
func pthread_attr_setschedpolicy(_: CMutablePointer<pthread_attr_t>, _: CInt) -> CInt
func pthread_attr_setscope(_: CMutablePointer<pthread_attr_t>, _: CInt) -> CInt
func pthread_attr_setscope(_: CMutablePointer<pthread_attr_t>, _: CInt) -> CInt
func pthread_attr_setstack(_: CMutablePointer<pthread_attr_t>, _: CMutableVoidPointer, _: UInt) -> CInt
func pthread_attr_setstack(_: CMutablePointer<pthread_attr_t>, _: CMutableVoidPointer, _: UInt) -> CInt
func pthread_attr_setstackaddr(_: CMutablePointer<pthread_attr_t>, _: CMutableVoidPointer) -> CInt
func pthread_attr_setstackaddr(_: CMutablePointer<pthread_attr_t>, _: CMutableVoidPointer) -> CInt
func pthread_attr_setstacksize(_: CMutablePointer<pthread_attr_t>, _: UInt) -> CInt
func pthread_attr_setstacksize(_: CMutablePointer<pthread_attr_t>, _: UInt) -> CInt
typealias pthread_attr_t = __darwin_pthread_attr_t
func pthread_cancel(_: CMutablePointer<_opaque_pthread_t>) -> CInt
func pthread_cancel(_: CMutablePointer<_opaque_pthread_t>) -> CInt
func pthread_cond_broadcast(_: CMutablePointer<pthread_cond_t>) -> CInt
func pthread_cond_broadcast(_: CMutablePointer<pthread_cond_t>) -> CInt
func pthread_cond_destroy(_: CMutablePointer<pthread_cond_t>) -> CInt
func pthread_cond_destroy(_: CMutablePointer<pthread_cond_t>) -> CInt
func pthread_cond_init(_: CMutablePointer<pthread_cond_t>, _: CConstPointer<pthread_condattr_t>) -> CInt
func pthread_cond_init(_: CMutablePointer<pthread_cond_t>, _: CConstPointer<pthread_condattr_t>) -> CInt
func pthread_cond_signal(_: CMutablePointer<pthread_cond_t>) -> CInt
func pthread_cond_signal(_: CMutablePointer<pthread_cond_t>) -> CInt
func pthread_cond_signal_thread_np(_: CMutablePointer<pthread_cond_t>, _: CMutablePointer<_opaque_pthread_t>) -> CInt
func pthread_cond_signal_thread_np(_: CMutablePointer<pthread_cond_t>, _: CMutablePointer<_opaque_pthread_t>) -> CInt
typealias pthread_cond_t = __darwin_pthread_cond_t
func pthread_cond_timedwait(_: CMutablePointer<pthread_cond_t>, _: CMutablePointer<pthread_mutex_t>, _: CConstPointer<timespec>) -> CInt
func pthread_cond_timedwait(_: CMutablePointer<pthread_cond_t>, _: CMutablePointer<pthread_mutex_t>, _: CConstPointer<timespec>) -> CInt
func pthread_cond_timedwait_relative_np(_: CMutablePointer<pthread_cond_t>, _: CMutablePointer<pthread_mutex_t>, _: CConstPointer<timespec>) -> CInt
func pthread_cond_timedwait_relative_np(_: CMutablePointer<pthread_cond_t>, _: CMutablePointer<pthread_mutex_t>, _: CConstPointer<timespec>) -> CInt
func pthread_cond_wait(_: CMutablePointer<pthread_cond_t>, _: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_cond_wait(_: CMutablePointer<pthread_cond_t>, _: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_condattr_destroy(_: CMutablePointer<pthread_condattr_t>) -> CInt
func pthread_condattr_destroy(_: CMutablePointer<pthread_condattr_t>) -> CInt
func pthread_condattr_getpshared(_: CConstPointer<pthread_condattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_condattr_getpshared(_: CConstPointer<pthread_condattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_condattr_init(_: CMutablePointer<pthread_condattr_t>) -> CInt
func pthread_condattr_init(_: CMutablePointer<pthread_condattr_t>) -> CInt
func pthread_condattr_setpshared(_: CMutablePointer<pthread_condattr_t>, _: CInt) -> CInt
func pthread_condattr_setpshared(_: CMutablePointer<pthread_condattr_t>, _: CInt) -> CInt
typealias pthread_condattr_t = __darwin_pthread_condattr_t
func pthread_detach(_: CMutablePointer<_opaque_pthread_t>) -> CInt
func pthread_detach(_: CMutablePointer<_opaque_pthread_t>) -> CInt
func pthread_equal(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<_opaque_pthread_t>) -> CInt
func pthread_equal(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<_opaque_pthread_t>) -> CInt
@noreturn func pthread_exit(_: CMutableVoidPointer)
@noreturn func pthread_exit(_: CMutableVoidPointer)
func pthread_from_mach_thread_np(_: mach_port_t) -> pthread_t
func pthread_from_mach_thread_np(_: mach_port_t) -> pthread_t
func pthread_get_qos_class_np(__pthread: CMutablePointer<_opaque_pthread_t>, __qos_class: CMutablePointer<qos_class_t>, __relative_priority: CMutablePointer<CInt>) -> CInt
func pthread_get_qos_class_np(__pthread: CMutablePointer<_opaque_pthread_t>, __qos_class: CMutablePointer<qos_class_t>, __relative_priority: CMutablePointer<CInt>) -> CInt
func pthread_get_stackaddr_np(_: CMutablePointer<_opaque_pthread_t>) -> COpaquePointer
func pthread_get_stackaddr_np(_: CMutablePointer<_opaque_pthread_t>) -> COpaquePointer
func pthread_get_stacksize_np(_: CMutablePointer<_opaque_pthread_t>) -> UInt
func pthread_get_stacksize_np(_: CMutablePointer<_opaque_pthread_t>) -> UInt
func pthread_getconcurrency() -> CInt
func pthread_getconcurrency() -> CInt
func pthread_getname_np(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<CChar>, _: UInt) -> CInt
func pthread_getname_np(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<CChar>, _: UInt) -> CInt
func pthread_getschedparam(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<CInt>, _: CMutablePointer<sched_param>) -> CInt
func pthread_getschedparam(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<CInt>, _: CMutablePointer<sched_param>) -> CInt
func pthread_getspecific(_: pthread_key_t) -> COpaquePointer
func pthread_getspecific(_: pthread_key_t) -> COpaquePointer
func pthread_getugid_np(_: CMutablePointer<uid_t>, _: CMutablePointer<gid_t>) -> CInt
func pthread_getugid_np(_: CMutablePointer<uid_t>, _: CMutablePointer<gid_t>) -> CInt
func pthread_is_threaded_np() -> CInt
func pthread_is_threaded_np() -> CInt
func pthread_join(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<COpaquePointer>) -> CInt
func pthread_join(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<COpaquePointer>) -> CInt
func pthread_key_delete(_: pthread_key_t) -> CInt
func pthread_key_delete(_: pthread_key_t) -> CInt
typealias pthread_key_t = __darwin_pthread_key_t
func pthread_kill(_: CMutablePointer<_opaque_pthread_t>, _: CInt) -> CInt
func pthread_kill(_: CMutablePointer<_opaque_pthread_t>, _: CInt) -> CInt
func pthread_mach_thread_np(_: CMutablePointer<_opaque_pthread_t>) -> mach_port_t
func pthread_mach_thread_np(_: CMutablePointer<_opaque_pthread_t>) -> mach_port_t
func pthread_main_np() -> CInt
func pthread_main_np() -> CInt
func pthread_mutex_destroy(_: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_mutex_destroy(_: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_mutex_getprioceiling(_: CConstPointer<pthread_mutex_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutex_getprioceiling(_: CConstPointer<pthread_mutex_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutex_init(_: CMutablePointer<pthread_mutex_t>, _: CConstPointer<pthread_mutexattr_t>) -> CInt
func pthread_mutex_init(_: CMutablePointer<pthread_mutex_t>, _: CConstPointer<pthread_mutexattr_t>) -> CInt
func pthread_mutex_lock(_: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_mutex_lock(_: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_mutex_setprioceiling(_: CMutablePointer<pthread_mutex_t>, _: CInt, _: CMutablePointer<CInt>) -> CInt
func pthread_mutex_setprioceiling(_: CMutablePointer<pthread_mutex_t>, _: CInt, _: CMutablePointer<CInt>) -> CInt
typealias pthread_mutex_t = __darwin_pthread_mutex_t
func pthread_mutex_trylock(_: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_mutex_trylock(_: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_mutex_unlock(_: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_mutex_unlock(_: CMutablePointer<pthread_mutex_t>) -> CInt
func pthread_mutexattr_destroy(_: CMutablePointer<pthread_mutexattr_t>) -> CInt
func pthread_mutexattr_destroy(_: CMutablePointer<pthread_mutexattr_t>) -> CInt
func pthread_mutexattr_getprioceiling(_: CConstPointer<pthread_mutexattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutexattr_getprioceiling(_: CConstPointer<pthread_mutexattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutexattr_getprotocol(_: CConstPointer<pthread_mutexattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutexattr_getprotocol(_: CConstPointer<pthread_mutexattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutexattr_getpshared(_: CConstPointer<pthread_mutexattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutexattr_getpshared(_: CConstPointer<pthread_mutexattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutexattr_gettype(_: CConstPointer<pthread_mutexattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutexattr_gettype(_: CConstPointer<pthread_mutexattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_mutexattr_init(_: CMutablePointer<pthread_mutexattr_t>) -> CInt
func pthread_mutexattr_init(_: CMutablePointer<pthread_mutexattr_t>) -> CInt
func pthread_mutexattr_setpolicy_np(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_setpolicy_np(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_setprioceiling(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_setprioceiling(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_setprotocol(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_setprotocol(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_setpshared(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_setpshared(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_settype(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
func pthread_mutexattr_settype(_: CMutablePointer<pthread_mutexattr_t>, _: CInt) -> CInt
typealias pthread_mutexattr_t = __darwin_pthread_mutexattr_t
typealias pthread_once_t = __darwin_pthread_once_t
func pthread_override_qos_class_end_np(__override: pthread_override_t) -> CInt
func pthread_override_qos_class_end_np(__override: pthread_override_t) -> CInt
func pthread_override_qos_class_start_np(__pthread: CMutablePointer<_opaque_pthread_t>, __qos_class: qos_class_t, __relative_priority: CInt) -> pthread_override_t
func pthread_override_qos_class_start_np(__pthread: CMutablePointer<_opaque_pthread_t>, __qos_class: qos_class_t, __relative_priority: CInt) -> pthread_override_t
typealias pthread_override_t = COpaquePointer
func pthread_rwlock_destroy(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_destroy(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_init(_: CMutablePointer<pthread_rwlock_t>, _: CConstPointer<pthread_rwlockattr_t>) -> CInt
func pthread_rwlock_init(_: CMutablePointer<pthread_rwlock_t>, _: CConstPointer<pthread_rwlockattr_t>) -> CInt
func pthread_rwlock_rdlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_rdlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
typealias pthread_rwlock_t = __darwin_pthread_rwlock_t
func pthread_rwlock_tryrdlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_tryrdlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_trywrlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_trywrlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_unlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_unlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_wrlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlock_wrlock(_: CMutablePointer<pthread_rwlock_t>) -> CInt
func pthread_rwlockattr_destroy(_: CMutablePointer<pthread_rwlockattr_t>) -> CInt
func pthread_rwlockattr_destroy(_: CMutablePointer<pthread_rwlockattr_t>) -> CInt
func pthread_rwlockattr_getpshared(_: CConstPointer<pthread_rwlockattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_rwlockattr_getpshared(_: CConstPointer<pthread_rwlockattr_t>, _: CMutablePointer<CInt>) -> CInt
func pthread_rwlockattr_init(_: CMutablePointer<pthread_rwlockattr_t>) -> CInt
func pthread_rwlockattr_init(_: CMutablePointer<pthread_rwlockattr_t>) -> CInt
func pthread_rwlockattr_setpshared(_: CMutablePointer<pthread_rwlockattr_t>, _: CInt) -> CInt
func pthread_rwlockattr_setpshared(_: CMutablePointer<pthread_rwlockattr_t>, _: CInt) -> CInt
typealias pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t
func pthread_self() -> pthread_t
func pthread_self() -> pthread_t
func pthread_set_qos_class_self_np(__qos_class: qos_class_t, __relative_priority: CInt) -> CInt
func pthread_set_qos_class_self_np(__qos_class: qos_class_t, __relative_priority: CInt) -> CInt
func pthread_setcancelstate(_: CInt, _: CMutablePointer<CInt>) -> CInt
func pthread_setcancelstate(_: CInt, _: CMutablePointer<CInt>) -> CInt
func pthread_setcanceltype(_: CInt, _: CMutablePointer<CInt>) -> CInt
func pthread_setcanceltype(_: CInt, _: CMutablePointer<CInt>) -> CInt
func pthread_setconcurrency(_: CInt) -> CInt
func pthread_setconcurrency(_: CInt) -> CInt
func pthread_setname_np(_: CString) -> CInt
func pthread_setname_np(_: CString) -> CInt
func pthread_setschedparam(_: CMutablePointer<_opaque_pthread_t>, _: CInt, _: CConstPointer<sched_param>) -> CInt
func pthread_setschedparam(_: CMutablePointer<_opaque_pthread_t>, _: CInt, _: CConstPointer<sched_param>) -> CInt
func pthread_setspecific(_: pthread_key_t, _: CConstVoidPointer) -> CInt
func pthread_setspecific(_: pthread_key_t, _: CConstVoidPointer) -> CInt
func pthread_setugid_np(_: uid_t, _: gid_t) -> CInt
func pthread_setugid_np(_: uid_t, _: gid_t) -> CInt
func pthread_sigmask(_: CInt, _: CConstPointer<sigset_t>, _: CMutablePointer<sigset_t>) -> CInt
func pthread_sigmask(_: CInt, _: CConstPointer<sigset_t>, _: CMutablePointer<sigset_t>) -> CInt
typealias pthread_t = __darwin_pthread_t
func pthread_testcancel()
func pthread_testcancel()
func pthread_threadid_np(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<__uint64_t>) -> CInt
func pthread_threadid_np(_: CMutablePointer<_opaque_pthread_t>, _: CMutablePointer<__uint64_t>) -> CInt
func pthread_yield_np()
func pthread_yield_np()
typealias ptrdiff_t = Int
func ptsname(_: CInt) -> UnsafePointer<CChar>
func ptsname(_: CInt) -> UnsafePointer<CChar>
func putc(_: CInt, _: CMutablePointer<FILE>) -> CInt
func putc(_: CInt, _: CMutablePointer<FILE>) -> CInt
func putc_unlocked(_: CInt, _: CMutablePointer<FILE>) -> CInt
func putc_unlocked(_: CInt, _: CMutablePointer<FILE>) -> CInt
func putchar(_: CInt) -> CInt
func putchar(_: CInt) -> CInt
func putchar_unlocked(_: CInt) -> CInt
func putchar_unlocked(_: CInt) -> CInt
func putenv(_: CMutablePointer<CChar>) -> CInt
func putenv(_: CMutablePointer<CChar>) -> CInt
func puts(_: CString) -> CInt
func puts(_: CString) -> CInt
func pututxline(_: CConstPointer<utmpx>) -> UnsafePointer<utmpx>
func pututxline(_: CConstPointer<utmpx>) -> UnsafePointer<utmpx>
func putw(_: CInt, _: CMutablePointer<FILE>) -> CInt
func putw(_: CInt, _: CMutablePointer<FILE>) -> CInt
func putwc(_: wchar_t, _: CMutablePointer<FILE>) -> wint_t
func putwc(_: wchar_t, _: CMutablePointer<FILE>) -> wint_t
func putwchar(_: wchar_t) -> wint_t
func putwchar(_: wchar_t) -> wint_t
func pwrite(_: CInt, _: CConstVoidPointer, _: UInt, _: off_t) -> Int
func pwrite(_: CInt, _: CConstVoidPointer, _: UInt, _: off_t) -> Int
typealias qaddr_t = UnsafePointer<quad_t>
struct qelem {
  var q_forw: UnsafePointer<qelem>
  var q_back: UnsafePointer<qelem>
  var q_data: UnsafePointer<CChar>
  init(q_forw: UnsafePointer<qelem>, q_back: UnsafePointer<qelem>, q_data: UnsafePointer<CChar>)
}
func qos_class_main() -> qos_class_t
func qos_class_main() -> qos_class_t
func qos_class_self() -> qos_class_t
func qos_class_self() -> qos_class_t
struct qos_class_t {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
func qsort_b(_: CMutableVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!)
func qsort_b(_: CMutableVoidPointer, _: UInt, _: UInt, _: ((CConstVoidPointer, CConstVoidPointer) -> CInt)!)
typealias quad_t = Int64
func quotactl(_: CString, _: CInt, _: CInt, _: CMutablePointer<CChar>) -> CInt
func quotactl(_: CString, _: CInt, _: CInt, _: CMutablePointer<CChar>) -> CInt
func radixsort(_: CMutablePointer<UnsafePointer<CUnsignedChar>>, _: CInt, _: CConstPointer<CUnsignedChar>, _: CUnsignedInt) -> CInt
func radixsort(_: CMutablePointer<UnsafePointer<CUnsignedChar>>, _: CInt, _: CConstPointer<CUnsignedChar>, _: CUnsignedInt) -> CInt
struct radvisory {
  var ra_offset: off_t
  var ra_count: CInt
  init(ra_offset: off_t, ra_count: CInt)
}
func raise(_: CInt) -> CInt
func raise(_: CInt) -> CInt
func rand() -> CInt
func rand() -> CInt
func rand_r(_: CMutablePointer<CUnsignedInt>) -> CInt
func rand_r(_: CMutablePointer<CUnsignedInt>) -> CInt
func random() -> CLong
func random() -> CLong
struct rawarc {
  var raw_frompc: UInt32
  var raw_selfpc: UInt32
  var raw_count: Int32
  init(raw_frompc: UInt32, raw_selfpc: UInt32, raw_count: Int32)
}
struct rawarc_64 {
  var raw_frompc: UInt64
  var raw_selfpc: UInt64
  var raw_count: Int32
  init(raw_frompc: UInt64, raw_selfpc: UInt64, raw_count: Int32)
}
struct rawarc_order {
  var raw_frompc: UInt32
  var raw_selfpc: UInt32
  var raw_count: UInt32
  var raw_order: UInt32
  init(raw_frompc: UInt32, raw_selfpc: UInt32, raw_count: UInt32, raw_order: UInt32)
}
struct rawarc_order_64 {
  var raw_frompc: UInt64
  var raw_selfpc: UInt64
  var raw_count: UInt32
  var raw_order: UInt32
  init(raw_frompc: UInt64, raw_selfpc: UInt64, raw_count: UInt32, raw_order: UInt32)
}
typealias rawarc_order_t = rawarc_order_64
typealias rawarc_t = rawarc_64
struct rb_node {
  var opaque: (COpaquePointer, COpaquePointer, COpaquePointer)
  init(opaque: (COpaquePointer, COpaquePointer, COpaquePointer))
}
typealias rb_node_t = rb_node
struct rb_tree {
  var opaque: (COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer)
  init(opaque: (COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer, COpaquePointer))
}
func rb_tree_count(_: CMutablePointer<rb_tree_t>) -> UInt
func rb_tree_count(_: CMutablePointer<rb_tree_t>) -> UInt
func rb_tree_find_node(_: CMutablePointer<rb_tree_t>, _: CConstVoidPointer) -> COpaquePointer
func rb_tree_find_node(_: CMutablePointer<rb_tree_t>, _: CConstVoidPointer) -> COpaquePointer
func rb_tree_find_node_geq(_: CMutablePointer<rb_tree_t>, _: CConstVoidPointer) -> COpaquePointer
func rb_tree_find_node_geq(_: CMutablePointer<rb_tree_t>, _: CConstVoidPointer) -> COpaquePointer
func rb_tree_find_node_leq(_: CMutablePointer<rb_tree_t>, _: CConstVoidPointer) -> COpaquePointer
func rb_tree_find_node_leq(_: CMutablePointer<rb_tree_t>, _: CConstVoidPointer) -> COpaquePointer
func rb_tree_init(_: CMutablePointer<rb_tree_t>, _: CConstPointer<rb_tree_ops_t>)
func rb_tree_init(_: CMutablePointer<rb_tree_t>, _: CConstPointer<rb_tree_ops_t>)
func rb_tree_insert_node(_: CMutablePointer<rb_tree_t>, _: CMutableVoidPointer) -> COpaquePointer
func rb_tree_insert_node(_: CMutablePointer<rb_tree_t>, _: CMutableVoidPointer) -> COpaquePointer
func rb_tree_iterate(_: CMutablePointer<rb_tree_t>, _: CMutableVoidPointer, _: CUnsignedInt) -> COpaquePointer
func rb_tree_iterate(_: CMutablePointer<rb_tree_t>, _: CMutableVoidPointer, _: CUnsignedInt) -> COpaquePointer
struct rb_tree_ops_t {
  var rbto_node_offset: UInt
  var rbto_context: COpaquePointer
  init(rbto_node_offset: UInt, rbto_context: COpaquePointer)
}
func rb_tree_remove_node(_: CMutablePointer<rb_tree_t>, _: CMutableVoidPointer)
func rb_tree_remove_node(_: CMutablePointer<rb_tree_t>, _: CMutableVoidPointer)
typealias rb_tree_t = rb_tree
func rcmd(_: CMutablePointer<UnsafePointer<CChar>>, _: CInt, _: CString, _: CString, _: CString, _: CMutablePointer<CInt>) -> CInt
func rcmd(_: CMutablePointer<UnsafePointer<CChar>>, _: CInt, _: CString, _: CString, _: CString, _: CMutablePointer<CInt>) -> CInt
func rcmd_af(_: CMutablePointer<UnsafePointer<CChar>>, _: CInt, _: CString, _: CString, _: CString, _: CMutablePointer<CInt>, _: CInt) -> CInt
func rcmd_af(_: CMutablePointer<UnsafePointer<CChar>>, _: CInt, _: CString, _: CString, _: CString, _: CMutablePointer<CInt>, _: CInt) -> CInt
func read(_: CInt, _: CMutableVoidPointer, _: UInt) -> Int
func read(_: CInt, _: CMutableVoidPointer, _: UInt) -> Int
func read_frandom(buffer: CMutableVoidPointer, numBytes: u_int)
func read_frandom(buffer: CMutableVoidPointer, numBytes: u_int)
func read_random(buffer: CMutableVoidPointer, numBytes: u_int)
func read_random(buffer: CMutableVoidPointer, numBytes: u_int)
func readdir(_: CMutablePointer<DIR>) -> UnsafePointer<dirent>
func readdir(_: CMutablePointer<DIR>) -> UnsafePointer<dirent>
func readdir_r(_: CMutablePointer<DIR>, _: CMutablePointer<dirent>, _: CMutablePointer<UnsafePointer<dirent>>) -> CInt
func readdir_r(_: CMutablePointer<DIR>, _: CMutablePointer<dirent>, _: CMutablePointer<UnsafePointer<dirent>>) -> CInt
func readlink(_: CString, _: CMutablePointer<CChar>, _: UInt) -> Int
func readlink(_: CString, _: CMutablePointer<CChar>, _: UInt) -> Int
func readlinkat(_: CInt, _: CString, _: CMutablePointer<CChar>, _: UInt) -> Int
func readlinkat(_: CInt, _: CString, _: CMutablePointer<CChar>, _: UInt) -> Int
func readv(_: CInt, _: CConstPointer<iovec>, _: CInt) -> Int
func readv(_: CInt, _: CConstPointer<iovec>, _: CInt) -> Int
func realloc(_: CMutableVoidPointer, _: UInt) -> COpaquePointer
func realloc(_: CMutableVoidPointer, _: UInt) -> COpaquePointer
func reallocf(_: CMutableVoidPointer, _: UInt) -> COpaquePointer
func reallocf(_: CMutableVoidPointer, _: UInt) -> COpaquePointer
func realpath(_: CString, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func realpath(_: CString, _: CMutablePointer<CChar>) -> UnsafePointer<CChar>
func reboot(_: CInt) -> CInt
func reboot(_: CInt) -> CInt
func recv(_: CInt, _: CMutableVoidPointer, _: UInt, _: CInt) -> Int
func recv(_: CInt, _: CMutableVoidPointer, _: UInt, _: CInt) -> Int
func recvfrom(_: CInt, _: CMutableVoidPointer, _: UInt, _: CInt, _: CMutablePointer<sockaddr>, _: CMutablePointer<socklen_t>) -> Int
func recvfrom(_: CInt, _: CMutableVoidPointer, _: UInt, _: CInt, _: CMutablePointer<sockaddr>, _: CMutablePointer<socklen_t>) -> Int
func recvmsg(_: CInt, _: CMutablePointer<msghdr>, _: CInt) -> Int
func recvmsg(_: CInt, _: CMutablePointer<msghdr>, _: CInt) -> Int
typealias reg64_t = UInt32
func regcomp(_: CMutablePointer<regex_t>, _: CString, _: CInt) -> CInt
func regcomp(_: CMutablePointer<regex_t>, _: CString, _: CInt) -> CInt
func regerror(_: CInt, _: CConstPointer<regex_t>, _: CMutablePointer<CChar>, _: UInt) -> UInt
func regerror(_: CInt, _: CConstPointer<regex_t>, _: CMutablePointer<CChar>, _: UInt) -> UInt
struct regex_t {
  var re_magic: CInt
  var re_nsub: UInt
  var re_endp: CString
  var re_g: COpaquePointer
  init(re_magic: CInt, re_nsub: UInt, re_endp: CString, re_g: COpaquePointer)
}
func regexec(_: CConstPointer<regex_t>, _: CString, _: UInt, __pmatch: CMutablePointer<regmatch_t>, _: CInt) -> CInt
func regexec(_: CConstPointer<regex_t>, _: CString, _: UInt, __pmatch: CMutablePointer<regmatch_t>, _: CInt) -> CInt
func regfree(_: CMutablePointer<regex_t>)
func regfree(_: CMutablePointer<regex_t>)
typealias register_t = Int64
struct regmatch_t {
  var rm_so: regoff_t
  var rm_eo: regoff_t
  init(rm_so: regoff_t, rm_eo: regoff_t)
}
func regncomp(_: CMutablePointer<regex_t>, _: CString, _: UInt, _: CInt) -> CInt
func regncomp(_: CMutablePointer<regex_t>, _: CString, _: UInt, _: CInt) -> CInt
func regnexec(_: CConstPointer<regex_t>, _: CString, _: UInt, _: UInt, __pmatch: CMutablePointer<regmatch_t>, _: CInt) -> CInt
func regnexec(_: CConstPointer<regex_t>, _: CString, _: UInt, _: UInt, __pmatch: CMutablePointer<regmatch_t>, _: CInt) -> CInt
typealias regoff_t = __darwin_off_t
func regwcomp(_: CMutablePointer<regex_t>, _: CConstPointer<wchar_t>, _: CInt) -> CInt
func regwcomp(_: CMutablePointer<regex_t>, _: CConstPointer<wchar_t>, _: CInt) -> CInt
func regwexec(_: CConstPointer<regex_t>, _: CConstPointer<wchar_t>, _: UInt, __pmatch: CMutablePointer<regmatch_t>, _: CInt) -> CInt
func regwexec(_: CConstPointer<regex_t>, _: CConstPointer<wchar_t>, _: UInt, __pmatch: CMutablePointer<regmatch_t>, _: CInt) -> CInt
func regwncomp(_: CMutablePointer<regex_t>, _: CConstPointer<wchar_t>, _: UInt, _: CInt) -> CInt
func regwncomp(_: CMutablePointer<regex_t>, _: CConstPointer<wchar_t>, _: UInt, _: CInt) -> CInt
func regwnexec(_: CConstPointer<regex_t>, _: CConstPointer<wchar_t>, _: UInt, _: UInt, __pmatch: CMutablePointer<regmatch_t>, _: CInt) -> CInt
func regwnexec(_: CConstPointer<regex_t>, _: CConstPointer<wchar_t>, _: UInt, _: UInt, __pmatch: CMutablePointer<regmatch_t>, _: CInt) -> CInt
func remainder(_: CDouble, _: CDouble) -> CDouble
func remainder(_: CDouble, _: CDouble) -> CDouble
func remainderf(_: CFloat, _: CFloat) -> CFloat
func remainderf(_: CFloat, _: CFloat) -> CFloat
func remove(_: CString) -> CInt
func remove(_: CString) -> CInt
func remque(_: CMutableVoidPointer)
func remque(_: CMutableVoidPointer)
func remquo(_: CDouble, _: CDouble, _: CMutablePointer<CInt>) -> CDouble
func remquo(_: CDouble, _: CDouble, _: CMutablePointer<CInt>) -> CDouble
func remquof(_: CFloat, _: CFloat, _: CMutablePointer<CInt>) -> CFloat
func remquof(_: CFloat, _: CFloat, _: CMutablePointer<CInt>) -> CFloat
func rename(_: CString, _: CString) -> CInt
func rename(_: CString, _: CString) -> CInt
func renameat(_: CInt, _: CString, _: CInt, _: CString) -> CInt
func renameat(_: CInt, _: CString, _: CInt, _: CString) -> CInt
func revoke(_: CString) -> CInt
func revoke(_: CString) -> CInt
func rewind(_: CMutablePointer<FILE>)
func rewind(_: CMutablePointer<FILE>)
func rewinddir(_: CMutablePointer<DIR>)
func rewinddir(_: CMutablePointer<DIR>)
func rindex(_: CString, _: CInt) -> UnsafePointer<CChar>
func rindex(_: CString, _: CInt) -> UnsafePointer<CChar>
func rint(_: CDouble) -> CDouble
func rint(_: CDouble) -> CDouble
func rintf(_: CFloat) -> CFloat
func rintf(_: CFloat) -> CFloat
func rinttol(_: CDouble) -> CLong
func rinttol(_: CDouble) -> CLong
typealias rlim_t = __uint64_t
struct rlimit {
  var rlim_cur: rlim_t
  var rlim_max: rlim_t
  init(rlim_cur: rlim_t, rlim_max: rlim_t)
}
func rmdir(_: CString) -> CInt
func rmdir(_: CString) -> CInt
func round(_: CDouble) -> CDouble
func round(_: CDouble) -> CDouble
func roundf(_: CFloat) -> CFloat
func roundf(_: CFloat) -> CFloat
func roundtol(_: CDouble) -> CLong
func roundtol(_: CDouble) -> CLong
typealias route_t = COpaquePointer
typealias routine_arg_descriptor_t = COpaquePointer
typealias routine_arg_offset = CUnsignedInt
typealias routine_arg_size = CUnsignedInt
typealias routine_arg_type = CUnsignedInt
struct routine_descriptor {
  var argc: CUnsignedInt
  var descr_count: CUnsignedInt
  var arg_descr: routine_arg_descriptor_t
  var max_reply_msg: CUnsignedInt
  init(argc: CUnsignedInt, descr_count: CUnsignedInt, arg_descr: routine_arg_descriptor_t, max_reply_msg: CUnsignedInt)
}
typealias routine_descriptor_t = UnsafePointer<routine_descriptor>
struct rpc_routine_arg_descriptor {
  var type: routine_arg_type
  var size: routine_arg_size
  var count: routine_arg_size
  var offset: routine_arg_offset
  init(type: routine_arg_type, size: routine_arg_size, count: routine_arg_size, offset: routine_arg_offset)
}
typealias rpc_routine_arg_descriptor_t = UnsafePointer<rpc_routine_arg_descriptor>
struct rpc_routine_descriptor {
  var argc: CUnsignedInt
  var descr_count: CUnsignedInt
  var arg_descr: rpc_routine_arg_descriptor_t
  var max_reply_msg: CUnsignedInt
  init(argc: CUnsignedInt, descr_count: CUnsignedInt, arg_descr: rpc_routine_arg_descriptor_t, max_reply_msg: CUnsignedInt)
}
typealias rpc_routine_descriptor_t = UnsafePointer<rpc_routine_descriptor>
struct rpc_signature {
  var rd: rpc_routine_descriptor
  var rad: (rpc_routine_arg_descriptor)
  init(rd: rpc_routine_descriptor, rad: (rpc_routine_arg_descriptor))
}
struct rpc_subsystem {
  var reserved: COpaquePointer
  var start: mach_msg_id_t
  var end: mach_msg_id_t
  var maxsize: CUnsignedInt
  var base_addr: vm_address_t
  var routine: (rpc_routine_descriptor)
  var arg_descriptor: (rpc_routine_arg_descriptor)
  init(reserved: COpaquePointer, start: mach_msg_id_t, end: mach_msg_id_t, maxsize: CUnsignedInt, base_addr: vm_address_t, routine: (rpc_routine_descriptor), arg_descriptor: (rpc_routine_arg_descriptor))
}
typealias rpc_subsystem_t = UnsafePointer<rpc_subsystem>
struct rpcent {
  var r_name: UnsafePointer<CChar>
  var r_aliases: UnsafePointer<UnsafePointer<CChar>>
  var r_number: CInt
  init(r_name: UnsafePointer<CChar>, r_aliases: UnsafePointer<UnsafePointer<CChar>>, r_number: CInt)
}
func rresvport(_: CMutablePointer<CInt>) -> CInt
func rresvport(_: CMutablePointer<CInt>) -> CInt
func rresvport_af(_: CMutablePointer<CInt>, _: CInt) -> CInt
func rresvport_af(_: CMutablePointer<CInt>, _: CInt) -> CInt
typealias rsize_t = CUnsignedLong
struct rslvmulti_req {
  var sa: UnsafePointer<sockaddr>
  var llsa: UnsafePointer<UnsafePointer<sockaddr>>
  init(sa: UnsafePointer<sockaddr>, llsa: UnsafePointer<UnsafePointer<sockaddr>>)
}
struct rt_addrinfo {
  var rti_addrs: CInt
  var rti_info: (UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>)
  init(rti_addrs: CInt, rti_info: (UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>, UnsafePointer<sockaddr>))
}
struct rt_metrics {
  var rmx_locks: UInt32
  var rmx_mtu: UInt32
  var rmx_hopcount: UInt32
  var rmx_expire: Int32
  var rmx_recvpipe: UInt32
  var rmx_sendpipe: UInt32
  var rmx_ssthresh: UInt32
  var rmx_rtt: UInt32
  var rmx_rttvar: UInt32
  var rmx_pksent: UInt32
  var rmx_filler: (UInt32, UInt32, UInt32, UInt32)
  init(rmx_locks: UInt32, rmx_mtu: UInt32, rmx_hopcount: UInt32, rmx_expire: Int32, rmx_recvpipe: UInt32, rmx_sendpipe: UInt32, rmx_ssthresh: UInt32, rmx_rtt: UInt32, rmx_rttvar: UInt32, rmx_pksent: UInt32, rmx_filler: (UInt32, UInt32, UInt32, UInt32))
}
struct rt_msghdr {
  var rtm_msglen: u_short
  var rtm_version: u_char
  var rtm_type: u_char
  var rtm_index: u_short
  var rtm_flags: CInt
  var rtm_addrs: CInt
  var rtm_pid: pid_t
  var rtm_seq: CInt
  var rtm_errno: CInt
  var rtm_use: CInt
  var rtm_inits: UInt32
  var rtm_rmx: rt_metrics
  init(rtm_msglen: u_short, rtm_version: u_char, rtm_type: u_char, rtm_index: u_short, rtm_flags: CInt, rtm_addrs: CInt, rtm_pid: pid_t, rtm_seq: CInt, rtm_errno: CInt, rtm_use: CInt, rtm_inits: UInt32, rtm_rmx: rt_metrics)
}
struct rt_msghdr2 {
  var rtm_msglen: u_short
  var rtm_version: u_char
  var rtm_type: u_char
  var rtm_index: u_short
  var rtm_flags: CInt
  var rtm_addrs: CInt
  var rtm_refcnt: Int32
  var rtm_parentflags: CInt
  var rtm_reserved: CInt
  var rtm_use: CInt
  var rtm_inits: UInt32
  var rtm_rmx: rt_metrics
  init(rtm_msglen: u_short, rtm_version: u_char, rtm_type: u_char, rtm_index: u_short, rtm_flags: CInt, rtm_addrs: CInt, rtm_refcnt: Int32, rtm_parentflags: CInt, rtm_reserved: CInt, rtm_use: CInt, rtm_inits: UInt32, rtm_rmx: rt_metrics)
}
struct rtstat {
  var rts_badredirect: CShort
  var rts_dynamic: CShort
  var rts_newgateway: CShort
  var rts_unreach: CShort
  var rts_wildcard: CShort
  init(rts_badredirect: CShort, rts_dynamic: CShort, rts_newgateway: CShort, rts_unreach: CShort, rts_wildcard: CShort)
}
typealias rune_t = __darwin_rune_t
struct rusage {
  var ru_utime: timeval
  var ru_stime: timeval
  var ru_maxrss: CLong
  var ru_ixrss: CLong
  var ru_idrss: CLong
  var ru_isrss: CLong
  var ru_minflt: CLong
  var ru_majflt: CLong
  var ru_nswap: CLong
  var ru_inblock: CLong
  var ru_oublock: CLong
  var ru_msgsnd: CLong
  var ru_msgrcv: CLong
  var ru_nsignals: CLong
  var ru_nvcsw: CLong
  var ru_nivcsw: CLong
  init(ru_utime: timeval, ru_stime: timeval, ru_maxrss: CLong, ru_ixrss: CLong, ru_idrss: CLong, ru_isrss: CLong, ru_minflt: CLong, ru_majflt: CLong, ru_nswap: CLong, ru_inblock: CLong, ru_oublock: CLong, ru_msgsnd: CLong, ru_msgrcv: CLong, ru_nsignals: CLong, ru_nvcsw: CLong, ru_nivcsw: CLong)
}
typealias rusage_info_current = rusage_info_v3
typealias rusage_info_t = COpaquePointer
struct rusage_info_v0 {
  var ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ri_user_time: UInt64
  var ri_system_time: UInt64
  var ri_pkg_idle_wkups: UInt64
  var ri_interrupt_wkups: UInt64
  var ri_pageins: UInt64
  var ri_wired_size: UInt64
  var ri_resident_size: UInt64
  var ri_phys_footprint: UInt64
  var ri_proc_start_abstime: UInt64
  var ri_proc_exit_abstime: UInt64
  init(ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), ri_user_time: UInt64, ri_system_time: UInt64, ri_pkg_idle_wkups: UInt64, ri_interrupt_wkups: UInt64, ri_pageins: UInt64, ri_wired_size: UInt64, ri_resident_size: UInt64, ri_phys_footprint: UInt64, ri_proc_start_abstime: UInt64, ri_proc_exit_abstime: UInt64)
}
struct rusage_info_v1 {
  var ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ri_user_time: UInt64
  var ri_system_time: UInt64
  var ri_pkg_idle_wkups: UInt64
  var ri_interrupt_wkups: UInt64
  var ri_pageins: UInt64
  var ri_wired_size: UInt64
  var ri_resident_size: UInt64
  var ri_phys_footprint: UInt64
  var ri_proc_start_abstime: UInt64
  var ri_proc_exit_abstime: UInt64
  var ri_child_user_time: UInt64
  var ri_child_system_time: UInt64
  var ri_child_pkg_idle_wkups: UInt64
  var ri_child_interrupt_wkups: UInt64
  var ri_child_pageins: UInt64
  var ri_child_elapsed_abstime: UInt64
  init(ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), ri_user_time: UInt64, ri_system_time: UInt64, ri_pkg_idle_wkups: UInt64, ri_interrupt_wkups: UInt64, ri_pageins: UInt64, ri_wired_size: UInt64, ri_resident_size: UInt64, ri_phys_footprint: UInt64, ri_proc_start_abstime: UInt64, ri_proc_exit_abstime: UInt64, ri_child_user_time: UInt64, ri_child_system_time: UInt64, ri_child_pkg_idle_wkups: UInt64, ri_child_interrupt_wkups: UInt64, ri_child_pageins: UInt64, ri_child_elapsed_abstime: UInt64)
}
struct rusage_info_v2 {
  var ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ri_user_time: UInt64
  var ri_system_time: UInt64
  var ri_pkg_idle_wkups: UInt64
  var ri_interrupt_wkups: UInt64
  var ri_pageins: UInt64
  var ri_wired_size: UInt64
  var ri_resident_size: UInt64
  var ri_phys_footprint: UInt64
  var ri_proc_start_abstime: UInt64
  var ri_proc_exit_abstime: UInt64
  var ri_child_user_time: UInt64
  var ri_child_system_time: UInt64
  var ri_child_pkg_idle_wkups: UInt64
  var ri_child_interrupt_wkups: UInt64
  var ri_child_pageins: UInt64
  var ri_child_elapsed_abstime: UInt64
  var ri_diskio_bytesread: UInt64
  var ri_diskio_byteswritten: UInt64
  init(ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), ri_user_time: UInt64, ri_system_time: UInt64, ri_pkg_idle_wkups: UInt64, ri_interrupt_wkups: UInt64, ri_pageins: UInt64, ri_wired_size: UInt64, ri_resident_size: UInt64, ri_phys_footprint: UInt64, ri_proc_start_abstime: UInt64, ri_proc_exit_abstime: UInt64, ri_child_user_time: UInt64, ri_child_system_time: UInt64, ri_child_pkg_idle_wkups: UInt64, ri_child_interrupt_wkups: UInt64, ri_child_pageins: UInt64, ri_child_elapsed_abstime: UInt64, ri_diskio_bytesread: UInt64, ri_diskio_byteswritten: UInt64)
}
struct rusage_info_v3 {
  var ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ri_user_time: UInt64
  var ri_system_time: UInt64
  var ri_pkg_idle_wkups: UInt64
  var ri_interrupt_wkups: UInt64
  var ri_pageins: UInt64
  var ri_wired_size: UInt64
  var ri_resident_size: UInt64
  var ri_phys_footprint: UInt64
  var ri_proc_start_abstime: UInt64
  var ri_proc_exit_abstime: UInt64
  var ri_child_user_time: UInt64
  var ri_child_system_time: UInt64
  var ri_child_pkg_idle_wkups: UInt64
  var ri_child_interrupt_wkups: UInt64
  var ri_child_pageins: UInt64
  var ri_child_elapsed_abstime: UInt64
  var ri_diskio_bytesread: UInt64
  var ri_diskio_byteswritten: UInt64
  var ri_cpu_time_qos_default: UInt64
  var ri_cpu_time_qos_maintenance: UInt64
  var ri_cpu_time_qos_background: UInt64
  var ri_cpu_time_qos_utility: UInt64
  var ri_cpu_time_qos_legacy: UInt64
  var ri_cpu_time_qos_user_initiated: UInt64
  var ri_cpu_time_qos_user_interactive: UInt64
  var ri_billed_system_time: UInt64
  var ri_serviced_system_time: UInt64
  init(ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), ri_user_time: UInt64, ri_system_time: UInt64, ri_pkg_idle_wkups: UInt64, ri_interrupt_wkups: UInt64, ri_pageins: UInt64, ri_wired_size: UInt64, ri_resident_size: UInt64, ri_phys_footprint: UInt64, ri_proc_start_abstime: UInt64, ri_proc_exit_abstime: UInt64, ri_child_user_time: UInt64, ri_child_system_time: UInt64, ri_child_pkg_idle_wkups: UInt64, ri_child_interrupt_wkups: UInt64, ri_child_pageins: UInt64, ri_child_elapsed_abstime: UInt64, ri_diskio_bytesread: UInt64, ri_diskio_byteswritten: UInt64, ri_cpu_time_qos_default: UInt64, ri_cpu_time_qos_maintenance: UInt64, ri_cpu_time_qos_background: UInt64, ri_cpu_time_qos_utility: UInt64, ri_cpu_time_qos_legacy: UInt64, ri_cpu_time_qos_user_initiated: UInt64, ri_cpu_time_qos_user_interactive: UInt64, ri_billed_system_time: UInt64, ri_serviced_system_time: UInt64)
}
func ruserok(_: CString, _: CInt, _: CString, _: CString) -> CInt
func ruserok(_: CString, _: CInt, _: CString, _: CString) -> CInt
typealias sa_family_t = __uint8_t
func safe_gets(_: CMutablePointer<CChar>, _: CMutablePointer<CChar>, _: CInt)
func safe_gets(_: CMutablePointer<CChar>, _: CMutablePointer<CChar>, _: CInt)
@availability(*, unavailable) func sbrk(_: CInt) -> COpaquePointer
@availability(*, unavailable) func sbrk(_: CInt) -> COpaquePointer
struct sbuf {
  var s_buf: UnsafePointer<CChar>
  var s_unused: COpaquePointer
  var s_size: CInt
  var s_len: CInt
  var s_flags: CInt
  init(s_buf: UnsafePointer<CChar>, s_unused: COpaquePointer, s_size: CInt, s_len: CInt, s_flags: CInt)
}
func sbuf_bcat(_: CMutablePointer<sbuf>, _: CConstVoidPointer, _: UInt) -> CInt
func sbuf_bcat(_: CMutablePointer<sbuf>, _: CConstVoidPointer, _: UInt) -> CInt
func sbuf_bcpy(_: CMutablePointer<sbuf>, _: CConstVoidPointer, _: UInt) -> CInt
func sbuf_bcpy(_: CMutablePointer<sbuf>, _: CConstVoidPointer, _: UInt) -> CInt
func sbuf_cat(_: CMutablePointer<sbuf>, _: CString) -> CInt
func sbuf_cat(_: CMutablePointer<sbuf>, _: CString) -> CInt
func sbuf_clear(_: CMutablePointer<sbuf>)
func sbuf_clear(_: CMutablePointer<sbuf>)
func sbuf_cpy(_: CMutablePointer<sbuf>, _: CString) -> CInt
func sbuf_cpy(_: CMutablePointer<sbuf>, _: CString) -> CInt
func sbuf_data(_: CMutablePointer<sbuf>) -> UnsafePointer<CChar>
func sbuf_data(_: CMutablePointer<sbuf>) -> UnsafePointer<CChar>
func sbuf_delete(_: CMutablePointer<sbuf>)
func sbuf_delete(_: CMutablePointer<sbuf>)
func sbuf_done(_: CMutablePointer<sbuf>) -> CInt
func sbuf_done(_: CMutablePointer<sbuf>) -> CInt
func sbuf_finish(_: CMutablePointer<sbuf>)
func sbuf_finish(_: CMutablePointer<sbuf>)
func sbuf_len(_: CMutablePointer<sbuf>) -> CInt
func sbuf_len(_: CMutablePointer<sbuf>) -> CInt
func sbuf_new(_: CMutablePointer<sbuf>, _: CMutablePointer<CChar>, _: CInt, _: CInt) -> UnsafePointer<sbuf>
func sbuf_new(_: CMutablePointer<sbuf>, _: CMutablePointer<CChar>, _: CInt, _: CInt) -> UnsafePointer<sbuf>
func sbuf_overflowed(_: CMutablePointer<sbuf>) -> CInt
func sbuf_overflowed(_: CMutablePointer<sbuf>) -> CInt
func sbuf_putc(_: CMutablePointer<sbuf>, _: CInt) -> CInt
func sbuf_putc(_: CMutablePointer<sbuf>, _: CInt) -> CInt
func sbuf_setpos(_: CMutablePointer<sbuf>, _: CInt) -> CInt
func sbuf_setpos(_: CMutablePointer<sbuf>, _: CInt) -> CInt
func sbuf_trim(_: CMutablePointer<sbuf>) -> CInt
func sbuf_trim(_: CMutablePointer<sbuf>) -> CInt
func sbuf_vprintf(_: CMutablePointer<sbuf>, _: CString, _: CVaListPointer) -> CInt
func sbuf_vprintf(_: CMutablePointer<sbuf>, _: CString, _: CVaListPointer) -> CInt
func scalb(_: CDouble, _: CDouble) -> CDouble
func scalb(_: CDouble, _: CDouble) -> CDouble
func scalbln(_: CDouble, _: CLong) -> CDouble
func scalbln(_: CDouble, _: CLong) -> CDouble
func scalblnf(_: CFloat, _: CLong) -> CFloat
func scalblnf(_: CFloat, _: CLong) -> CFloat
func scalbn(_: CDouble, _: CInt) -> CDouble
func scalbn(_: CDouble, _: CInt) -> CDouble
func scalbnf(_: CFloat, _: CInt) -> CFloat
func scalbnf(_: CFloat, _: CInt) -> CFloat
func scandir_b(_: CString, _: CMutablePointer<UnsafePointer<UnsafePointer<dirent>>>, _: ((CConstPointer<dirent>) -> CInt)!, _: ((CMutablePointer<UnsafePointer<dirent>>, CMutablePointer<UnsafePointer<dirent>>) -> CInt)!) -> CInt
func scandir_b(_: CString, _: CMutablePointer<UnsafePointer<UnsafePointer<dirent>>>, _: ((CConstPointer<dirent>) -> CInt)!, _: ((CMutablePointer<UnsafePointer<dirent>>, CMutablePointer<UnsafePointer<dirent>>) -> CInt)!) -> CInt
func sched_get_priority_max(_: CInt) -> CInt
func sched_get_priority_max(_: CInt) -> CInt
func sched_get_priority_min(_: CInt) -> CInt
func sched_get_priority_min(_: CInt) -> CInt
struct sched_param {
  var sched_priority: CInt
  var __opaque: (CChar, CChar, CChar, CChar)
  init(sched_priority: CInt, __opaque: (CChar, CChar, CChar, CChar))
}
func sched_yield() -> CInt
func sched_yield() -> CInt
func searchfs(_: CString, _: CMutablePointer<fssearchblock>, _: CMutablePointer<CUnsignedLong>, _: CUnsignedInt, _: CUnsignedInt, _: CMutablePointer<searchstate>) -> CInt
func searchfs(_: CString, _: CMutablePointer<fssearchblock>, _: CMutablePointer<CUnsignedLong>, _: CUnsignedInt, _: CUnsignedInt, _: CMutablePointer<searchstate>) -> CInt
struct searchstate {
  var ss_union_flags: UInt32
  var ss_union_layer: UInt32
  var ss_fsstate: (u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char)
  init(ss_union_flags: UInt32, ss_union_layer: UInt32, ss_fsstate: (u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char))
}
struct security_token_t {
  var val: (CUnsignedInt, CUnsignedInt)
  init(val: (CUnsignedInt, CUnsignedInt))
}
func seed48(_: CMutablePointer<CUnsignedShort>) -> UnsafePointer<CUnsignedShort>
func seed48(_: CMutablePointer<CUnsignedShort>) -> UnsafePointer<CUnsignedShort>
func seekdir(_: CMutablePointer<DIR>, _: CLong)
func seekdir(_: CMutablePointer<DIR>, _: CLong)
typealias segsz_t = Int32
func select(_: CInt, _: CMutablePointer<fd_set>, _: CMutablePointer<fd_set>, _: CMutablePointer<fd_set>, _: CMutablePointer<timeval>) -> CInt
func select(_: CInt, _: CMutablePointer<fd_set>, _: CMutablePointer<fd_set>, _: CMutablePointer<fd_set>, _: CMutablePointer<timeval>) -> CInt
struct sem {
  var semval: CUnsignedShort
  var sempid: pid_t
  var semncnt: CUnsignedShort
  var semzcnt: CUnsignedShort
  init(semval: CUnsignedShort, sempid: pid_t, semncnt: CUnsignedShort, semzcnt: CUnsignedShort)
}
func sem_close(_: CMutablePointer<sem_t>) -> CInt
func sem_close(_: CMutablePointer<sem_t>) -> CInt
@availability(*, unavailable) func sem_destroy(_: CMutablePointer<sem_t>) -> CInt
@availability(*, unavailable) func sem_destroy(_: CMutablePointer<sem_t>) -> CInt
@availability(*, unavailable) func sem_getvalue(_: CMutablePointer<sem_t>, _: CMutablePointer<CInt>) -> CInt
@availability(*, unavailable) func sem_getvalue(_: CMutablePointer<sem_t>, _: CMutablePointer<CInt>) -> CInt
@availability(*, unavailable) func sem_init(_: CMutablePointer<sem_t>, _: CInt, _: CUnsignedInt) -> CInt
@availability(*, unavailable) func sem_init(_: CMutablePointer<sem_t>, _: CInt, _: CUnsignedInt) -> CInt
func sem_post(_: CMutablePointer<sem_t>) -> CInt
func sem_post(_: CMutablePointer<sem_t>) -> CInt
typealias sem_t = CInt
func sem_trywait(_: CMutablePointer<sem_t>) -> CInt
func sem_trywait(_: CMutablePointer<sem_t>) -> CInt
func sem_unlink(_: CString) -> CInt
func sem_unlink(_: CString) -> CInt
func sem_wait(_: CMutablePointer<sem_t>) -> CInt
func sem_wait(_: CMutablePointer<sem_t>) -> CInt
func semaphore_create(task: task_t, semaphore: CMutablePointer<semaphore_t>, policy: CInt, value: CInt) -> kern_return_t
func semaphore_create(task: task_t, semaphore: CMutablePointer<semaphore_t>, policy: CInt, value: CInt) -> kern_return_t
func semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t
func semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t
typealias semaphore_port_t = semaphore_t
func semaphore_signal(semaphore: semaphore_t) -> kern_return_t
func semaphore_signal(semaphore: semaphore_t) -> kern_return_t
func semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t
func semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t
func semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t
func semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t
typealias semaphore_t = mach_port_t
func semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t) -> kern_return_t
func semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t) -> kern_return_t
func semaphore_timedwait_signal(wait_semaphore: semaphore_t, signal_semaphore: semaphore_t, wait_time: mach_timespec_t) -> kern_return_t
func semaphore_timedwait_signal(wait_semaphore: semaphore_t, signal_semaphore: semaphore_t, wait_time: mach_timespec_t) -> kern_return_t
func semaphore_wait(semaphore: semaphore_t) -> kern_return_t
func semaphore_wait(semaphore: semaphore_t) -> kern_return_t
func semaphore_wait_signal(wait_semaphore: semaphore_t, signal_semaphore: semaphore_t) -> kern_return_t
func semaphore_wait_signal(wait_semaphore: semaphore_t, signal_semaphore: semaphore_t) -> kern_return_t
struct sembuf {
  var sem_num: CUnsignedShort
  var sem_op: CShort
  var sem_flg: CShort
  init(sem_num: CUnsignedShort, sem_op: CShort, sem_flg: CShort)
}
func semget(_: key_t, _: CInt, _: CInt) -> CInt
func semget(_: key_t, _: CInt, _: CInt) -> CInt
func semop(_: CInt, _: CMutablePointer<sembuf>, _: UInt) -> CInt
func semop(_: CInt, _: CMutablePointer<sembuf>, _: UInt) -> CInt
func send(_: CInt, _: CConstVoidPointer, _: UInt, _: CInt) -> Int
func send(_: CInt, _: CConstVoidPointer, _: UInt, _: CInt) -> Int
func sendfile(_: CInt, _: CInt, _: off_t, _: CMutablePointer<off_t>, _: CMutablePointer<sf_hdtr>, _: CInt) -> CInt
func sendfile(_: CInt, _: CInt, _: off_t, _: CMutablePointer<off_t>, _: CMutablePointer<sf_hdtr>, _: CInt) -> CInt
func sendmsg(_: CInt, _: CConstPointer<msghdr>, _: CInt) -> Int
func sendmsg(_: CInt, _: CConstPointer<msghdr>, _: CInt) -> Int
func sendto(_: CInt, _: CConstVoidPointer, _: UInt, _: CInt, _: CConstPointer<sockaddr>, _: socklen_t) -> Int
func sendto(_: CInt, _: CConstVoidPointer, _: UInt, _: CInt, _: CConstPointer<sockaddr>, _: socklen_t) -> Int
struct servent {
  var s_name: UnsafePointer<CChar>
  var s_aliases: UnsafePointer<UnsafePointer<CChar>>
  var s_port: CInt
  var s_proto: UnsafePointer<CChar>
  init(s_name: UnsafePointer<CChar>, s_aliases: UnsafePointer<UnsafePointer<CChar>>, s_port: CInt, s_proto: UnsafePointer<CChar>)
}
func set_dp_control_port(host: host_priv_t, control_port: mach_port_t) -> kern_return_t
func set_dp_control_port(host: host_priv_t, control_port: mach_port_t) -> kern_return_t
func setac()
func setac()
func setattrlist(_: CString, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedInt) -> CInt
func setattrlist(_: CString, _: CMutableVoidPointer, _: CMutableVoidPointer, _: UInt, _: CUnsignedInt) -> CInt
func setauclass()
func setauclass()
func setaudit(_: CConstPointer<auditinfo>) -> CInt
func setaudit(_: CConstPointer<auditinfo>) -> CInt
func setaudit_addr(_: CConstPointer<auditinfo_addr>, _: CInt) -> CInt
func setaudit_addr(_: CConstPointer<auditinfo_addr>, _: CInt) -> CInt
func setauevent()
func setauevent()
func setauid(_: CConstPointer<au_id_t>) -> CInt
func setauid(_: CConstPointer<au_id_t>) -> CInt
func setauuser()
func setauuser()
func setbuf(_: CMutablePointer<FILE>, _: CMutablePointer<CChar>)
func setbuf(_: CMutablePointer<FILE>, _: CMutablePointer<CChar>)
func setbuffer(_: CMutablePointer<FILE>, _: CMutablePointer<CChar>, _: CInt)
func setbuffer(_: CMutablePointer<FILE>, _: CMutablePointer<CChar>, _: CInt)
func setdomainname(_: CString, _: CInt) -> CInt
func setdomainname(_: CString, _: CInt) -> CInt
func setegid(_: gid_t) -> CInt
func setegid(_: gid_t) -> CInt
func setenv(_: CString, _: CString, _: CInt) -> CInt
func setenv(_: CString, _: CString, _: CInt) -> CInt
func seteuid(_: uid_t) -> CInt
func seteuid(_: uid_t) -> CInt
func setgid(_: gid_t) -> CInt
func setgid(_: gid_t) -> CInt
func setgrent()
func setgrent()
func setgrfile(_: CString)
func setgrfile(_: CString)
func setgroupent(_: CInt) -> CInt
func setgroupent(_: CInt) -> CInt
func setgroups(_: CInt, _: CConstPointer<gid_t>) -> CInt
func setgroups(_: CInt, _: CConstPointer<gid_t>) -> CInt
func sethostent(_: CInt)
func sethostent(_: CInt)
func sethostid(_: CLong)
func sethostid(_: CLong)
func sethostname(_: CString, _: CInt) -> CInt
func sethostname(_: CString, _: CInt) -> CInt
func setiopolicy_np(_: CInt, _: CInt, _: CInt) -> CInt
func setiopolicy_np(_: CInt, _: CInt, _: CInt) -> CInt
func setipv4sourcefilter(_: CInt, _: in_addr, _: in_addr, _: UInt32, _: UInt32, _: CMutablePointer<in_addr>) -> CInt
func setipv4sourcefilter(_: CInt, _: in_addr, _: in_addr, _: UInt32, _: UInt32, _: CMutablePointer<in_addr>) -> CInt
func setitimer(_: CInt, _: CConstPointer<itimerval>, _: CMutablePointer<itimerval>) -> CInt
func setitimer(_: CInt, _: CConstPointer<itimerval>, _: CMutablePointer<itimerval>) -> CInt
func setjmp(_: CMutablePointer<CInt>) -> CInt
func setjmp(_: CMutablePointer<CInt>) -> CInt
func setkey(_: CString)
func setkey(_: CString)
func setlcid(pid: pid_t, lcid: pid_t) -> CInt
func setlcid(pid: pid_t, lcid: pid_t) -> CInt
func setlinebuf(_: CMutablePointer<FILE>) -> CInt
func setlinebuf(_: CMutablePointer<FILE>) -> CInt
func setlocale(_: CInt, _: CString) -> UnsafePointer<CChar>
func setlocale(_: CInt, _: CString) -> UnsafePointer<CChar>
func setlogin(_: CString) -> CInt
func setlogin(_: CString) -> CInt
func setlogmask(_: CInt) -> CInt
func setlogmask(_: CInt) -> CInt
func setmode(_: CString) -> COpaquePointer
func setmode(_: CString) -> COpaquePointer
func setnetent(_: CInt)
func setnetent(_: CInt)
func setnetgrent(_: CString)
func setnetgrent(_: CString)
func setpassent(_: CInt) -> CInt
func setpassent(_: CInt) -> CInt
func setpgid(_: pid_t, _: pid_t) -> CInt
func setpgid(_: pid_t, _: pid_t) -> CInt
func setpgrp() -> pid_t
func setpgrp() -> pid_t
func setpriority(_: CInt, _: id_t, _: CInt) -> CInt
func setpriority(_: CInt, _: id_t, _: CInt) -> CInt
func setprogname(_: CString)
func setprogname(_: CString)
func setprotoent(_: CInt)
func setprotoent(_: CInt)
func setpwent()
func setpwent()
func setregid(_: gid_t, _: gid_t) -> CInt
func setregid(_: gid_t, _: gid_t) -> CInt
func setreuid(_: uid_t, _: uid_t) -> CInt
func setreuid(_: uid_t, _: uid_t) -> CInt
func setrgid(_: gid_t) -> CInt
func setrgid(_: gid_t) -> CInt
func setrlimit(_: CInt, _: CConstPointer<rlimit>) -> CInt
func setrlimit(_: CInt, _: CConstPointer<rlimit>) -> CInt
func setrpcent(stayopen: CInt)
func setrpcent(stayopen: CInt)
func setruid(_: uid_t) -> CInt
func setruid(_: uid_t) -> CInt
func setservent(_: CInt)
func setservent(_: CInt)
func setsgroups_np(_: CInt, _: CConstPointer<CUnsignedChar>) -> CInt
func setsgroups_np(_: CInt, _: CConstPointer<CUnsignedChar>) -> CInt
func setsid() -> pid_t
func setsid() -> pid_t
func setsockopt(_: CInt, _: CInt, _: CInt, _: CConstVoidPointer, _: socklen_t) -> CInt
func setsockopt(_: CInt, _: CInt, _: CInt, _: CConstVoidPointer, _: socklen_t) -> CInt
func setsourcefilter(_: CInt, _: UInt32, _: CMutablePointer<sockaddr>, _: socklen_t, _: UInt32, _: UInt32, _: CMutablePointer<sockaddr_storage>) -> CInt
func setsourcefilter(_: CInt, _: UInt32, _: CMutablePointer<sockaddr>, _: socklen_t, _: UInt32, _: UInt32, _: CMutablePointer<sockaddr_storage>) -> CInt
func setstate(_: CString) -> UnsafePointer<CChar>
func setstate(_: CString) -> UnsafePointer<CChar>
func settimeofday(_: CConstPointer<timeval>, _: CConstPointer<timezone>) -> CInt
func settimeofday(_: CConstPointer<timeval>, _: CConstPointer<timezone>) -> CInt
func setuid(_: uid_t) -> CInt
func setuid(_: uid_t) -> CInt
func setusershell()
func setusershell()
func setutxent()
func setutxent()
func setutxent_wtmp(_: CInt)
func setutxent_wtmp(_: CInt)
func setvbuf(_: CMutablePointer<FILE>, _: CMutablePointer<CChar>, _: CInt, _: UInt) -> CInt
func setvbuf(_: CMutablePointer<FILE>, _: CMutablePointer<CChar>, _: CInt, _: UInt) -> CInt
func setwgroups_np(_: CInt, _: CConstPointer<CUnsignedChar>) -> CInt
func setwgroups_np(_: CInt, _: CConstPointer<CUnsignedChar>) -> CInt
struct sf_hdtr {
  var headers: UnsafePointer<iovec>
  var hdr_cnt: CInt
  var trailers: UnsafePointer<iovec>
  var trl_cnt: CInt
  init(headers: UnsafePointer<iovec>, hdr_cnt: CInt, trailers: UnsafePointer<iovec>, trl_cnt: CInt)
}
var shadow: Int {
  get {
    return
  }
}
struct shared_file_mapping_np {
  var sfm_address: mach_vm_address_t
  var sfm_size: mach_vm_size_t
  var sfm_file_offset: mach_vm_offset_t
  var sfm_max_prot: vm_prot_t
  var sfm_init_prot: vm_prot_t
  init(sfm_address: mach_vm_address_t, sfm_size: mach_vm_size_t, sfm_file_offset: mach_vm_offset_t, sfm_max_prot: vm_prot_t, sfm_init_prot: vm_prot_t)
}
func shared_region_check_np(startaddress: CMutablePointer<UInt64>) -> CInt
func shared_region_check_np(startaddress: CMutablePointer<UInt64>) -> CInt
func shared_region_map_np(fd: CInt, mappingCount: UInt32, mappings: CConstPointer<shared_file_mapping_np>) -> CInt
func shared_region_map_np(fd: CInt, mappingCount: UInt32, mappings: CConstPointer<shared_file_mapping_np>) -> CInt
func shared_region_slide_np() -> CInt
func shared_region_slide_np() -> CInt
func shm_unlink(_: CString) -> CInt
func shm_unlink(_: CString) -> CInt
func shmat(_: CInt, _: CConstVoidPointer, _: CInt) -> COpaquePointer
func shmat(_: CInt, _: CConstVoidPointer, _: CInt) -> COpaquePointer
typealias shmatt_t = CUnsignedShort
func shmctl(_: CInt, _: CInt, _: CMutablePointer<__shmid_ds_new>) -> CInt
func shmctl(_: CInt, _: CInt, _: CMutablePointer<__shmid_ds_new>) -> CInt
func shmdt(_: CConstVoidPointer) -> CInt
func shmdt(_: CConstVoidPointer) -> CInt
func shmget(_: key_t, _: UInt, _: CInt) -> CInt
func shmget(_: key_t, _: UInt, _: CInt) -> CInt
func shutdown(_: CInt, _: CInt) -> CInt
func shutdown(_: CInt, _: CInt) -> CInt
typealias sig_atomic_t = CInt
func sigaction(_: CInt, _: CConstPointer<sigaction>, _: CMutablePointer<sigaction>) -> CInt
struct sigaction {
  var sa_mask: sigset_t
  var sa_flags: CInt
  init(sa_mask: sigset_t, sa_flags: CInt)
}
func sigaction(_: CInt, _: CConstPointer<sigaction>, _: CMutablePointer<sigaction>) -> CInt
func sigaddset(_: CMutablePointer<sigset_t>, _: CInt) -> CInt
func sigaddset(_: CMutablePointer<sigset_t>, _: CInt) -> CInt
func sigaltstack(_: CConstPointer<stack_t>, _: CMutablePointer<stack_t>) -> CInt
func sigaltstack(_: CConstPointer<stack_t>, _: CMutablePointer<stack_t>) -> CInt
func sigblock(_: CInt) -> CInt
func sigblock(_: CInt) -> CInt
func sigdelset(_: CMutablePointer<sigset_t>, _: CInt) -> CInt
func sigdelset(_: CMutablePointer<sigset_t>, _: CInt) -> CInt
func sigemptyset(_: CMutablePointer<sigset_t>) -> CInt
func sigemptyset(_: CMutablePointer<sigset_t>) -> CInt
struct sigevent {
  var sigev_notify: CInt
  var sigev_signo: CInt
  var sigev_notify_attributes: UnsafePointer<pthread_attr_t>
  init(sigev_notify: CInt, sigev_signo: CInt, sigev_notify_attributes: UnsafePointer<pthread_attr_t>)
}
func sigfillset(_: CMutablePointer<sigset_t>) -> CInt
func sigfillset(_: CMutablePointer<sigset_t>) -> CInt
func sighold(_: CInt) -> CInt
func sighold(_: CInt) -> CInt
func sigignore(_: CInt) -> CInt
func sigignore(_: CInt) -> CInt
typealias siginfo_t = __siginfo
func siginterrupt(_: CInt, _: CInt) -> CInt
func siginterrupt(_: CInt, _: CInt) -> CInt
func sigismember(_: CConstPointer<sigset_t>, _: CInt) -> CInt
func sigismember(_: CConstPointer<sigset_t>, _: CInt) -> CInt
typealias sigjmp_buf = (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
@noreturn func siglongjmp(_: CMutablePointer<CInt>, _: CInt)
@noreturn func siglongjmp(_: CMutablePointer<CInt>, _: CInt)
var signgam: CInt
func significand(_: CDouble) -> CDouble
func significand(_: CDouble) -> CDouble
func sigpause(_: CInt) -> CInt
func sigpause(_: CInt) -> CInt
func sigpending(_: CMutablePointer<sigset_t>) -> CInt
func sigpending(_: CMutablePointer<sigset_t>) -> CInt
func sigprocmask(_: CInt, _: CConstPointer<sigset_t>, _: CMutablePointer<sigset_t>) -> CInt
func sigprocmask(_: CInt, _: CConstPointer<sigset_t>, _: CMutablePointer<sigset_t>) -> CInt
func sigrelse(_: CInt) -> CInt
func sigrelse(_: CInt) -> CInt
typealias sigset_t = __darwin_sigset_t
func sigsetjmp(_: CMutablePointer<CInt>, _: CInt) -> CInt
func sigsetjmp(_: CMutablePointer<CInt>, _: CInt) -> CInt
func sigsetmask(_: CInt) -> CInt
func sigsetmask(_: CInt) -> CInt
struct sigstack {
  var ss_sp: UnsafePointer<CChar>
  var ss_onstack: CInt
  init(ss_sp: UnsafePointer<CChar>, ss_onstack: CInt)
}
func sigsuspend(_: CConstPointer<sigset_t>) -> CInt
func sigsuspend(_: CConstPointer<sigset_t>) -> CInt
struct sigvec {
  var sv_mask: CInt
  var sv_flags: CInt
  init(sv_mask: CInt, sv_flags: CInt)
}
func sigvec(_: CInt, _: CMutablePointer<sigvec>, _: CMutablePointer<sigvec>) -> CInt
func sigvec(_: CInt, _: CMutablePointer<sigvec>, _: CMutablePointer<sigvec>) -> CInt
func sigwait(_: CConstPointer<sigset_t>, _: CMutablePointer<CInt>) -> CInt
func sigwait(_: CConstPointer<sigset_t>, _: CMutablePointer<CInt>) -> CInt
func sin(_: CDouble) -> CDouble
func sin(_: CDouble) -> CDouble
func sinf(_: CFloat) -> CFloat
func sinf(_: CFloat) -> CFloat
func sinh(_: CDouble) -> CDouble
func sinh(_: CDouble) -> CDouble
func sinhf(_: CFloat) -> CFloat
func sinhf(_: CFloat) -> CFloat
typealias size_t = UInt
func sleep(_: CUnsignedInt) -> CUnsignedInt
func sleep(_: CUnsignedInt) -> CUnsignedInt
typealias sleep_type_t = CInt
func slot_name(_: cpu_type_t, _: cpu_subtype_t, _: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>)
func slot_name(_: cpu_type_t, _: cpu_subtype_t, _: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<UnsafePointer<CChar>>)
typealias so_gen_t = u_quad_t
struct so_np_extensions {
  var npx_flags: UInt32
  var npx_mask: UInt32
  init(npx_flags: UInt32, npx_mask: UInt32)
}
struct sockaddr {
  var sa_len: __uint8_t
  var sa_family: sa_family_t
  var sa_data: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(sa_len: __uint8_t, sa_family: sa_family_t, sa_data: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct sockaddr_ctl {
  var sc_len: u_char
  var sc_family: u_char
  var ss_sysaddr: UInt16
  var sc_id: UInt32
  var sc_unit: UInt32
  var sc_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32)
  init(sc_len: u_char, sc_family: u_char, ss_sysaddr: UInt16, sc_id: UInt32, sc_unit: UInt32, sc_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32))
}
struct sockaddr_in {
  var sin_len: __uint8_t
  var sin_family: sa_family_t
  var sin_port: in_port_t
  var sin_addr: in_addr
  var sin_zero: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(sin_len: __uint8_t, sin_family: sa_family_t, sin_port: in_port_t, sin_addr: in_addr, sin_zero: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct sockaddr_in6 {
  var sin6_len: __uint8_t
  var sin6_family: sa_family_t
  var sin6_port: in_port_t
  var sin6_flowinfo: __uint32_t
  var sin6_addr: in6_addr
  var sin6_scope_id: __uint32_t
  init(sin6_len: __uint8_t, sin6_family: sa_family_t, sin6_port: in_port_t, sin6_flowinfo: __uint32_t, sin6_addr: in6_addr, sin6_scope_id: __uint32_t)
}
struct sockaddr_storage {
  var ss_len: __uint8_t
  var ss_family: sa_family_t
  var __ss_pad1: (CChar, CChar, CChar, CChar, CChar, CChar)
  var __ss_align: __int64_t
  var __ss_pad2: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(ss_len: __uint8_t, ss_family: sa_family_t, __ss_pad1: (CChar, CChar, CChar, CChar, CChar, CChar), __ss_align: __int64_t, __ss_pad2: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
struct sockaddr_sys {
  var ss_len: u_char
  var ss_family: u_char
  var ss_sysaddr: UInt16
  var ss_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(ss_len: u_char, ss_family: u_char, ss_sysaddr: UInt16, ss_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
struct sockaddr_un {
  var sun_len: CUnsignedChar
  var sun_family: sa_family_t
  var sun_path: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(sun_len: CUnsignedChar, sun_family: sa_family_t, sun_path: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
func sockatmark(_: CInt) -> CInt
func sockatmark(_: CInt) -> CInt
struct sockbuf_info {
  var sbi_cc: UInt32
  var sbi_hiwat: UInt32
  var sbi_mbcnt: UInt32
  var sbi_mbmax: UInt32
  var sbi_lowat: UInt32
  var sbi_flags: CShort
  var sbi_timeo: CShort
  init(sbi_cc: UInt32, sbi_hiwat: UInt32, sbi_mbcnt: UInt32, sbi_mbmax: UInt32, sbi_lowat: UInt32, sbi_flags: CShort, sbi_timeo: CShort)
}
func socket(_: CInt, _: CInt, _: CInt) -> CInt
func socket(_: CInt, _: CInt, _: CInt) -> CInt
struct socket_fdinfo {
  var pfi: proc_fileinfo
  var psi: socket_info
  init(pfi: proc_fileinfo, psi: socket_info)
}
struct socket_info {
  var soi_stat: vinfo_stat
  var soi_so: UInt64
  var soi_pcb: UInt64
  var soi_type: CInt
  var soi_protocol: CInt
  var soi_family: CInt
  var soi_options: CShort
  var soi_linger: CShort
  var soi_state: CShort
  var soi_qlen: CShort
  var soi_incqlen: CShort
  var soi_qlimit: CShort
  var soi_timeo: CShort
  var soi_error: u_short
  var soi_oobmark: UInt32
  var soi_rcv: sockbuf_info
  var soi_snd: sockbuf_info
  var soi_kind: CInt
  var rfu_1: UInt32
  init(soi_stat: vinfo_stat, soi_so: UInt64, soi_pcb: UInt64, soi_type: CInt, soi_protocol: CInt, soi_family: CInt, soi_options: CShort, soi_linger: CShort, soi_state: CShort, soi_qlen: CShort, soi_incqlen: CShort, soi_qlimit: CShort, soi_timeo: CShort, soi_error: u_short, soi_oobmark: UInt32, soi_rcv: sockbuf_info, soi_snd: sockbuf_info, soi_kind: CInt, rfu_1: UInt32)
}
typealias socket_t = COpaquePointer
func socketpair(_: CInt, _: CInt, _: CInt, _: CMutablePointer<CInt>) -> CInt
func socketpair(_: CInt, _: CInt, _: CInt, _: CMutablePointer<CInt>) -> CInt
typealias socklen_t = __darwin_socklen_t
typealias sockopt_t = COpaquePointer
struct sockproto {
  var sp_family: __uint16_t
  var sp_protocol: __uint16_t
  init(sp_family: __uint16_t, sp_protocol: __uint16_t)
}
typealias speed_t = CUnsignedLong
struct speedtab {
  var sp_speed: CInt
  var sp_code: CInt
  init(sp_speed: CInt, sp_code: CInt)
}
func sqrt(_: CDouble) -> CDouble
func sqrt(_: CDouble) -> CDouble
func sqrtf(_: CFloat) -> CFloat
func sqrtf(_: CFloat) -> CFloat
func sradixsort(_: CMutablePointer<UnsafePointer<CUnsignedChar>>, _: CInt, _: CConstPointer<CUnsignedChar>, _: CUnsignedInt) -> CInt
func sradixsort(_: CMutablePointer<UnsafePointer<CUnsignedChar>>, _: CInt, _: CConstPointer<CUnsignedChar>, _: CUnsignedInt) -> CInt
func srand(_: CUnsignedInt)
func srand(_: CUnsignedInt)
func srand48(_: CLong)
func srand48(_: CLong)
func sranddev()
func sranddev()
func srandom(_: CUnsignedInt)
func srandom(_: CUnsignedInt)
func srandomdev()
func srandomdev()
typealias ssize_t = Int
typealias stack_t = __darwin_sigaltstack
struct stat {
  var st_dev: dev_t
  var st_mode: mode_t
  var st_nlink: nlink_t
  var st_ino: __darwin_ino64_t
  var st_uid: uid_t
  var st_gid: gid_t
  var st_rdev: dev_t
  var st_atimespec: timespec
  var st_mtimespec: timespec
  var st_ctimespec: timespec
  var st_birthtimespec: timespec
  var st_size: off_t
  var st_blocks: blkcnt_t
  var st_blksize: blksize_t
  var st_flags: __uint32_t
  var st_gen: __uint32_t
  var st_lspare: __int32_t
  var st_qspare: (__int64_t, __int64_t)
  init(st_dev: dev_t, st_mode: mode_t, st_nlink: nlink_t, st_ino: __darwin_ino64_t, st_uid: uid_t, st_gid: gid_t, st_rdev: dev_t, st_atimespec: timespec, st_mtimespec: timespec, st_ctimespec: timespec, st_birthtimespec: timespec, st_size: off_t, st_blocks: blkcnt_t, st_blksize: blksize_t, st_flags: __uint32_t, st_gen: __uint32_t, st_lspare: __int32_t, st_qspare: (__int64_t, __int64_t))
}
func stat(_: CString, _: CMutablePointer<stat>) -> CInt
func stat(_: CString, _: CMutablePointer<stat>) -> CInt
func stat64(_: CString, _: CMutablePointer<stat64>) -> CInt
struct stat64 {
  var st_dev: dev_t
  var st_mode: mode_t
  var st_nlink: nlink_t
  var st_ino: __darwin_ino64_t
  var st_uid: uid_t
  var st_gid: gid_t
  var st_rdev: dev_t
  var st_atimespec: timespec
  var st_mtimespec: timespec
  var st_ctimespec: timespec
  var st_birthtimespec: timespec
  var st_size: off_t
  var st_blocks: blkcnt_t
  var st_blksize: blksize_t
  var st_flags: __uint32_t
  var st_gen: __uint32_t
  var st_lspare: __int32_t
  var st_qspare: (__int64_t, __int64_t)
  init(st_dev: dev_t, st_mode: mode_t, st_nlink: nlink_t, st_ino: __darwin_ino64_t, st_uid: uid_t, st_gid: gid_t, st_rdev: dev_t, st_atimespec: timespec, st_mtimespec: timespec, st_ctimespec: timespec, st_birthtimespec: timespec, st_size: off_t, st_blocks: blkcnt_t, st_blksize: blksize_t, st_flags: __uint32_t, st_gen: __uint32_t, st_lspare: __int32_t, st_qspare: (__int64_t, __int64_t))
}
func stat64(_: CString, _: CMutablePointer<stat64>) -> CInt
func statfs(_: CString, _: CMutablePointer<statfs>) -> CInt
func statfs(_: CString, _: CMutablePointer<statfs>) -> CInt
struct statfs {
  var f_bsize: UInt32
  var f_iosize: Int32
  var f_blocks: UInt64
  var f_bfree: UInt64
  var f_bavail: UInt64
  var f_files: UInt64
  var f_ffree: UInt64
  var f_fsid: fsid_t
  var f_owner: uid_t
  var f_type: UInt32
  var f_flags: UInt32
  var f_fssubtype: UInt32
  var f_fstypename: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_mntonname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_mntfromname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(f_bsize: UInt32, f_iosize: Int32, f_blocks: UInt64, f_bfree: UInt64, f_bavail: UInt64, f_files: UInt64, f_ffree: UInt64, f_fsid: fsid_t, f_owner: uid_t, f_type: UInt32, f_flags: UInt32, f_fssubtype: UInt32, f_fstypename: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_mntonname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_mntfromname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
func statfs64(_: CString, _: CMutablePointer<statfs64>) -> CInt
func statfs64(_: CString, _: CMutablePointer<statfs64>) -> CInt
struct statfs64 {
  var f_bsize: UInt32
  var f_iosize: Int32
  var f_blocks: UInt64
  var f_bfree: UInt64
  var f_bavail: UInt64
  var f_files: UInt64
  var f_ffree: UInt64
  var f_fsid: fsid_t
  var f_owner: uid_t
  var f_type: UInt32
  var f_flags: UInt32
  var f_fssubtype: UInt32
  var f_fstypename: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_mntonname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_mntfromname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(f_bsize: UInt32, f_iosize: Int32, f_blocks: UInt64, f_bfree: UInt64, f_bavail: UInt64, f_files: UInt64, f_ffree: UInt64, f_fsid: fsid_t, f_owner: uid_t, f_type: UInt32, f_flags: UInt32, f_fssubtype: UInt32, f_fstypename: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_mntonname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_mntfromname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
struct statvfs {
  var f_bsize: CUnsignedLong
  var f_frsize: CUnsignedLong
  var f_blocks: fsblkcnt_t
  var f_bfree: fsblkcnt_t
  var f_bavail: fsblkcnt_t
  var f_files: fsfilcnt_t
  var f_ffree: fsfilcnt_t
  var f_favail: fsfilcnt_t
  var f_fsid: CUnsignedLong
  var f_flag: CUnsignedLong
  var f_namemax: CUnsignedLong
  init(f_bsize: CUnsignedLong, f_frsize: CUnsignedLong, f_blocks: fsblkcnt_t, f_bfree: fsblkcnt_t, f_bavail: fsblkcnt_t, f_files: fsfilcnt_t, f_ffree: fsfilcnt_t, f_favail: fsfilcnt_t, f_fsid: CUnsignedLong, f_flag: CUnsignedLong, f_namemax: CUnsignedLong)
}
func statvfs(_: CString, _: CMutablePointer<statvfs>) -> CInt
func statvfs(_: CString, _: CMutablePointer<statvfs>) -> CInt
func statx64_np(_: CString, _: CMutablePointer<stat64>, _: filesec_t) -> CInt
func statx64_np(_: CString, _: CMutablePointer<stat64>, _: filesec_t) -> CInt
func statx_np(_: CString, _: CMutablePointer<stat>, _: filesec_t) -> CInt
func statx_np(_: CString, _: CMutablePointer<stat>, _: filesec_t) -> CInt
func stpcpy(_: CMutablePointer<CChar>, _: CString) -> UnsafePointer<CChar>
func stpcpy(_: CMutablePointer<CChar>, _: CString) -> UnsafePointer<CChar>
func stpncpy(_: CMutablePointer<CChar>, _: CString, _: UInt) -> UnsafePointer<CChar>
func stpncpy(_: CMutablePointer<CChar>, _: CString, _: UInt) -> UnsafePointer<CChar>
func strcasecmp(_: CString, _: CString) -> CInt
func strcasecmp(_: CString, _: CString) -> CInt
func strcasestr(_: CString, _: CString) -> UnsafePointer<CChar>
func strcasestr(_: CString, _: CString) -> UnsafePointer<CChar>
func strcat(_: CMutablePointer<CChar>, _: CString) -> UnsafePointer<CChar>
func strcat(_: CMutablePointer<CChar>, _: CString) -> UnsafePointer<CChar>
func strchr(_: CString, _: CInt) -> UnsafePointer<CChar>
func strchr(_: CString, _: CInt) -> UnsafePointer<CChar>
func strcmp(_: CString, _: CString) -> CInt
func strcmp(_: CString, _: CString) -> CInt
func strcoll(_: CString, _: CString) -> CInt
func strcoll(_: CString, _: CString) -> CInt
func strcpy(_: CMutablePointer<CChar>, _: CString) -> UnsafePointer<CChar>
func strcpy(_: CMutablePointer<CChar>, _: CString) -> UnsafePointer<CChar>
func strcspn(_: CString, _: CString) -> CUnsignedLong
func strcspn(_: CString, _: CString) -> CUnsignedLong
func strdup(_: CString) -> UnsafePointer<CChar>
func strdup(_: CString) -> UnsafePointer<CChar>
func strerror(_: CInt) -> UnsafePointer<CChar>
func strerror(_: CInt) -> UnsafePointer<CChar>
func strerror_r(_: CInt, _: CMutablePointer<CChar>, _: UInt) -> CInt
func strerror_r(_: CInt, _: CMutablePointer<CChar>, _: UInt) -> CInt
func strftime(_: CMutablePointer<CChar>, _: UInt, _: CString, _: CConstPointer<tm>) -> UInt
func strftime(_: CMutablePointer<CChar>, _: UInt, _: CString, _: CConstPointer<tm>) -> UInt
func strlcat(_: CMutablePointer<CChar>, _: CString, _: UInt) -> CUnsignedLong
func strlcat(_: CMutablePointer<CChar>, _: CString, _: UInt) -> CUnsignedLong
func strlcpy(_: CMutablePointer<CChar>, _: CString, _: UInt) -> CUnsignedLong
func strlcpy(_: CMutablePointer<CChar>, _: CString, _: UInt) -> CUnsignedLong
func strlen(_: CString) -> CUnsignedLong
func strlen(_: CString) -> CUnsignedLong
func strmode(_: CInt, _: CMutablePointer<CChar>)
func strmode(_: CInt, _: CMutablePointer<CChar>)
func strncasecmp(_: CString, _: CString, _: UInt) -> CInt
func strncasecmp(_: CString, _: CString, _: UInt) -> CInt
func strncat(_: CMutablePointer<CChar>, _: CString, _: UInt) -> UnsafePointer<CChar>
func strncat(_: CMutablePointer<CChar>, _: CString, _: UInt) -> UnsafePointer<CChar>
func strncmp(_: CString, _: CString, _: UInt) -> CInt
func strncmp(_: CString, _: CString, _: UInt) -> CInt
func strncpy(_: CMutablePointer<CChar>, _: CString, _: UInt) -> UnsafePointer<CChar>
func strncpy(_: CMutablePointer<CChar>, _: CString, _: UInt) -> UnsafePointer<CChar>
func strndup(_: CString, _: UInt) -> UnsafePointer<CChar>
func strndup(_: CString, _: UInt) -> UnsafePointer<CChar>
func strnlen(_: CString, _: UInt) -> UInt
func strnlen(_: CString, _: UInt) -> UInt
func strnstr(_: CString, _: CString, _: UInt) -> UnsafePointer<CChar>
func strnstr(_: CString, _: CString, _: UInt) -> UnsafePointer<CChar>
func strpbrk(_: CString, _: CString) -> UnsafePointer<CChar>
func strpbrk(_: CString, _: CString) -> UnsafePointer<CChar>
func strptime(_: CString, _: CString, _: CMutablePointer<tm>) -> UnsafePointer<CChar>
func strptime(_: CString, _: CString, _: CMutablePointer<tm>) -> UnsafePointer<CChar>
func strrchr(_: CString, _: CInt) -> UnsafePointer<CChar>
func strrchr(_: CString, _: CInt) -> UnsafePointer<CChar>
func strsep(_: CMutablePointer<UnsafePointer<CChar>>, _: CString) -> UnsafePointer<CChar>
func strsep(_: CMutablePointer<UnsafePointer<CChar>>, _: CString) -> UnsafePointer<CChar>
func strsignal(sig: CInt) -> UnsafePointer<CChar>
func strsignal(sig: CInt) -> UnsafePointer<CChar>
func strspn(_: CString, _: CString) -> CUnsignedLong
func strspn(_: CString, _: CString) -> CUnsignedLong
func strstr(_: CString, _: CString) -> UnsafePointer<CChar>
func strstr(_: CString, _: CString) -> UnsafePointer<CChar>
func strtod(_: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> CDouble
func strtod(_: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> CDouble
func strtof(_: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> CFloat
func strtof(_: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> CFloat
func strtofflags(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<CUnsignedLong>, _: CMutablePointer<CUnsignedLong>) -> CInt
func strtofflags(_: CMutablePointer<UnsafePointer<CChar>>, _: CMutablePointer<CUnsignedLong>, _: CMutablePointer<CUnsignedLong>) -> CInt
func strtoimax(__nptr: CString, __endptr: CMutablePointer<UnsafePointer<CChar>>, __base: CInt) -> intmax_t
func strtoimax(__nptr: CString, __endptr: CMutablePointer<UnsafePointer<CChar>>, __base: CInt) -> intmax_t
func strtok(_: CMutablePointer<CChar>, _: CString) -> UnsafePointer<CChar>
func strtok(_: CMutablePointer<CChar>, _: CString) -> UnsafePointer<CChar>
func strtok_r(_: CMutablePointer<CChar>, _: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> UnsafePointer<CChar>
func strtok_r(_: CMutablePointer<CChar>, _: CString, _: CMutablePointer<UnsafePointer<CChar>>) -> UnsafePointer<CChar>
func strtol(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CLong
func strtol(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CLong
func strtoll(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CLongLong
func strtoll(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CLongLong
func strtoq(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CLongLong
func strtoq(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CLongLong
func strtoul(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CUnsignedLong
func strtoul(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CUnsignedLong
func strtoull(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CUnsignedLongLong
func strtoull(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CUnsignedLongLong
func strtoumax(__nptr: CString, __endptr: CMutablePointer<UnsafePointer<CChar>>, __base: CInt) -> uintmax_t
func strtoumax(__nptr: CString, __endptr: CMutablePointer<UnsafePointer<CChar>>, __base: CInt) -> uintmax_t
func strtouq(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CUnsignedLongLong
func strtouq(_: CString, _: CMutablePointer<UnsafePointer<CChar>>, _: CInt) -> CUnsignedLongLong
func strxfrm(_: CMutablePointer<CChar>, _: CString, _: UInt) -> CUnsignedLong
func strxfrm(_: CMutablePointer<CChar>, _: CString, _: UInt) -> CUnsignedLong
var suboptarg: UnsafePointer<CChar>
typealias suseconds_t = __darwin_suseconds_t
func swab(_: CConstVoidPointer, _: CMutableVoidPointer, _: Int)
func swab(_: CConstVoidPointer, _: CMutableVoidPointer, _: Int)
func swapon(_: CString) -> CInt
func swapon(_: CString) -> CInt
typealias swblk_t = Int32
func swtch() -> boolean_t
func swtch() -> boolean_t
func swtch_pri(pri: CInt) -> boolean_t
func swtch_pri(pri: CInt) -> boolean_t
func symlink(_: CString, _: CString) -> CInt
func symlink(_: CString, _: CString) -> CInt
func symlinkat(_: CString, _: CInt, _: CString) -> CInt
func symlinkat(_: CString, _: CInt, _: CString) -> CInt
typealias symtab_name_t = (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
func sync()
func sync()
typealias sync_policy_t = CInt
func sync_volume_np(_: CString, _: CInt) -> CInt
func sync_volume_np(_: CString, _: CInt) -> CInt
var sys_nerr: CInt
var sys_siglist: (CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString)
var sys_signame: (CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString, CString)
typealias syscall_arg_t = UInt64
func sysconf(_: CInt) -> CLong
func sysconf(_: CInt) -> CLong
func sysctl(_: CMutablePointer<CInt>, _: u_int, _: CMutableVoidPointer, _: CMutablePointer<UInt>, _: CMutableVoidPointer, _: UInt) -> CInt
func sysctl(_: CMutablePointer<CInt>, _: u_int, _: CMutableVoidPointer, _: CMutablePointer<UInt>, _: CMutableVoidPointer, _: UInt) -> CInt
func sysctlbyname(_: CString, _: CMutableVoidPointer, _: CMutablePointer<UInt>, _: CMutableVoidPointer, _: UInt) -> CInt
func sysctlbyname(_: CString, _: CMutableVoidPointer, _: CMutablePointer<UInt>, _: CMutableVoidPointer, _: UInt) -> CInt
func sysctlnametomib(_: CString, _: CMutablePointer<CInt>, _: CMutablePointer<UInt>) -> CInt
func sysctlnametomib(_: CString, _: CMutablePointer<CInt>, _: CMutablePointer<UInt>) -> CInt
func system(_: CString) -> CInt
func system(_: CString) -> CInt
func tan(_: CDouble) -> CDouble
func tan(_: CDouble) -> CDouble
func tanf(_: CFloat) -> CFloat
func tanf(_: CFloat) -> CFloat
func tanh(_: CDouble) -> CDouble
func tanh(_: CDouble) -> CDouble
func tanhf(_: CFloat) -> CFloat
func tanhf(_: CFloat) -> CFloat
struct task_absolutetime_info {
  var total_user: UInt64
  var total_system: UInt64
  var threads_user: UInt64
  var threads_system: UInt64
  init(total_user: UInt64, total_system: UInt64, threads_user: UInt64, threads_system: UInt64)
}
typealias task_absolutetime_info_data_t = task_absolutetime_info
typealias task_absolutetime_info_t = UnsafePointer<task_absolutetime_info>
struct task_affinity_tag_info {
  var set_count: integer_t
  var min: integer_t
  var max: integer_t
  var task_count: integer_t
  init(set_count: integer_t, min: integer_t, max: integer_t, task_count: integer_t)
}
typealias task_affinity_tag_info_data_t = task_affinity_tag_info
typealias task_affinity_tag_info_t = UnsafePointer<task_affinity_tag_info>
typealias task_array_t = UnsafePointer<task_t>
func task_assign(task: task_t, new_set: processor_set_t, assign_threads: boolean_t) -> kern_return_t
func task_assign(task: task_t, new_set: processor_set_t, assign_threads: boolean_t) -> kern_return_t
func task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t
func task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t
struct task_basic_info {
  var suspend_count: integer_t
  var virtual_size: vm_size_t
  var resident_size: vm_size_t
  var user_time: time_value_t
  var system_time: time_value_t
  var policy: policy_t
  init(suspend_count: integer_t, virtual_size: vm_size_t, resident_size: vm_size_t, user_time: time_value_t, system_time: time_value_t, policy: policy_t)
}
struct task_basic_info_32 {
  var suspend_count: integer_t
  var virtual_size: natural_t
  var resident_size: natural_t
  var user_time: time_value_t
  var system_time: time_value_t
  var policy: policy_t
  init(suspend_count: integer_t, virtual_size: natural_t, resident_size: natural_t, user_time: time_value_t, system_time: time_value_t, policy: policy_t)
}
typealias task_basic_info_32_data_t = task_basic_info_32
typealias task_basic_info_32_t = UnsafePointer<task_basic_info_32>
struct task_basic_info_64 {
  var suspend_count: integer_t
  var virtual_size: mach_vm_size_t
  var resident_size: mach_vm_size_t
  var user_time: time_value_t
  var system_time: time_value_t
  var policy: policy_t
  init(suspend_count: integer_t, virtual_size: mach_vm_size_t, resident_size: mach_vm_size_t, user_time: time_value_t, system_time: time_value_t, policy: policy_t)
}
typealias task_basic_info_64_data_t = task_basic_info_64
typealias task_basic_info_64_t = UnsafePointer<task_basic_info_64>
typealias task_basic_info_data_t = task_basic_info
typealias task_basic_info_t = UnsafePointer<task_basic_info>
struct task_category_policy {
  var role: task_role_t
  init(role: task_role_t)
}
typealias task_category_policy_data_t = task_category_policy
typealias task_category_policy_t = UnsafePointer<task_category_policy>
func task_create(target_task: task_t, ledgers: CMutablePointer<ledger_t>, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t, child_task: CMutablePointer<task_t>) -> kern_return_t
func task_create(target_task: task_t, ledgers: CMutablePointer<ledger_t>, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t, child_task: CMutablePointer<task_t>) -> kern_return_t
struct task_dyld_info {
  var all_image_info_addr: mach_vm_address_t
  var all_image_info_size: mach_vm_size_t
  var all_image_info_format: integer_t
  init(all_image_info_addr: mach_vm_address_t, all_image_info_size: mach_vm_size_t, all_image_info_format: integer_t)
}
typealias task_dyld_info_data_t = task_dyld_info
typealias task_dyld_info_t = UnsafePointer<task_dyld_info>
struct task_events_info {
  var faults: integer_t
  var pageins: integer_t
  var cow_faults: integer_t
  var messages_sent: integer_t
  var messages_received: integer_t
  var syscalls_mach: integer_t
  var syscalls_unix: integer_t
  var csw: integer_t
  init(faults: integer_t, pageins: integer_t, cow_faults: integer_t, messages_sent: integer_t, messages_received: integer_t, syscalls_mach: integer_t, syscalls_unix: integer_t, csw: integer_t)
}
typealias task_events_info_data_t = task_events_info
typealias task_events_info_t = UnsafePointer<task_events_info>
struct task_extmod_info {
  var task_uuid: (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar)
  var extmod_statistics: vm_extmod_statistics_data_t
  init(task_uuid: (CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar, CUnsignedChar), extmod_statistics: vm_extmod_statistics_data_t)
}
typealias task_extmod_info_data_t = task_extmod_info
typealias task_extmod_info_t = UnsafePointer<task_extmod_info>
typealias task_flavor_t = natural_t
func task_for_pid(target_tport: mach_port_name_t, pid: CInt, t: CMutablePointer<mach_port_name_t>) -> kern_return_t
func task_for_pid(target_tport: mach_port_name_t, pid: CInt, t: CMutablePointer<mach_port_name_t>) -> kern_return_t
func task_get_assignment(task: task_t, assigned_set: CMutablePointer<processor_set_name_t>) -> kern_return_t
func task_get_assignment(task: task_t, assigned_set: CMutablePointer<processor_set_name_t>) -> kern_return_t
func task_get_emulation_vector(task: task_t, vector_start: CMutablePointer<CInt>, emulation_vector: CMutablePointer<emulation_vector_t>, emulation_vectorCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_get_emulation_vector(task: task_t, vector_start: CMutablePointer<CInt>, emulation_vector: CMutablePointer<emulation_vector_t>, emulation_vectorCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_get_exception_ports(task: task_t, exception_mask: exception_mask_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlers: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func task_get_exception_ports(task: task_t, exception_mask: exception_mask_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlers: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func task_get_mach_voucher(task: task_t, which: mach_voucher_selector_t, voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func task_get_mach_voucher(task: task_t, which: mach_voucher_selector_t, voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func task_get_special_port(task: task_t, which_port: CInt, special_port: CMutablePointer<mach_port_t>) -> kern_return_t
func task_get_special_port(task: task_t, which_port: CInt, special_port: CMutablePointer<mach_port_t>) -> kern_return_t
func task_get_state(task: task_t, flavor: thread_state_flavor_t, old_state: CMutablePointer<natural_t>, old_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_get_state(task: task_t, flavor: thread_state_flavor_t, old_state: CMutablePointer<natural_t>, old_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_info(target_task: task_name_t, flavor: task_flavor_t, task_info_out: CMutablePointer<integer_t>, task_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_info(target_task: task_name_t, flavor: task_flavor_t, task_info_out: CMutablePointer<integer_t>, task_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias task_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias task_info_t = UnsafePointer<integer_t>
struct task_kernelmemory_info {
  var total_palloc: UInt64
  var total_pfree: UInt64
  var total_salloc: UInt64
  var total_sfree: UInt64
  init(total_palloc: UInt64, total_pfree: UInt64, total_salloc: UInt64, total_sfree: UInt64)
}
typealias task_kernelmemory_info_data_t = task_kernelmemory_info
typealias task_kernelmemory_info_t = UnsafePointer<task_kernelmemory_info>
struct task_latency_qos {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
typealias task_latency_qos_t = integer_t
func task_name_for_pid(target_tport: mach_port_name_t, pid: CInt, tn: CMutablePointer<mach_port_name_t>) -> kern_return_t
func task_name_for_pid(target_tport: mach_port_name_t, pid: CInt, tn: CMutablePointer<mach_port_name_t>) -> kern_return_t
typealias task_name_t = mach_port_t
func task_policy(task: task_t, policy: policy_t, base: CMutablePointer<integer_t>, baseCnt: mach_msg_type_number_t, set_limit: boolean_t, change: boolean_t) -> kern_return_t
func task_policy(task: task_t, policy: policy_t, base: CMutablePointer<integer_t>, baseCnt: mach_msg_type_number_t, set_limit: boolean_t, change: boolean_t) -> kern_return_t
typealias task_policy_flavor_t = natural_t
func task_policy_get(task: task_t, flavor: task_policy_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: CMutablePointer<mach_msg_type_number_t>, get_default: CMutablePointer<boolean_t>) -> kern_return_t
func task_policy_get(task: task_t, flavor: task_policy_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: CMutablePointer<mach_msg_type_number_t>, get_default: CMutablePointer<boolean_t>) -> kern_return_t
func task_policy_set(task: task_t, flavor: task_policy_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: mach_msg_type_number_t) -> kern_return_t
func task_policy_set(task: task_t, flavor: task_policy_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: mach_msg_type_number_t) -> kern_return_t
typealias task_policy_t = UnsafePointer<integer_t>
typealias task_port_array_t = task_array_t
typealias task_port_t = task_t
struct task_power_info {
  var total_user: UInt64
  var total_system: UInt64
  var task_interrupt_wakeups: UInt64
  var task_platform_idle_wakeups: UInt64
  var task_timer_wakeups_bin_1: UInt64
  var task_timer_wakeups_bin_2: UInt64
  init(total_user: UInt64, total_system: UInt64, task_interrupt_wakeups: UInt64, task_platform_idle_wakeups: UInt64, task_timer_wakeups_bin_1: UInt64, task_timer_wakeups_bin_2: UInt64)
}
typealias task_power_info_data_t = task_power_info
typealias task_power_info_t = UnsafePointer<task_power_info>
struct task_power_info_v2 {
  var cpu_energy: task_power_info_data_t
  var gpu_energy: gpu_energy_data
  init(cpu_energy: task_power_info_data_t, gpu_energy: gpu_energy_data)
}
typealias task_power_info_v2_data_t = task_power_info_v2
typealias task_power_info_v2_t = UnsafePointer<task_power_info_v2>
func task_purgable_info(task: task_t, stats: CMutablePointer<task_purgable_info_t>) -> kern_return_t
func task_purgable_info(task: task_t, stats: CMutablePointer<task_purgable_info_t>) -> kern_return_t
typealias task_purgable_info_t = vm_purgeable_info
struct task_qos_policy {
  var task_latency_qos_tier: task_latency_qos_t
  var task_throughput_qos_tier: task_throughput_qos_t
  init(task_latency_qos_tier: task_latency_qos_t, task_throughput_qos_tier: task_throughput_qos_t)
}
typealias task_qos_policy_t = UnsafePointer<task_qos_policy>
func task_resume(target_task: task_t) -> kern_return_t
func task_resume(target_task: task_t) -> kern_return_t
func task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t
func task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t
struct task_role {
  init(_ value: CInt) {

  }
  var value: CInt
}
typealias task_role_t = integer_t
func task_sample(task: task_t, reply: mach_port_t) -> kern_return_t
func task_sample(task: task_t, reply: mach_port_t) -> kern_return_t
func task_self_trap() -> mach_port_name_t
func task_self_trap() -> mach_port_name_t
func task_set_emulation(target_port: task_t, routine_entry_pt: vm_address_t, routine_number: CInt) -> kern_return_t
func task_set_emulation(target_port: task_t, routine_entry_pt: vm_address_t, routine_number: CInt) -> kern_return_t
func task_set_emulation_vector(task: task_t, vector_start: CInt, emulation_vector: CMutablePointer<mach_vm_offset_t>, emulation_vectorCnt: mach_msg_type_number_t) -> kern_return_t
func task_set_emulation_vector(task: task_t, vector_start: CInt, emulation_vector: CMutablePointer<mach_vm_offset_t>, emulation_vectorCnt: mach_msg_type_number_t) -> kern_return_t
func task_set_exception_ports(task: task_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func task_set_exception_ports(task: task_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func task_set_info(target_task: task_t, flavor: task_flavor_t, task_info_in: CMutablePointer<integer_t>, task_info_inCnt: mach_msg_type_number_t) -> kern_return_t
func task_set_info(target_task: task_t, flavor: task_flavor_t, task_info_in: CMutablePointer<integer_t>, task_info_inCnt: mach_msg_type_number_t) -> kern_return_t
func task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t
func task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t
func task_set_phys_footprint_limit(task: task_t, new_limit: CInt, old_limit: CMutablePointer<CInt>) -> kern_return_t
func task_set_phys_footprint_limit(task: task_t, new_limit: CInt, old_limit: CMutablePointer<CInt>) -> kern_return_t
func task_set_policy(task: task_t, pset: processor_set_t, policy: policy_t, base: CMutablePointer<integer_t>, baseCnt: mach_msg_type_number_t, limit: CMutablePointer<integer_t>, limitCnt: mach_msg_type_number_t, change: boolean_t) -> kern_return_t
func task_set_policy(task: task_t, pset: processor_set_t, policy: policy_t, base: CMutablePointer<integer_t>, baseCnt: mach_msg_type_number_t, limit: CMutablePointer<integer_t>, limitCnt: mach_msg_type_number_t, change: boolean_t) -> kern_return_t
func task_set_port_space(task: ipc_space_t, table_entries: CInt) -> kern_return_t
func task_set_port_space(task: ipc_space_t, table_entries: CInt) -> kern_return_t
func task_set_ras_pc(target_task: task_t, basepc: vm_address_t, boundspc: vm_address_t) -> kern_return_t
func task_set_ras_pc(target_task: task_t, basepc: vm_address_t, boundspc: vm_address_t) -> kern_return_t
func task_set_special_port(task: task_t, which_port: CInt, special_port: mach_port_t) -> kern_return_t
func task_set_special_port(task: task_t, which_port: CInt, special_port: mach_port_t) -> kern_return_t
func task_set_state(task: task_t, flavor: thread_state_flavor_t, new_state: CMutablePointer<natural_t>, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
func task_set_state(task: task_t, flavor: thread_state_flavor_t, new_state: CMutablePointer<natural_t>, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
typealias task_special_port_t = CInt
func task_suspend(target_task: task_t) -> kern_return_t
func task_suspend(target_task: task_t) -> kern_return_t
func task_suspend2(target_task: task_t, suspend_token: CMutablePointer<task_suspension_token_t>) -> kern_return_t
func task_suspend2(target_task: task_t, suspend_token: CMutablePointer<task_suspension_token_t>) -> kern_return_t
typealias task_suspension_token_t = mach_port_t
func task_swap_exception_ports(task: task_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlerss: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func task_swap_exception_ports(task: task_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlerss: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func task_swap_mach_voucher(task: task_t, new_voucher: ipc_voucher_t, old_voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func task_swap_mach_voucher(task: task_t, new_voucher: ipc_voucher_t, old_voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
typealias task_t = mach_port_t
func task_terminate(target_task: task_t) -> kern_return_t
func task_terminate(target_task: task_t) -> kern_return_t
struct task_thread_times_info {
  var user_time: time_value_t
  var system_time: time_value_t
  init(user_time: time_value_t, system_time: time_value_t)
}
typealias task_thread_times_info_data_t = task_thread_times_info
typealias task_thread_times_info_t = UnsafePointer<task_thread_times_info>
func task_threads(target_task: task_t, act_list: CMutablePointer<thread_act_array_t>, act_listCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_threads(target_task: task_t, act_list: CMutablePointer<thread_act_array_t>, act_listCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct task_throughput_qos {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
typealias task_throughput_qos_t = integer_t
struct task_trace_memory_info {
  var user_memory_address: UInt64
  var buffer_size: UInt64
  var mailbox_array_size: UInt64
  init(user_memory_address: UInt64, buffer_size: UInt64, mailbox_array_size: UInt64)
}
typealias task_trace_memory_info_data_t = task_trace_memory_info
typealias task_trace_memory_info_t = UnsafePointer<task_trace_memory_info>
struct task_vm_info {
  var virtual_size: mach_vm_size_t
  var region_count: integer_t
  var page_size: integer_t
  var resident_size: mach_vm_size_t
  var resident_size_peak: mach_vm_size_t
  var device: mach_vm_size_t
  var device_peak: mach_vm_size_t
  var internal: mach_vm_size_t
  var internal_peak: mach_vm_size_t
  var external: mach_vm_size_t
  var external_peak: mach_vm_size_t
  var reusable: mach_vm_size_t
  var reusable_peak: mach_vm_size_t
  var purgeable_volatile_pmap: mach_vm_size_t
  var purgeable_volatile_resident: mach_vm_size_t
  var purgeable_volatile_virtual: mach_vm_size_t
  var compressed: mach_vm_size_t
  var compressed_peak: mach_vm_size_t
  var compressed_lifetime: mach_vm_size_t
  init(virtual_size: mach_vm_size_t, region_count: integer_t, page_size: integer_t, resident_size: mach_vm_size_t, resident_size_peak: mach_vm_size_t, device: mach_vm_size_t, device_peak: mach_vm_size_t, internal: mach_vm_size_t, internal_peak: mach_vm_size_t, external: mach_vm_size_t, external_peak: mach_vm_size_t, reusable: mach_vm_size_t, reusable_peak: mach_vm_size_t, purgeable_volatile_pmap: mach_vm_size_t, purgeable_volatile_resident: mach_vm_size_t, purgeable_volatile_virtual: mach_vm_size_t, compressed: mach_vm_size_t, compressed_peak: mach_vm_size_t, compressed_lifetime: mach_vm_size_t)
}
typealias task_vm_info_data_t = task_vm_info
typealias task_vm_info_t = UnsafePointer<task_vm_info>
struct task_wait_state_info {
  var total_wait_state_time: UInt64
  var total_wait_sfi_state_time: UInt64
  var _reserved: (UInt32, UInt32, UInt32, UInt32)
  init(total_wait_state_time: UInt64, total_wait_sfi_state_time: UInt64, _reserved: (UInt32, UInt32, UInt32, UInt32))
}
typealias task_wait_state_info_data_t = task_wait_state_info
typealias task_wait_state_info_t = UnsafePointer<task_wait_state_info>
func task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t
func task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t
func task_zone_info(target_task: task_t, names: CMutablePointer<mach_zone_name_array_t>, namesCnt: CMutablePointer<mach_msg_type_number_t>, info: CMutablePointer<task_zone_info_array_t>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_zone_info(target_task: task_t, names: CMutablePointer<mach_zone_name_array_t>, namesCnt: CMutablePointer<mach_msg_type_number_t>, info: CMutablePointer<task_zone_info_array_t>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias task_zone_info_array_t = UnsafePointer<task_zone_info_t>
struct task_zone_info_data {
  var tzi_count: UInt64
  var tzi_cur_size: UInt64
  var tzi_max_size: UInt64
  var tzi_elem_size: UInt64
  var tzi_alloc_size: UInt64
  var tzi_sum_size: UInt64
  var tzi_exhaustible: UInt64
  var tzi_collectable: UInt64
  var tzi_caller_acct: UInt64
  var tzi_task_alloc: UInt64
  var tzi_task_free: UInt64
  init(tzi_count: UInt64, tzi_cur_size: UInt64, tzi_max_size: UInt64, tzi_elem_size: UInt64, tzi_alloc_size: UInt64, tzi_sum_size: UInt64, tzi_exhaustible: UInt64, tzi_collectable: UInt64, tzi_caller_acct: UInt64, tzi_task_alloc: UInt64, tzi_task_free: UInt64)
}
typealias task_zone_info_t = task_zone_info_data
func tcdrain(_: CInt) -> CInt
func tcdrain(_: CInt) -> CInt
typealias tcflag_t = CUnsignedLong
func tcflow(_: CInt, _: CInt) -> CInt
func tcflow(_: CInt, _: CInt) -> CInt
func tcflush(_: CInt, _: CInt) -> CInt
func tcflush(_: CInt, _: CInt) -> CInt
func tcgetattr(_: CInt, _: CMutablePointer<termios>) -> CInt
func tcgetattr(_: CInt, _: CMutablePointer<termios>) -> CInt
func tcgetpgrp(_: CInt) -> pid_t
func tcgetpgrp(_: CInt) -> pid_t
func tcgetsid(_: CInt) -> pid_t
func tcgetsid(_: CInt) -> pid_t
typealias tcp_cc = __uint32_t
typealias tcp_seq = __uint32_t
struct tcp_sockinfo {
  var tcpsi_ini: in_sockinfo
  var tcpsi_state: CInt
  var tcpsi_timer: (CInt, CInt, CInt, CInt)
  var tcpsi_mss: CInt
  var tcpsi_flags: UInt32
  var rfu_1: UInt32
  var tcpsi_tp: UInt64
  init(tcpsi_ini: in_sockinfo, tcpsi_state: CInt, tcpsi_timer: (CInt, CInt, CInt, CInt), tcpsi_mss: CInt, tcpsi_flags: UInt32, rfu_1: UInt32, tcpsi_tp: UInt64)
}
func tcsendbreak(_: CInt, _: CInt) -> CInt
func tcsendbreak(_: CInt, _: CInt) -> CInt
func tcsetattr(_: CInt, _: CInt, _: CConstPointer<termios>) -> CInt
func tcsetattr(_: CInt, _: CInt, _: CConstPointer<termios>) -> CInt
func tcsetpgrp(_: CInt, _: pid_t) -> CInt
func tcsetpgrp(_: CInt, _: pid_t) -> CInt
func telldir(_: CMutablePointer<DIR>) -> CLong
func telldir(_: CMutablePointer<DIR>) -> CLong
@availability(*, unavailable, message="This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.") func tempnam(_: CString, _: CString) -> UnsafePointer<CChar>
@availability(*, unavailable, message="This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.") func tempnam(_: CString, _: CString) -> UnsafePointer<CChar>
struct termios {
  var c_iflag: tcflag_t
  var c_oflag: tcflag_t
  var c_cflag: tcflag_t
  var c_lflag: tcflag_t
  var c_cc: (cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t)
  var c_ispeed: speed_t
  var c_ospeed: speed_t
  init(c_iflag: tcflag_t, c_oflag: tcflag_t, c_cflag: tcflag_t, c_lflag: tcflag_t, c_cc: (cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t), c_ispeed: speed_t, c_ospeed: speed_t)
}
typealias text_encoding_t = UInt32
func tgamma(_: CDouble) -> CDouble
func tgamma(_: CDouble) -> CDouble
func tgammaf(_: CFloat) -> CFloat
func tgammaf(_: CFloat) -> CFloat
func thread_abort(target_act: thread_act_t) -> kern_return_t
func thread_abort(target_act: thread_act_t) -> kern_return_t
func thread_abort_safely(target_act: thread_act_t) -> kern_return_t
func thread_abort_safely(target_act: thread_act_t) -> kern_return_t
typealias thread_act_array_t = UnsafePointer<thread_act_t>
typealias thread_act_port_array_t = thread_act_array_t
typealias thread_act_port_t = thread_act_t
typealias thread_act_t = mach_port_t
struct thread_affinity_policy {
  var affinity_tag: integer_t
  init(affinity_tag: integer_t)
}
typealias thread_affinity_policy_data_t = thread_affinity_policy
typealias thread_affinity_policy_t = UnsafePointer<thread_affinity_policy>
typealias thread_array_t = UnsafePointer<thread_t>
func thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t
func thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t
func thread_assign_default(thread: thread_act_t) -> kern_return_t
func thread_assign_default(thread: thread_act_t) -> kern_return_t
struct thread_background_policy {
  var priority: integer_t
  init(priority: integer_t)
}
typealias thread_background_policy_data_t = thread_background_policy
typealias thread_background_policy_t = UnsafePointer<thread_background_policy>
struct thread_basic_info {
  var user_time: time_value_t
  var system_time: time_value_t
  var cpu_usage: integer_t
  var policy: policy_t
  var run_state: integer_t
  var flags: integer_t
  var suspend_count: integer_t
  var sleep_time: integer_t
  init(user_time: time_value_t, system_time: time_value_t, cpu_usage: integer_t, policy: policy_t, run_state: integer_t, flags: integer_t, suspend_count: integer_t, sleep_time: integer_t)
}
typealias thread_basic_info_data_t = thread_basic_info
typealias thread_basic_info_t = UnsafePointer<thread_basic_info>
func thread_create(parent_task: task_t, child_act: CMutablePointer<thread_act_t>) -> kern_return_t
func thread_create(parent_task: task_t, child_act: CMutablePointer<thread_act_t>) -> kern_return_t
func thread_create_running(parent_task: task_t, flavor: thread_state_flavor_t, new_state: CMutablePointer<natural_t>, new_stateCnt: mach_msg_type_number_t, child_act: CMutablePointer<thread_act_t>) -> kern_return_t
func thread_create_running(parent_task: task_t, flavor: thread_state_flavor_t, new_state: CMutablePointer<natural_t>, new_stateCnt: mach_msg_type_number_t, child_act: CMutablePointer<thread_act_t>) -> kern_return_t
func thread_depress_abort(thread: thread_act_t) -> kern_return_t
func thread_depress_abort(thread: thread_act_t) -> kern_return_t
struct thread_extended_policy {
  var timeshare: boolean_t
  init(timeshare: boolean_t)
}
typealias thread_extended_policy_data_t = thread_extended_policy
typealias thread_extended_policy_t = UnsafePointer<thread_extended_policy>
typealias thread_flavor_t = natural_t
func thread_get_assignment(thread: thread_act_t, assigned_set: CMutablePointer<processor_set_name_t>) -> kern_return_t
func thread_get_assignment(thread: thread_act_t, assigned_set: CMutablePointer<processor_set_name_t>) -> kern_return_t
func thread_get_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlers: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func thread_get_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlers: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func thread_get_mach_voucher(thr_act: thread_act_t, which: mach_voucher_selector_t, voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func thread_get_mach_voucher(thr_act: thread_act_t, which: mach_voucher_selector_t, voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func thread_get_special_port(thr_act: thread_act_t, which_port: CInt, special_port: CMutablePointer<mach_port_t>) -> kern_return_t
func thread_get_special_port(thr_act: thread_act_t, which_port: CInt, special_port: CMutablePointer<mach_port_t>) -> kern_return_t
func thread_get_state(target_act: thread_act_t, flavor: thread_state_flavor_t, old_state: CMutablePointer<natural_t>, old_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func thread_get_state(target_act: thread_act_t, flavor: thread_state_flavor_t, old_state: CMutablePointer<natural_t>, old_stateCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct thread_identifier_info {
  var thread_id: UInt64
  var thread_handle: UInt64
  var dispatch_qaddr: UInt64
  init(thread_id: UInt64, thread_handle: UInt64, dispatch_qaddr: UInt64)
}
typealias thread_identifier_info_data_t = thread_identifier_info
typealias thread_identifier_info_t = UnsafePointer<thread_identifier_info>
func thread_info(target_act: thread_act_t, flavor: thread_flavor_t, thread_info_out: CMutablePointer<integer_t>, thread_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func thread_info(target_act: thread_act_t, flavor: thread_flavor_t, thread_info_out: CMutablePointer<integer_t>, thread_info_outCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias thread_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias thread_info_t = UnsafePointer<integer_t>
struct thread_latency_qos_policy {
  var thread_latency_qos_tier: thread_latency_qos_t
  init(thread_latency_qos_tier: thread_latency_qos_t)
}
typealias thread_latency_qos_policy_data_t = thread_latency_qos_policy
typealias thread_latency_qos_policy_t = UnsafePointer<thread_latency_qos_policy>
typealias thread_latency_qos_t = integer_t
func thread_policy(thr_act: thread_act_t, policy: policy_t, base: CMutablePointer<integer_t>, baseCnt: mach_msg_type_number_t, set_limit: boolean_t) -> kern_return_t
func thread_policy(thr_act: thread_act_t, policy: policy_t, base: CMutablePointer<integer_t>, baseCnt: mach_msg_type_number_t, set_limit: boolean_t) -> kern_return_t
typealias thread_policy_flavor_t = natural_t
func thread_policy_get(thread: thread_act_t, flavor: thread_policy_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: CMutablePointer<mach_msg_type_number_t>, get_default: CMutablePointer<boolean_t>) -> kern_return_t
func thread_policy_get(thread: thread_act_t, flavor: thread_policy_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: CMutablePointer<mach_msg_type_number_t>, get_default: CMutablePointer<boolean_t>) -> kern_return_t
func thread_policy_set(thread: thread_act_t, flavor: thread_policy_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: mach_msg_type_number_t) -> kern_return_t
func thread_policy_set(thread: thread_act_t, flavor: thread_policy_flavor_t, policy_info: CMutablePointer<integer_t>, policy_infoCnt: mach_msg_type_number_t) -> kern_return_t
typealias thread_policy_t = UnsafePointer<integer_t>
typealias thread_port_array_t = thread_array_t
typealias thread_port_t = thread_t
struct thread_precedence_policy {
  var importance: integer_t
  init(importance: integer_t)
}
typealias thread_precedence_policy_data_t = thread_precedence_policy
typealias thread_precedence_policy_t = UnsafePointer<thread_precedence_policy>
func thread_resume(target_act: thread_act_t) -> kern_return_t
func thread_resume(target_act: thread_act_t) -> kern_return_t
func thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t
func thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t
func thread_set_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func thread_set_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t
func thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t
func thread_set_policy(thr_act: thread_act_t, pset: processor_set_t, policy: policy_t, base: CMutablePointer<integer_t>, baseCnt: mach_msg_type_number_t, limit: CMutablePointer<integer_t>, limitCnt: mach_msg_type_number_t) -> kern_return_t
func thread_set_policy(thr_act: thread_act_t, pset: processor_set_t, policy: policy_t, base: CMutablePointer<integer_t>, baseCnt: mach_msg_type_number_t, limit: CMutablePointer<integer_t>, limitCnt: mach_msg_type_number_t) -> kern_return_t
func thread_set_special_port(thr_act: thread_act_t, which_port: CInt, special_port: mach_port_t) -> kern_return_t
func thread_set_special_port(thr_act: thread_act_t, which_port: CInt, special_port: mach_port_t) -> kern_return_t
func thread_set_state(target_act: thread_act_t, flavor: thread_state_flavor_t, new_state: CMutablePointer<natural_t>, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
func thread_set_state(target_act: thread_act_t, flavor: thread_state_flavor_t, new_state: CMutablePointer<natural_t>, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
struct thread_standard_policy {
  var no_data: natural_t
  init(no_data: natural_t)
}
typealias thread_standard_policy_data_t = thread_standard_policy
typealias thread_standard_policy_t = UnsafePointer<thread_standard_policy>
typealias thread_state_data_t = (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
typealias thread_state_flavor_array_t = UnsafePointer<thread_state_flavor_t>
typealias thread_state_flavor_t = CInt
typealias thread_state_t = UnsafePointer<natural_t>
func thread_suspend(target_act: thread_act_t) -> kern_return_t
func thread_suspend(target_act: thread_act_t) -> kern_return_t
func thread_swap_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlers: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func thread_swap_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: CMutablePointer<exception_mask_t>, masksCnt: CMutablePointer<mach_msg_type_number_t>, old_handlers: CMutablePointer<exception_handler_t>, old_behaviors: CMutablePointer<exception_behavior_t>, old_flavors: CMutablePointer<thread_state_flavor_t>) -> kern_return_t
func thread_swap_mach_voucher(thr_act: thread_act_t, new_voucher: ipc_voucher_t, old_voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func thread_swap_mach_voucher(thr_act: thread_act_t, new_voucher: ipc_voucher_t, old_voucher: CMutablePointer<ipc_voucher_t>) -> kern_return_t
func thread_switch(thread_name: mach_port_name_t, option: CInt, option_time: mach_msg_timeout_t) -> kern_return_t
func thread_switch(thread_name: mach_port_name_t, option: CInt, option_time: mach_msg_timeout_t) -> kern_return_t
typealias thread_t = mach_port_t
func thread_terminate(target_act: thread_act_t) -> kern_return_t
func thread_terminate(target_act: thread_act_t) -> kern_return_t
struct thread_throughput_qos_policy {
  var thread_throughput_qos_tier: thread_throughput_qos_t
  init(thread_throughput_qos_tier: thread_throughput_qos_t)
}
typealias thread_throughput_qos_policy_data_t = thread_throughput_qos_policy
typealias thread_throughput_qos_policy_t = UnsafePointer<thread_throughput_qos_policy>
typealias thread_throughput_qos_t = integer_t
struct thread_time_constraint_policy {
  var period: UInt32
  var computation: UInt32
  var constraint: UInt32
  var preemptible: boolean_t
  init(period: UInt32, computation: UInt32, constraint: UInt32, preemptible: boolean_t)
}
typealias thread_time_constraint_policy_data_t = thread_time_constraint_policy
typealias thread_time_constraint_policy_t = UnsafePointer<thread_time_constraint_policy>
func thread_wire(host_priv: host_priv_t, thread: thread_act_t, wired: boolean_t) -> kern_return_t
func thread_wire(host_priv: host_priv_t, thread: thread_act_t, wired: boolean_t) -> kern_return_t
func time(_: CMutablePointer<time_t>) -> time_t
func time(_: CMutablePointer<time_t>) -> time_t
func time2posix(_: time_t) -> time_t
func time2posix(_: time_t) -> time_t
typealias time_t = __darwin_time_t
struct time_value {
  var seconds: integer_t
  var microseconds: integer_t
  init(seconds: integer_t, microseconds: integer_t)
}
typealias time_value_t = time_value
struct timeb {
  var time: time_t
  var millitm: CUnsignedShort
  var timezone: CShort
  var dstflag: CShort
  init(time: time_t, millitm: CUnsignedShort, timezone: CShort, dstflag: CShort)
}
func timegm(_: CMutablePointer<tm>) -> time_t
func timegm(_: CMutablePointer<tm>) -> time_t
func timelocal(_: CMutablePointer<tm>) -> time_t
func timelocal(_: CMutablePointer<tm>) -> time_t
func times(_: CMutablePointer<tms>) -> clock_t
func times(_: CMutablePointer<tms>) -> clock_t
struct timespec {
  var tv_sec: __darwin_time_t
  var tv_nsec: CLong
  init(tv_sec: __darwin_time_t, tv_nsec: CLong)
}
struct timeval {
  var tv_sec: __darwin_time_t
  var tv_usec: __darwin_suseconds_t
  init(tv_sec: __darwin_time_t, tv_usec: __darwin_suseconds_t)
}
struct timeval32 {
  var tv_sec: __int32_t
  var tv_usec: __int32_t
  init(tv_sec: __int32_t, tv_usec: __int32_t)
}
struct timezone {
  var tz_minuteswest: CInt
  var tz_dsttime: CInt
  init(tz_minuteswest: CInt, tz_dsttime: CInt)
}
var timezone: CLong
struct tm {
  var tm_sec: CInt
  var tm_min: CInt
  var tm_hour: CInt
  var tm_mday: CInt
  var tm_mon: CInt
  var tm_year: CInt
  var tm_wday: CInt
  var tm_yday: CInt
  var tm_isdst: CInt
  var tm_gmtoff: CLong
  var tm_zone: UnsafePointer<CChar>
  init(tm_sec: CInt, tm_min: CInt, tm_hour: CInt, tm_mday: CInt, tm_mon: CInt, tm_year: CInt, tm_wday: CInt, tm_yday: CInt, tm_isdst: CInt, tm_gmtoff: CLong, tm_zone: UnsafePointer<CChar>)
}
func tmpfile() -> UnsafePointer<FILE>
func tmpfile() -> UnsafePointer<FILE>
@availability(*, unavailable, message="This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.") func tmpnam(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
@availability(*, unavailable, message="This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.") func tmpnam(_: CMutablePointer<CChar>) -> UnsafePointer<CChar>
struct tms {
  var tms_utime: clock_t
  var tms_stime: clock_t
  var tms_cutime: clock_t
  var tms_cstime: clock_t
  init(tms_utime: clock_t, tms_stime: clock_t, tms_cutime: clock_t, tms_cstime: clock_t)
}
func toascii(_c: CInt) -> CInt
func toascii(_c: CInt) -> CInt
struct tokenstr {
  var id: u_char
  var data: UnsafePointer<u_char>
  var len: UInt
  init(id: u_char, data: UnsafePointer<u_char>, len: UInt)
}
typealias tokenstr_t = tokenstr
func tolower(_c: CInt) -> CInt
func tolower(_c: CInt) -> CInt
struct tostruct {
  var selfpc: UInt32
  var count: Int32
  var link: UInt16
  var order: UInt16
  init(selfpc: UInt32, count: Int32, link: UInt16, order: UInt16)
}
struct tostruct_64 {
  var selfpc: UInt64
  var count: Int32
  var link: UInt16
  var order: UInt16
  init(selfpc: UInt64, count: Int32, link: UInt16, order: UInt16)
}
typealias tostruct_t = tostruct_64
func toupper(_c: CInt) -> CInt
func toupper(_c: CInt) -> CInt
func towctrans(_: wint_t, _: wctrans_t) -> wint_t
func towctrans(_: wint_t, _: wctrans_t) -> wint_t
func towlower(_wc: wint_t) -> wint_t
func towlower(_wc: wint_t) -> wint_t
func towupper(_wc: wint_t) -> wint_t
func towupper(_wc: wint_t) -> wint_t
func trunc(_: CDouble) -> CDouble
func trunc(_: CDouble) -> CDouble
func truncate(_: CString, _: off_t) -> CInt
func truncate(_: CString, _: off_t) -> CInt
func truncf(_: CFloat) -> CFloat
func truncf(_: CFloat) -> CFloat
func ttyname(_: CInt) -> UnsafePointer<CChar>
func ttyname(_: CInt) -> UnsafePointer<CChar>
func ttyname_r(_: CInt, _: CMutablePointer<CChar>, _: UInt) -> CInt
func ttyname_r(_: CInt, _: CMutablePointer<CChar>, _: UInt) -> CInt
struct ttysize {
  var ts_lines: CUnsignedShort
  var ts_cols: CUnsignedShort
  var ts_xxx: CUnsignedShort
  var ts_yyy: CUnsignedShort
  init(ts_lines: CUnsignedShort, ts_cols: CUnsignedShort, ts_xxx: CUnsignedShort, ts_yyy: CUnsignedShort)
}
func ttyslot() -> CInt
func ttyslot() -> CInt
func tzset()
func tzset()
func tzsetwall()
func tzsetwall()
typealias u_char = CUnsignedChar
typealias u_int = CUnsignedInt
typealias u_long = CUnsignedLong
typealias u_quad_t = UInt64
typealias u_short = CUnsignedShort
func ualarm(_: useconds_t, _: useconds_t) -> useconds_t
func ualarm(_: useconds_t, _: useconds_t) -> useconds_t
typealias ucontext64_t = __darwin_ucontext64
typealias ucontext_t = __darwin_ucontext
struct ucred {
  var cr_ref: u_long
  var cr_posix: posix_cred
  var cr_label: COpaquePointer
  var cr_audit: au_session
  init(cr_ref: u_long, cr_posix: posix_cred, cr_label: COpaquePointer, cr_audit: au_session)
}
typealias uid_t = __darwin_uid_t
typealias uint = CUnsignedInt
typealias uint_fast16_t = UInt16
typealias uint_fast32_t = UInt32
typealias uint_fast64_t = UInt64
typealias uint_fast8_t = UInt8
typealias uint_least16_t = UInt16
typealias uint_least32_t = UInt32
typealias uint_least64_t = UInt64
typealias uint_least8_t = UInt8
typealias uintmax_t = CUnsignedLong
typealias uintptr_t = UInt
struct uio_rw {
  init(_ value: CUnsignedInt) {

  }
  var value: CUnsignedInt
}
typealias uio_t = COpaquePointer
func umask(_: mode_t) -> mode_t
func umask(_: mode_t) -> mode_t
func umaskx_np(_: filesec_t) -> CInt
func umaskx_np(_: filesec_t) -> CInt
struct un_sockinfo {
  var unsi_conn_so: UInt64
  var unsi_conn_pcb: UInt64
  init(unsi_conn_so: UInt64, unsi_conn_pcb: UInt64)
}
func uname(_: CMutablePointer<utsname>) -> CInt
func uname(_: CMutablePointer<utsname>) -> CInt
func undelete(_: CString) -> CInt
func undelete(_: CString) -> CInt
var underline: Int {
  get {
    return
  }
}
func ungetc(_: CInt, _: CMutablePointer<FILE>) -> CInt
func ungetc(_: CInt, _: CMutablePointer<FILE>) -> CInt
func ungetwc(_: wint_t, _: CMutablePointer<FILE>) -> wint_t
func ungetwc(_: wint_t, _: CMutablePointer<FILE>) -> wint_t
func unlink(_: CString) -> CInt
func unlink(_: CString) -> CInt
func unlinkat(_: CInt, _: CString, _: CInt) -> CInt
func unlinkat(_: CInt, _: CString, _: CInt) -> CInt
func unlockpt(_: CInt) -> CInt
func unlockpt(_: CInt) -> CInt
func unmount(_: CString, _: CInt) -> CInt
func unmount(_: CString, _: CInt) -> CInt
typealias unp_gen_t = u_quad_t
func unsetenv(_: CString) -> CInt
func unsetenv(_: CString) -> CInt
func unwhiteout(_: CString) -> CInt
func unwhiteout(_: CString) -> CInt
typealias upl_t = mach_port_t
typealias useconds_t = __darwin_useconds_t
struct user {
  init()
}
typealias user_addr_t = UInt64
func user_from_uid(_: uid_t, _: CInt) -> UnsafePointer<CChar>
func user_from_uid(_: uid_t, _: CInt) -> UnsafePointer<CChar>
typealias user_long_t = Int64
typealias user_off_t = Int64
typealias user_size_t = UInt64
typealias user_ssize_t = Int64
typealias user_subsystem_t = UnsafePointer<CChar>
typealias user_time_t = Int64
typealias user_ulong_t = UInt64
typealias ushort = CUnsignedShort
func usleep(_: useconds_t) -> CInt
func usleep(_: useconds_t) -> CInt
struct utimbuf {
  var actime: time_t
  var modtime: time_t
  init(actime: time_t, modtime: time_t)
}
func utime(_: CString, _: CConstPointer<utimbuf>) -> CInt
func utime(_: CString, _: CConstPointer<utimbuf>) -> CInt
func utimes(_: CString, _: CConstPointer<timeval>) -> CInt
func utimes(_: CString, _: CConstPointer<timeval>) -> CInt
struct utmpx {
  var ut_user: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ut_id: (CChar, CChar, CChar, CChar)
  var ut_line: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ut_pid: pid_t
  var ut_type: CShort
  var ut_tv: timeval
  var ut_host: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var ut_pad: (__uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t)
  init(ut_user: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ut_id: (CChar, CChar, CChar, CChar), ut_line: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ut_pid: pid_t, ut_type: CShort, ut_tv: timeval, ut_host: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), ut_pad: (__uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t))
}
func utmpxname(_: CString) -> CInt
func utmpxname(_: CString) -> CInt
struct utsname {
  var sysname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var nodename: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var release: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var version: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var machine: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(sysname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), nodename: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), release: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), version: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), machine: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
func uuid_clear(uu: CMutablePointer<CUnsignedChar>)
func uuid_clear(uu: CMutablePointer<CUnsignedChar>)
func uuid_compare(uu1: CConstPointer<CUnsignedChar>, uu2: CConstPointer<CUnsignedChar>) -> CInt
func uuid_compare(uu1: CConstPointer<CUnsignedChar>, uu2: CConstPointer<CUnsignedChar>) -> CInt
func uuid_copy(dst: CMutablePointer<CUnsignedChar>, src: CConstPointer<CUnsignedChar>)
func uuid_copy(dst: CMutablePointer<CUnsignedChar>, src: CConstPointer<CUnsignedChar>)
func uuid_generate(out: CMutablePointer<CUnsignedChar>)
func uuid_generate(out: CMutablePointer<CUnsignedChar>)
func uuid_generate_random(out: CMutablePointer<CUnsignedChar>)
func uuid_generate_random(out: CMutablePointer<CUnsignedChar>)
func uuid_generate_time(out: CMutablePointer<CUnsignedChar>)
func uuid_generate_time(out: CMutablePointer<CUnsignedChar>)
func uuid_is_null(uu: CConstPointer<CUnsignedChar>) -> CInt
func uuid_is_null(uu: CConstPointer<CUnsignedChar>) -> CInt
func uuid_parse(`in`: CString, uu: CMutablePointer<CUnsignedChar>) -> CInt
func uuid_parse(`in`: CString, uu: CMutablePointer<CUnsignedChar>) -> CInt
typealias uuid_string_t = __darwin_uuid_string_t
typealias uuid_t = __darwin_uuid_t
func uuid_unparse(uu: CConstPointer<CUnsignedChar>, out: CMutablePointer<CChar>)
func uuid_unparse(uu: CConstPointer<CUnsignedChar>, out: CMutablePointer<CChar>)
func uuid_unparse_lower(uu: CConstPointer<CUnsignedChar>, out: CMutablePointer<CChar>)
func uuid_unparse_lower(uu: CConstPointer<CUnsignedChar>, out: CMutablePointer<CChar>)
func uuid_unparse_upper(uu: CConstPointer<CUnsignedChar>, out: CMutablePointer<CChar>)
func uuid_unparse_upper(uu: CConstPointer<CUnsignedChar>, out: CMutablePointer<CChar>)
typealias va_list = __darwin_va_list
func valloc(_: UInt) -> COpaquePointer
func valloc(_: UInt) -> COpaquePointer
func vasprintf(_: CMutablePointer<UnsafePointer<CChar>>, _: CString, _: CVaListPointer) -> CInt
func vasprintf(_: CMutablePointer<UnsafePointer<CChar>>, _: CString, _: CVaListPointer) -> CInt
func vdprintf(_: CInt, _: CString, _: CVaListPointer) -> CInt
func vdprintf(_: CInt, _: CString, _: CVaListPointer) -> CInt
func vfork() -> CInt
func vfork() -> CInt
func vfprintf(_: CMutablePointer<FILE>, _: CString, _: CVaListPointer) -> CInt
func vfprintf(_: CMutablePointer<FILE>, _: CString, _: CVaListPointer) -> CInt
typealias vfs_context_t = COpaquePointer
struct vfs_server {
  var vs_minutes: Int32
  var vs_server_name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  init(vs_minutes: Int32, vs_server_name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
func vfscanf(_: CMutablePointer<FILE>, _: CString, _: CVaListPointer) -> CInt
func vfscanf(_: CMutablePointer<FILE>, _: CString, _: CVaListPointer) -> CInt
struct vfsconf {
  var vfc_reserved1: UInt32
  var vfc_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var vfc_typenum: CInt
  var vfc_refcount: CInt
  var vfc_flags: CInt
  var vfc_reserved2: UInt32
  var vfc_reserved3: UInt32
  init(vfc_reserved1: UInt32, vfc_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), vfc_typenum: CInt, vfc_refcount: CInt, vfc_flags: CInt, vfc_reserved2: UInt32, vfc_reserved3: UInt32)
}
struct vfsidctl {
  var vc_vers: CInt
  var vc_fsid: fsid_t
  var vc_ptr: COpaquePointer
  var vc_len: UInt
  var vc_spare: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(vc_vers: CInt, vc_fsid: fsid_t, vc_ptr: COpaquePointer, vc_len: UInt, vc_spare: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
struct vfsquery {
  var vq_flags: UInt32
  var vq_spare: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  init(vq_flags: UInt32, vq_spare: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32))
}
struct vfsstatfs {
  var f_bsize: UInt32
  var f_iosize: UInt
  var f_blocks: UInt64
  var f_bfree: UInt64
  var f_bavail: UInt64
  var f_bused: UInt64
  var f_files: UInt64
  var f_ffree: UInt64
  var f_fsid: fsid_t
  var f_owner: uid_t
  var f_flags: UInt64
  var f_fstypename: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_mntonname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_mntfromname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  var f_fssubtype: UInt32
  var f_reserved: (COpaquePointer, COpaquePointer)
  init(f_bsize: UInt32, f_iosize: UInt, f_blocks: UInt64, f_bfree: UInt64, f_bavail: UInt64, f_bused: UInt64, f_files: UInt64, f_ffree: UInt64, f_fsid: fsid_t, f_owner: uid_t, f_flags: UInt64, f_fstypename: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_mntonname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_mntfromname: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar), f_fssubtype: UInt32, f_reserved: (COpaquePointer, COpaquePointer))
}
typealias vfstable_t = COpaquePointer
func vfwprintf(_: CMutablePointer<FILE>, _: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vfwprintf(_: CMutablePointer<FILE>, _: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vfwscanf(_: CMutablePointer<FILE>, _: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vfwscanf(_: CMutablePointer<FILE>, _: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
struct vinfo_stat {
  var vst_dev: UInt32
  var vst_mode: UInt16
  var vst_nlink: UInt16
  var vst_ino: UInt64
  var vst_uid: uid_t
  var vst_gid: gid_t
  var vst_atime: Int64
  var vst_atimensec: Int64
  var vst_mtime: Int64
  var vst_mtimensec: Int64
  var vst_ctime: Int64
  var vst_ctimensec: Int64
  var vst_birthtime: Int64
  var vst_birthtimensec: Int64
  var vst_size: off_t
  var vst_blocks: Int64
  var vst_blksize: Int32
  var vst_flags: UInt32
  var vst_gen: UInt32
  var vst_rdev: UInt32
  var vst_qspare: (Int64, Int64)
  init(vst_dev: UInt32, vst_mode: UInt16, vst_nlink: UInt16, vst_ino: UInt64, vst_uid: uid_t, vst_gid: gid_t, vst_atime: Int64, vst_atimensec: Int64, vst_mtime: Int64, vst_mtimensec: Int64, vst_ctime: Int64, vst_ctimensec: Int64, vst_birthtime: Int64, vst_birthtimensec: Int64, vst_size: off_t, vst_blocks: Int64, vst_blksize: Int32, vst_flags: UInt32, vst_gen: UInt32, vst_rdev: UInt32, vst_qspare: (Int64, Int64))
}
typealias vm32_object_id_t = UInt32
typealias vm_address_t = vm_offset_t
func vm_allocate(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: vm_size_t, flags: CInt) -> kern_return_t
func vm_allocate(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: vm_size_t, flags: CInt) -> kern_return_t
func vm_allocate_cpm(host_priv: host_priv_t, task: vm_map_t, address: CMutablePointer<vm_address_t>, size: vm_size_t, flags: CInt) -> kern_return_t
func vm_allocate_cpm(host_priv: host_priv_t, task: vm_map_t, address: CMutablePointer<vm_address_t>, size: vm_size_t, flags: CInt) -> kern_return_t
func vm_behavior_set(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, new_behavior: vm_behavior_t) -> kern_return_t
func vm_behavior_set(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, new_behavior: vm_behavior_t) -> kern_return_t
typealias vm_behavior_t = CInt
func vm_copy(target_task: vm_map_t, source_address: vm_address_t, size: vm_size_t, dest_address: vm_address_t) -> kern_return_t
func vm_copy(target_task: vm_map_t, source_address: vm_address_t, size: vm_size_t, dest_address: vm_address_t) -> kern_return_t
func vm_deallocate(target_task: vm_map_t, address: vm_address_t, size: vm_size_t) -> kern_return_t
func vm_deallocate(target_task: vm_map_t, address: vm_address_t, size: vm_size_t) -> kern_return_t
struct vm_extmod_statistics {
  var task_for_pid_count: Int64
  var task_for_pid_caller_count: Int64
  var thread_creation_count: Int64
  var thread_creation_caller_count: Int64
  var thread_set_state_count: Int64
  var thread_set_state_caller_count: Int64
  init(task_for_pid_count: Int64, task_for_pid_caller_count: Int64, thread_creation_count: Int64, thread_creation_caller_count: Int64, thread_set_state_count: Int64, thread_set_state_caller_count: Int64)
}
typealias vm_extmod_statistics_data_t = vm_extmod_statistics
typealias vm_extmod_statistics_t = UnsafePointer<vm_extmod_statistics>
struct vm_info_object {
  var vio_object: natural_t
  var vio_size: natural_t
  var vio_ref_count: CUnsignedInt
  var vio_resident_page_count: CUnsignedInt
  var vio_absent_count: CUnsignedInt
  var vio_copy: natural_t
  var vio_shadow: natural_t
  var vio_shadow_offset: natural_t
  var vio_paging_offset: natural_t
  var vio_copy_strategy: memory_object_copy_strategy_t
  var vio_last_alloc: vm_offset_t
  var vio_paging_in_progress: CUnsignedInt
  var vio_pager_created: boolean_t
  var vio_pager_initialized: boolean_t
  var vio_pager_ready: boolean_t
  var vio_can_persist: boolean_t
  var vio_internal: boolean_t
  var vio_temporary: boolean_t
  var vio_alive: boolean_t
  var vio_purgable: boolean_t
  var vio_purgable_volatile: boolean_t
  init(vio_object: natural_t, vio_size: natural_t, vio_ref_count: CUnsignedInt, vio_resident_page_count: CUnsignedInt, vio_absent_count: CUnsignedInt, vio_copy: natural_t, vio_shadow: natural_t, vio_shadow_offset: natural_t, vio_paging_offset: natural_t, vio_copy_strategy: memory_object_copy_strategy_t, vio_last_alloc: vm_offset_t, vio_paging_in_progress: CUnsignedInt, vio_pager_created: boolean_t, vio_pager_initialized: boolean_t, vio_pager_ready: boolean_t, vio_can_persist: boolean_t, vio_internal: boolean_t, vio_temporary: boolean_t, vio_alive: boolean_t, vio_purgable: boolean_t, vio_purgable_volatile: boolean_t)
}
typealias vm_info_object_array_t = UnsafePointer<vm_info_object_t>
typealias vm_info_object_t = vm_info_object
struct vm_info_region {
  var vir_start: natural_t
  var vir_end: natural_t
  var vir_object: natural_t
  var vir_offset: natural_t
  var vir_needs_copy: boolean_t
  var vir_protection: vm_prot_t
  var vir_max_protection: vm_prot_t
  var vir_inheritance: vm_inherit_t
  var vir_wired_count: natural_t
  var vir_user_wired_count: natural_t
  init(vir_start: natural_t, vir_end: natural_t, vir_object: natural_t, vir_offset: natural_t, vir_needs_copy: boolean_t, vir_protection: vm_prot_t, vir_max_protection: vm_prot_t, vir_inheritance: vm_inherit_t, vir_wired_count: natural_t, vir_user_wired_count: natural_t)
}
struct vm_info_region_64 {
  var vir_start: natural_t
  var vir_end: natural_t
  var vir_object: natural_t
  var vir_offset: memory_object_offset_t
  var vir_needs_copy: boolean_t
  var vir_protection: vm_prot_t
  var vir_max_protection: vm_prot_t
  var vir_inheritance: vm_inherit_t
  var vir_wired_count: natural_t
  var vir_user_wired_count: natural_t
  init(vir_start: natural_t, vir_end: natural_t, vir_object: natural_t, vir_offset: memory_object_offset_t, vir_needs_copy: boolean_t, vir_protection: vm_prot_t, vir_max_protection: vm_prot_t, vir_inheritance: vm_inherit_t, vir_wired_count: natural_t, vir_user_wired_count: natural_t)
}
typealias vm_info_region_64_t = vm_info_region_64
typealias vm_info_region_t = vm_info_region
func vm_inherit(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, new_inheritance: vm_inherit_t) -> kern_return_t
func vm_inherit(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, new_inheritance: vm_inherit_t) -> kern_return_t
typealias vm_inherit_t = CUnsignedInt
var vm_kernel_page_mask: vm_size_t
var vm_kernel_page_shift: CInt
var vm_kernel_page_size: vm_size_t
func vm_machine_attribute(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, attribute: vm_machine_attribute_t, value: CMutablePointer<vm_machine_attribute_val_t>) -> kern_return_t
func vm_machine_attribute(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, attribute: vm_machine_attribute_t, value: CMutablePointer<vm_machine_attribute_val_t>) -> kern_return_t
typealias vm_machine_attribute_t = CUnsignedInt
typealias vm_machine_attribute_val_t = CInt
func vm_map(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: CInt, object: mem_entry_name_port_t, offset: vm_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
func vm_map(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: CInt, object: mem_entry_name_port_t, offset: vm_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
func vm_map_64(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: CInt, object: mem_entry_name_port_t, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
func vm_map_64(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: CInt, object: mem_entry_name_port_t, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
typealias vm_map_address_t = UInt64
typealias vm_map_offset_t = UInt64
func vm_map_page_query(target_map: vm_map_t, offset: vm_offset_t, disposition: CMutablePointer<integer_t>, ref_count: CMutablePointer<integer_t>) -> kern_return_t
func vm_map_page_query(target_map: vm_map_t, offset: vm_offset_t, disposition: CMutablePointer<integer_t>, ref_count: CMutablePointer<integer_t>) -> kern_return_t
typealias vm_map_size_t = UInt64
typealias vm_map_t = mach_port_t
func vm_mapped_pages_info(task: vm_map_t, pages: CMutablePointer<page_address_array_t>, pagesCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func vm_mapped_pages_info(task: vm_map_t, pages: CMutablePointer<page_address_array_t>, pagesCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func vm_msync(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, sync_flags: vm_sync_t) -> kern_return_t
func vm_msync(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, sync_flags: vm_sync_t) -> kern_return_t
typealias vm_named_entry_t = mach_port_t
typealias vm_object_id_t = CUnsignedLongLong
typealias vm_object_offset_t = UInt64
typealias vm_object_size_t = UInt64
typealias vm_offset_t = UInt
struct vm_page_info_basic {
  var disposition: CInt
  var ref_count: CInt
  var object_id: vm_object_id_t
  var offset: memory_object_offset_t
  var depth: CInt
  var __pad: CInt
  init(disposition: CInt, ref_count: CInt, object_id: vm_object_id_t, offset: memory_object_offset_t, depth: CInt, __pad: CInt)
}
typealias vm_page_info_basic_data_t = vm_page_info_basic
typealias vm_page_info_basic_t = UnsafePointer<vm_page_info_basic>
typealias vm_page_info_flavor_t = CInt
typealias vm_page_info_t = UnsafePointer<CInt>
var vm_page_mask: vm_size_t
var vm_page_shift: CInt
var vm_page_size: vm_size_t
typealias vm_prot_t = CInt
func vm_protect(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
func vm_protect(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
func vm_purgable_control(target_task: vm_map_t, address: vm_address_t, control: vm_purgable_t, state: CMutablePointer<CInt>) -> kern_return_t
func vm_purgable_control(target_task: vm_map_t, address: vm_address_t, control: vm_purgable_t, state: CMutablePointer<CInt>) -> kern_return_t
typealias vm_purgable_t = CInt
struct vm_purgeable_info {
  var fifo_data: (vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t)
  var obsolete_data: vm_purgeable_stat_t
  var lifo_data: (vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t)
  init(fifo_data: (vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t), obsolete_data: vm_purgeable_stat_t, lifo_data: (vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t))
}
typealias vm_purgeable_info_t = UnsafePointer<vm_purgeable_info>
struct vm_purgeable_stat {
  var count: UInt64
  var size: UInt64
  init(count: UInt64, size: UInt64)
}
typealias vm_purgeable_stat_t = vm_purgeable_stat
typealias vm_range_recorder_t = (task_t, CMutableVoidPointer, CUnsignedInt, CMutablePointer<vm_range_t>, CUnsignedInt) -> Void
struct vm_range_t {
  var address: vm_address_t
  var size: vm_size_t
  init(address: vm_address_t, size: vm_size_t)
}
func vm_read(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, data: CMutablePointer<vm_offset_t>, dataCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func vm_read(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, data: CMutablePointer<vm_offset_t>, dataCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct vm_read_entry {
  var address: vm_address_t
  var size: vm_size_t
  init(address: vm_address_t, size: vm_size_t)
}
typealias vm_read_entry_t = (vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry)
func vm_read_list(target_task: vm_map_t, data_list: CMutablePointer<vm_read_entry>, count: natural_t) -> kern_return_t
func vm_read_list(target_task: vm_map_t, data_list: CMutablePointer<vm_read_entry>, count: natural_t) -> kern_return_t
func vm_read_overwrite(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, data: vm_address_t, outsize: CMutablePointer<vm_size_t>) -> kern_return_t
func vm_read_overwrite(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, data: vm_address_t, outsize: CMutablePointer<vm_size_t>) -> kern_return_t
func vm_region(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: CMutablePointer<vm_size_t>, flavor: vm_region_flavor_t, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>, object_name: CMutablePointer<mach_port_t>) -> kern_return_t
func vm_region(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: CMutablePointer<vm_size_t>, flavor: vm_region_flavor_t, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>, object_name: CMutablePointer<mach_port_t>) -> kern_return_t
func vm_region_64(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: CMutablePointer<vm_size_t>, flavor: vm_region_flavor_t, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>, object_name: CMutablePointer<mach_port_t>) -> kern_return_t
func vm_region_64(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: CMutablePointer<vm_size_t>, flavor: vm_region_flavor_t, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>, object_name: CMutablePointer<mach_port_t>) -> kern_return_t
struct vm_region_basic_info {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var shared: boolean_t
  var reserved: boolean_t
  var offset: UInt32
  var behavior: vm_behavior_t
  var user_wired_count: CUnsignedShort
  init(protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t, shared: boolean_t, reserved: boolean_t, offset: UInt32, behavior: vm_behavior_t, user_wired_count: CUnsignedShort)
}
struct vm_region_basic_info_64 {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var shared: boolean_t
  var reserved: boolean_t
  var offset: memory_object_offset_t
  var behavior: vm_behavior_t
  var user_wired_count: CUnsignedShort
  init(protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t, shared: boolean_t, reserved: boolean_t, offset: memory_object_offset_t, behavior: vm_behavior_t, user_wired_count: CUnsignedShort)
}
typealias vm_region_basic_info_64_t = UnsafePointer<vm_region_basic_info_64>
typealias vm_region_basic_info_data_64_t = vm_region_basic_info_64
typealias vm_region_basic_info_data_t = vm_region_basic_info
typealias vm_region_basic_info_t = UnsafePointer<vm_region_basic_info>
struct vm_region_extended_info {
  var protection: vm_prot_t
  var user_tag: CUnsignedInt
  var pages_resident: CUnsignedInt
  var pages_shared_now_private: CUnsignedInt
  var pages_swapped_out: CUnsignedInt
  var pages_dirtied: CUnsignedInt
  var ref_count: CUnsignedInt
  var shadow_depth: CUnsignedShort
  var external_pager: CUnsignedChar
  var share_mode: CUnsignedChar
  var pages_reusable: CUnsignedInt
  init(protection: vm_prot_t, user_tag: CUnsignedInt, pages_resident: CUnsignedInt, pages_shared_now_private: CUnsignedInt, pages_swapped_out: CUnsignedInt, pages_dirtied: CUnsignedInt, ref_count: CUnsignedInt, shadow_depth: CUnsignedShort, external_pager: CUnsignedChar, share_mode: CUnsignedChar, pages_reusable: CUnsignedInt)
}
typealias vm_region_extended_info_data_t = vm_region_extended_info
typealias vm_region_extended_info_t = UnsafePointer<vm_region_extended_info>
typealias vm_region_flavor_t = CInt
typealias vm_region_info_64_t = UnsafePointer<CInt>
typealias vm_region_info_data_t = (CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt)
typealias vm_region_info_t = UnsafePointer<CInt>
func vm_region_recurse(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: CMutablePointer<vm_size_t>, nesting_depth: CMutablePointer<natural_t>, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func vm_region_recurse(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: CMutablePointer<vm_size_t>, nesting_depth: CMutablePointer<natural_t>, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func vm_region_recurse_64(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: CMutablePointer<vm_size_t>, nesting_depth: CMutablePointer<natural_t>, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func vm_region_recurse_64(target_task: vm_map_t, address: CMutablePointer<vm_address_t>, size: CMutablePointer<vm_size_t>, nesting_depth: CMutablePointer<natural_t>, info: CMutablePointer<CInt>, infoCnt: CMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias vm_region_recurse_info_64_t = UnsafePointer<CInt>
typealias vm_region_recurse_info_t = UnsafePointer<CInt>
struct vm_region_submap_info {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var offset: UInt32
  var user_tag: CUnsignedInt
  var pages_resident: CUnsignedInt
  var pages_shared_now_private: CUnsignedInt
  var pages_swapped_out: CUnsignedInt
  var pages_dirtied: CUnsignedInt
  var ref_count: CUnsignedInt
  var shadow_depth: CUnsignedShort
  var external_pager: CUnsignedChar
  var share_mode: CUnsignedChar
  var is_submap: boolean_t
  var behavior: vm_behavior_t
  var object_id: vm32_object_id_t
  var user_wired_count: CUnsignedShort
  init(protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t, offset: UInt32, user_tag: CUnsignedInt, pages_resident: CUnsignedInt, pages_shared_now_private: CUnsignedInt, pages_swapped_out: CUnsignedInt, pages_dirtied: CUnsignedInt, ref_count: CUnsignedInt, shadow_depth: CUnsignedShort, external_pager: CUnsignedChar, share_mode: CUnsignedChar, is_submap: boolean_t, behavior: vm_behavior_t, object_id: vm32_object_id_t, user_wired_count: CUnsignedShort)
}
struct vm_region_submap_info_64 {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var offset: memory_object_offset_t
  var user_tag: CUnsignedInt
  var pages_resident: CUnsignedInt
  var pages_shared_now_private: CUnsignedInt
  var pages_swapped_out: CUnsignedInt
  var pages_dirtied: CUnsignedInt
  var ref_count: CUnsignedInt
  var shadow_depth: CUnsignedShort
  var external_pager: CUnsignedChar
  var share_mode: CUnsignedChar
  var is_submap: boolean_t
  var behavior: vm_behavior_t
  var object_id: vm32_object_id_t
  var user_wired_count: CUnsignedShort
  var pages_reusable: CUnsignedInt
  init(protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t, offset: memory_object_offset_t, user_tag: CUnsignedInt, pages_resident: CUnsignedInt, pages_shared_now_private: CUnsignedInt, pages_swapped_out: CUnsignedInt, pages_dirtied: CUnsignedInt, ref_count: CUnsignedInt, shadow_depth: CUnsignedShort, external_pager: CUnsignedChar, share_mode: CUnsignedChar, is_submap: boolean_t, behavior: vm_behavior_t, object_id: vm32_object_id_t, user_wired_count: CUnsignedShort, pages_reusable: CUnsignedInt)
}
typealias vm_region_submap_info_64_t = UnsafePointer<vm_region_submap_info_64>
typealias vm_region_submap_info_data_64_t = vm_region_submap_info_64
typealias vm_region_submap_info_data_t = vm_region_submap_info
typealias vm_region_submap_info_t = UnsafePointer<vm_region_submap_info>
struct vm_region_submap_short_info_64 {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var offset: memory_object_offset_t
  var user_tag: CUnsignedInt
  var ref_count: CUnsignedInt
  var shadow_depth: CUnsignedShort
  var external_pager: CUnsignedChar
  var share_mode: CUnsignedChar
  var is_submap: boolean_t
  var behavior: vm_behavior_t
  var object_id: vm32_object_id_t
  var user_wired_count: CUnsignedShort
  init(protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t, offset: memory_object_offset_t, user_tag: CUnsignedInt, ref_count: CUnsignedInt, shadow_depth: CUnsignedShort, external_pager: CUnsignedChar, share_mode: CUnsignedChar, is_submap: boolean_t, behavior: vm_behavior_t, object_id: vm32_object_id_t, user_wired_count: CUnsignedShort)
}
typealias vm_region_submap_short_info_64_t = UnsafePointer<vm_region_submap_short_info_64>
typealias vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64
struct vm_region_top_info {
  var obj_id: CUnsignedInt
  var ref_count: CUnsignedInt
  var private_pages_resident: CUnsignedInt
  var shared_pages_resident: CUnsignedInt
  var share_mode: CUnsignedChar
  init(obj_id: CUnsignedInt, ref_count: CUnsignedInt, private_pages_resident: CUnsignedInt, shared_pages_resident: CUnsignedInt, share_mode: CUnsignedChar)
}
typealias vm_region_top_info_data_t = vm_region_top_info
typealias vm_region_top_info_t = UnsafePointer<vm_region_top_info>
func vm_remap(target_task: vm_map_t, target_address: CMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: CInt, src_task: vm_map_t, src_address: vm_address_t, copy: boolean_t, cur_protection: CMutablePointer<vm_prot_t>, max_protection: CMutablePointer<vm_prot_t>, inheritance: vm_inherit_t) -> kern_return_t
func vm_remap(target_task: vm_map_t, target_address: CMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: CInt, src_task: vm_map_t, src_address: vm_address_t, copy: boolean_t, cur_protection: CMutablePointer<vm_prot_t>, max_protection: CMutablePointer<vm_prot_t>, inheritance: vm_inherit_t) -> kern_return_t
typealias vm_size_t = UInt
struct vm_statistics {
  var free_count: natural_t
  var active_count: natural_t
  var inactive_count: natural_t
  var wire_count: natural_t
  var zero_fill_count: natural_t
  var reactivations: natural_t
  var pageins: natural_t
  var pageouts: natural_t
  var faults: natural_t
  var cow_faults: natural_t
  var lookups: natural_t
  var hits: natural_t
  var purgeable_count: natural_t
  var purges: natural_t
  var speculative_count: natural_t
  init(free_count: natural_t, active_count: natural_t, inactive_count: natural_t, wire_count: natural_t, zero_fill_count: natural_t, reactivations: natural_t, pageins: natural_t, pageouts: natural_t, faults: natural_t, cow_faults: natural_t, lookups: natural_t, hits: natural_t, purgeable_count: natural_t, purges: natural_t, speculative_count: natural_t)
}
struct vm_statistics64 {
  var free_count: natural_t
  var active_count: natural_t
  var inactive_count: natural_t
  var wire_count: natural_t
  var zero_fill_count: UInt64
  var reactivations: UInt64
  var pageins: UInt64
  var pageouts: UInt64
  var faults: UInt64
  var cow_faults: UInt64
  var lookups: UInt64
  var hits: UInt64
  var purges: UInt64
  var purgeable_count: natural_t
  var speculative_count: natural_t
  var decompressions: UInt64
  var compressions: UInt64
  var swapins: UInt64
  var swapouts: UInt64
  var compressor_page_count: natural_t
  var throttled_count: natural_t
  var external_page_count: natural_t
  var internal_page_count: natural_t
  var total_uncompressed_pages_in_compressor: UInt64
  init(free_count: natural_t, active_count: natural_t, inactive_count: natural_t, wire_count: natural_t, zero_fill_count: UInt64, reactivations: UInt64, pageins: UInt64, pageouts: UInt64, faults: UInt64, cow_faults: UInt64, lookups: UInt64, hits: UInt64, purges: UInt64, purgeable_count: natural_t, speculative_count: natural_t, decompressions: UInt64, compressions: UInt64, swapins: UInt64, swapouts: UInt64, compressor_page_count: natural_t, throttled_count: natural_t, external_page_count: natural_t, internal_page_count: natural_t, total_uncompressed_pages_in_compressor: UInt64)
}
typealias vm_statistics64_data_t = vm_statistics64
typealias vm_statistics64_t = UnsafePointer<vm_statistics64>
typealias vm_statistics_data_t = vm_statistics
typealias vm_statistics_t = UnsafePointer<vm_statistics>
typealias vm_sync_t = CUnsignedInt
typealias vm_task_entry_t = mach_port_t
func vm_wire(host_priv: host_priv_t, task: vm_map_t, address: vm_address_t, size: vm_size_t, desired_access: vm_prot_t) -> kern_return_t
func vm_wire(host_priv: host_priv_t, task: vm_map_t, address: vm_address_t, size: vm_size_t, desired_access: vm_prot_t) -> kern_return_t
func vm_write(target_task: vm_map_t, address: vm_address_t, data: vm_offset_t, dataCnt: mach_msg_type_number_t) -> kern_return_t
func vm_write(target_task: vm_map_t, address: vm_address_t, data: vm_offset_t, dataCnt: mach_msg_type_number_t) -> kern_return_t
struct vmspace {
  var dummy: Int32
  var dummy2: caddr_t
  var dummy3: (Int32, Int32, Int32, Int32, Int32)
  var dummy4: (caddr_t, caddr_t, caddr_t)
  init(dummy: Int32, dummy2: caddr_t, dummy3: (Int32, Int32, Int32, Int32, Int32), dummy4: (caddr_t, caddr_t, caddr_t))
}
struct vnode_fdinfo {
  var pfi: proc_fileinfo
  var pvi: vnode_info
  init(pfi: proc_fileinfo, pvi: vnode_info)
}
struct vnode_fdinfowithpath {
  var pfi: proc_fileinfo
  var pvip: vnode_info_path
  init(pfi: proc_fileinfo, pvip: vnode_info_path)
}
struct vnode_info {
  var vi_stat: vinfo_stat
  var vi_type: CInt
  var vi_pad: CInt
  var vi_fsid: fsid_t
  init(vi_stat: vinfo_stat, vi_type: CInt, vi_pad: CInt, vi_fsid: fsid_t)
}
struct vnode_info_path {
  var vip_vi: vnode_info
  var vip_path: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(vip_vi: vnode_info, vip_path: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
typealias vnode_t = COpaquePointer
struct vol_attributes_attr {
  var validattr: attribute_set_t
  var nativeattr: attribute_set_t
  init(validattr: attribute_set_t, nativeattr: attribute_set_t)
}
typealias vol_attributes_attr_t = vol_attributes_attr
struct vol_capabilities_attr {
  var capabilities: vol_capabilities_set_t
  var valid: vol_capabilities_set_t
  init(capabilities: vol_capabilities_set_t, valid: vol_capabilities_set_t)
}
typealias vol_capabilities_attr_t = vol_capabilities_attr
typealias vol_capabilities_set_t = (UInt32, UInt32, UInt32, UInt32)
func voucher_mach_msg_adopt(msg: CMutablePointer<mach_msg_header_t>) -> voucher_mach_msg_state_t
func voucher_mach_msg_adopt(msg: CMutablePointer<mach_msg_header_t>) -> voucher_mach_msg_state_t
func voucher_mach_msg_clear(msg: CMutablePointer<mach_msg_header_t>)
func voucher_mach_msg_clear(msg: CMutablePointer<mach_msg_header_t>)
func voucher_mach_msg_revert(state: voucher_mach_msg_state_t)
func voucher_mach_msg_revert(state: voucher_mach_msg_state_t)
func voucher_mach_msg_set(msg: CMutablePointer<mach_msg_header_t>) -> boolean_t
func voucher_mach_msg_set(msg: CMutablePointer<mach_msg_header_t>) -> boolean_t
typealias voucher_mach_msg_state_t = COpaquePointer
func vprintf(_: CString, _: CVaListPointer) -> CInt
func vprintf(_: CString, _: CVaListPointer) -> CInt
func vscanf(_: CString, _: CVaListPointer) -> CInt
func vscanf(_: CString, _: CVaListPointer) -> CInt
func vsnprintf(_: CMutablePointer<CChar>, _: UInt, _: CString, _: CVaListPointer) -> CInt
func vsnprintf(_: CMutablePointer<CChar>, _: UInt, _: CString, _: CVaListPointer) -> CInt
func vsprintf(_: CMutablePointer<CChar>, _: CString, _: CVaListPointer) -> CInt
func vsprintf(_: CMutablePointer<CChar>, _: CString, _: CVaListPointer) -> CInt
func vsscanf(_: CString, _: CString, _: CVaListPointer) -> CInt
func vsscanf(_: CString, _: CString, _: CVaListPointer) -> CInt
func vswprintf(_: CMutablePointer<wchar_t>, _: UInt, _: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vswprintf(_: CMutablePointer<wchar_t>, _: UInt, _: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vswscanf(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vswscanf(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vsyslog(_: CInt, _: CString, _: CVaListPointer)
func vsyslog(_: CInt, _: CString, _: CVaListPointer)
func vwprintf(_: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vwprintf(_: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vwscanf(_: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func vwscanf(_: CConstPointer<wchar_t>, _: CVaListPointer) -> CInt
func wait(_: CMutablePointer<CInt>) -> pid_t
func wait(_: CMutablePointer<CInt>) -> pid_t
func wait3(_: CMutablePointer<CInt>, _: CInt, _: CMutablePointer<rusage>) -> pid_t
func wait3(_: CMutablePointer<CInt>, _: CInt, _: CMutablePointer<rusage>) -> pid_t
func wait4(_: pid_t, _: CMutablePointer<CInt>, _: CInt, _: CMutablePointer<rusage>) -> pid_t
func wait4(_: pid_t, _: CMutablePointer<CInt>, _: CInt, _: CMutablePointer<rusage>) -> pid_t
func waitevent(_: CMutablePointer<eventreq>, _: CMutablePointer<timeval>) -> CInt
func waitevent(_: CMutablePointer<eventreq>, _: CMutablePointer<timeval>) -> CInt
func waitid(_: idtype_t, _: id_t, _: CMutablePointer<siginfo_t>, _: CInt) -> CInt
func waitid(_: idtype_t, _: id_t, _: CMutablePointer<siginfo_t>, _: CInt) -> CInt
func waitpid(_: pid_t, _: CMutablePointer<CInt>, _: CInt) -> pid_t
func waitpid(_: pid_t, _: CMutablePointer<CInt>, _: CInt) -> pid_t
func watchevent(_: CMutablePointer<eventreq>, _: CInt) -> CInt
func watchevent(_: CMutablePointer<eventreq>, _: CInt) -> CInt
typealias wchar_t = CInt
func wcpcpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcpcpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcpncpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wcpncpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wcrtomb(_: CMutablePointer<CChar>, _: wchar_t, _: COpaquePointer) -> UInt
func wcrtomb(_: CMutablePointer<CChar>, _: wchar_t, _: COpaquePointer) -> UInt
func wcscasecmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> CInt
func wcscasecmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> CInt
func wcscat(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcscat(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcschr(_: CConstPointer<wchar_t>, _: wchar_t) -> UnsafePointer<wchar_t>
func wcschr(_: CConstPointer<wchar_t>, _: wchar_t) -> UnsafePointer<wchar_t>
func wcscmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> CInt
func wcscmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> CInt
func wcscoll(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> CInt
func wcscoll(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> CInt
func wcscpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcscpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcscspn(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> UInt
func wcscspn(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> UInt
func wcsdup(_: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcsdup(_: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcsftime(_: CMutablePointer<wchar_t>, _: UInt, _: CConstPointer<wchar_t>, _: CConstPointer<tm>) -> UInt
func wcsftime(_: CMutablePointer<wchar_t>, _: UInt, _: CConstPointer<wchar_t>, _: CConstPointer<tm>) -> UInt
func wcslcat(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcslcat(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcslcpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcslcpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcslen(_: CConstPointer<wchar_t>) -> UInt
func wcslen(_: CConstPointer<wchar_t>) -> UInt
func wcsncasecmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>, n: UInt) -> CInt
func wcsncasecmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>, n: UInt) -> CInt
func wcsncat(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wcsncat(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wcsncmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> CInt
func wcsncmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> CInt
func wcsncpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wcsncpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wcsnlen(_: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcsnlen(_: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcsnrtombs(_: CMutablePointer<CChar>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: UInt, _: UInt, _: COpaquePointer) -> UInt
func wcsnrtombs(_: CMutablePointer<CChar>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: UInt, _: UInt, _: COpaquePointer) -> UInt
func wcspbrk(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcspbrk(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcsrchr(_: CConstPointer<wchar_t>, _: wchar_t) -> UnsafePointer<wchar_t>
func wcsrchr(_: CConstPointer<wchar_t>, _: wchar_t) -> UnsafePointer<wchar_t>
func wcsrtombs(_: CMutablePointer<CChar>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: UInt, _: COpaquePointer) -> UInt
func wcsrtombs(_: CMutablePointer<CChar>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: UInt, _: COpaquePointer) -> UInt
func wcsspn(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> UInt
func wcsspn(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> UInt
func wcsstr(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcsstr(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>) -> UnsafePointer<wchar_t>
func wcstod(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>) -> CDouble
func wcstod(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>) -> CDouble
func wcstof(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>) -> CFloat
func wcstof(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>) -> CFloat
func wcstoimax(__nptr: CConstPointer<wchar_t>, __endptr: CMutablePointer<UnsafePointer<wchar_t>>, __base: CInt) -> intmax_t
func wcstoimax(__nptr: CConstPointer<wchar_t>, __endptr: CMutablePointer<UnsafePointer<wchar_t>>, __base: CInt) -> intmax_t
func wcstok(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>) -> UnsafePointer<wchar_t>
func wcstok(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>) -> UnsafePointer<wchar_t>
func wcstol(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: CInt) -> CLong
func wcstol(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: CInt) -> CLong
func wcstoll(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: CInt) -> CLongLong
func wcstoll(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: CInt) -> CLongLong
func wcstombs(_: CMutablePointer<CChar>, _: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcstombs(_: CMutablePointer<CChar>, _: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcstoul(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: CInt) -> CUnsignedLong
func wcstoul(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: CInt) -> CUnsignedLong
func wcstoull(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: CInt) -> CUnsignedLongLong
func wcstoull(_: CConstPointer<wchar_t>, _: CMutablePointer<UnsafePointer<wchar_t>>, _: CInt) -> CUnsignedLongLong
func wcstoumax(__nptr: CConstPointer<wchar_t>, __endptr: CMutablePointer<UnsafePointer<wchar_t>>, __base: CInt) -> uintmax_t
func wcstoumax(__nptr: CConstPointer<wchar_t>, __endptr: CMutablePointer<UnsafePointer<wchar_t>>, __base: CInt) -> uintmax_t
func wcswidth(_: CConstPointer<wchar_t>, _: UInt) -> CInt
func wcswidth(_: CConstPointer<wchar_t>, _: UInt) -> CInt
func wcsxfrm(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UInt
func wcsxfrm(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UInt
func wctob(_: wint_t) -> CInt
func wctob(_: wint_t) -> CInt
func wctomb(_: CMutablePointer<CChar>, _: wchar_t) -> CInt
func wctomb(_: CMutablePointer<CChar>, _: wchar_t) -> CInt
func wctrans(_: CString) -> wctrans_t
func wctrans(_: CString) -> wctrans_t
typealias wctrans_t = __darwin_wctrans_t
func wctype(_: CString) -> wctype_t
func wctype(_: CString) -> wctype_t
typealias wctype_t = __darwin_wctype_t
func wcwidth(_: wchar_t) -> CInt
func wcwidth(_: wchar_t) -> CInt
struct wide {
  var lo: UInt32
  var hi: Int32
  init(lo: UInt32, hi: Int32)
}
struct winsize {
  var ws_row: CUnsignedShort
  var ws_col: CUnsignedShort
  var ws_xpixel: CUnsignedShort
  var ws_ypixel: CUnsignedShort
  init(ws_row: CUnsignedShort, ws_col: CUnsignedShort, ws_xpixel: CUnsignedShort, ws_ypixel: CUnsignedShort)
}
typealias wint_t = __darwin_wint_t
func wmemchr(_: CConstPointer<wchar_t>, _: wchar_t, _: UInt) -> UnsafePointer<wchar_t>
func wmemchr(_: CConstPointer<wchar_t>, _: wchar_t, _: UInt) -> UnsafePointer<wchar_t>
func wmemcmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> CInt
func wmemcmp(_: CConstPointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> CInt
func wmemcpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wmemcpy(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wmemmove(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wmemmove(_: CMutablePointer<wchar_t>, _: CConstPointer<wchar_t>, _: UInt) -> UnsafePointer<wchar_t>
func wmemset(_: CMutablePointer<wchar_t>, _: wchar_t, _: UInt) -> UnsafePointer<wchar_t>
func wmemset(_: CMutablePointer<wchar_t>, _: wchar_t, _: UInt) -> UnsafePointer<wchar_t>
func wordexp(_: CString, _: CMutablePointer<wordexp_t>, _: CInt) -> CInt
func wordexp(_: CString, _: CMutablePointer<wordexp_t>, _: CInt) -> CInt
struct wordexp_t {
  var we_wordc: UInt
  var we_wordv: UnsafePointer<UnsafePointer<CChar>>
  var we_offs: UInt
  init(we_wordc: UInt, we_wordv: UnsafePointer<UnsafePointer<CChar>>, we_offs: UInt)
}
func wordfree(_: CMutablePointer<wordexp_t>)
func wordfree(_: CMutablePointer<wordexp_t>)
func write(_: CInt, _: CConstVoidPointer, _: UInt) -> Int
func write(_: CInt, _: CConstVoidPointer, _: UInt) -> Int
func write_random(buffer: CMutableVoidPointer, numBytes: u_int) -> CInt
func write_random(buffer: CMutableVoidPointer, numBytes: u_int) -> CInt
func writev(_: CInt, _: CConstPointer<iovec>, _: CInt) -> Int
func writev(_: CInt, _: CConstPointer<iovec>, _: CInt) -> Int
func wtmpxname(_: CString) -> CInt
func wtmpxname(_: CString) -> CInt
struct x86_avx_state {
  var ash: x86_state_hdr_t
  init(ash: x86_state_hdr_t)
}
typealias x86_avx_state32_t = __darwin_i386_avx_state
typealias x86_avx_state64_t = __darwin_x86_avx_state64
typealias x86_avx_state_t = x86_avx_state
struct x86_debug_state {
  var dsh: x86_state_hdr_t
  init(dsh: x86_state_hdr_t)
}
typealias x86_debug_state32_t = __darwin_x86_debug_state32
typealias x86_debug_state64_t = __darwin_x86_debug_state64
typealias x86_debug_state_t = x86_debug_state
struct x86_exception_state {
  var esh: x86_state_hdr_t
  init(esh: x86_state_hdr_t)
}
typealias x86_exception_state32_t = __darwin_i386_exception_state
typealias x86_exception_state64_t = __darwin_x86_exception_state64
typealias x86_exception_state_t = x86_exception_state
struct x86_float_state {
  var fsh: x86_state_hdr_t
  init(fsh: x86_state_hdr_t)
}
typealias x86_float_state32_t = __darwin_i386_float_state
typealias x86_float_state64_t = __darwin_x86_float_state64
typealias x86_float_state_t = x86_float_state
struct x86_state_hdr {
  var flavor: CInt
  var count: CInt
  init(flavor: CInt, count: CInt)
}
typealias x86_state_hdr_t = x86_state_hdr
struct x86_thread_state {
  var tsh: x86_state_hdr_t
  init(tsh: x86_state_hdr_t)
}
typealias x86_thread_state32_t = __darwin_i386_thread_state
typealias x86_thread_state64_t = __darwin_x86_thread_state64
typealias x86_thread_state_t = x86_thread_state
struct xsockbuf {
  var sb_cc: UInt32
  var sb_hiwat: UInt32
  var sb_mbcnt: UInt32
  var sb_mbmax: UInt32
  var sb_lowat: Int32
  var sb_flags: CShort
  var sb_timeo: CShort
  init(sb_cc: UInt32, sb_hiwat: UInt32, sb_mbcnt: UInt32, sb_mbmax: UInt32, sb_lowat: Int32, sb_flags: CShort, sb_timeo: CShort)
}
struct xsocket {
  var xso_len: UInt32
  var xso_so: UInt32
  var so_type: CShort
  var so_options: CShort
  var so_linger: CShort
  var so_state: CShort
  var so_pcb: UInt32
  var xso_protocol: CInt
  var xso_family: CInt
  var so_qlen: CShort
  var so_incqlen: CShort
  var so_qlimit: CShort
  var so_timeo: CShort
  var so_error: u_short
  var so_pgid: pid_t
  var so_oobmark: UInt32
  var so_rcv: xsockbuf
  var so_snd: xsockbuf
  var so_uid: uid_t
  init(xso_len: UInt32, xso_so: UInt32, so_type: CShort, so_options: CShort, so_linger: CShort, so_state: CShort, so_pcb: UInt32, xso_protocol: CInt, xso_family: CInt, so_qlen: CShort, so_incqlen: CShort, so_qlimit: CShort, so_timeo: CShort, so_error: u_short, so_pgid: pid_t, so_oobmark: UInt32, so_rcv: xsockbuf, so_snd: xsockbuf, so_uid: uid_t)
}
struct xsocket64 {
  var xso_len: UInt32
  var xso_so: UInt64
  var so_type: CShort
  var so_options: CShort
  var so_linger: CShort
  var so_state: CShort
  var so_pcb: UInt64
  var xso_protocol: CInt
  var xso_family: CInt
  var so_qlen: CShort
  var so_incqlen: CShort
  var so_qlimit: CShort
  var so_timeo: CShort
  var so_error: u_short
  var so_pgid: pid_t
  var so_oobmark: UInt32
  var so_rcv: xsockbuf
  var so_snd: xsockbuf
  var so_uid: uid_t
  init(xso_len: UInt32, xso_so: UInt64, so_type: CShort, so_options: CShort, so_linger: CShort, so_state: CShort, so_pcb: UInt64, xso_protocol: CInt, xso_family: CInt, so_qlen: CShort, so_incqlen: CShort, so_qlimit: CShort, so_timeo: CShort, so_error: u_short, so_pgid: pid_t, so_oobmark: UInt32, so_rcv: xsockbuf, so_snd: xsockbuf, so_uid: uid_t)
}
struct xsw_usage {
  var xsu_total: UInt64
  var xsu_avail: UInt64
  var xsu_used: UInt64
  var xsu_pagesize: UInt32
  var xsu_encrypted: boolean_t
  init(xsu_total: UInt64, xsu_avail: UInt64, xsu_used: UInt64, xsu_pagesize: UInt32, xsu_encrypted: boolean_t)
}
struct xucred {
  var cr_version: u_int
  var cr_uid: uid_t
  var cr_ngroups: CShort
  var cr_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t)
  init(cr_version: u_int, cr_uid: uid_t, cr_ngroups: CShort, cr_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t))
}
struct xunpgen {
  var xug_len: UInt32
  var xug_count: u_int
  var xug_gen: unp_gen_t
  var xug_sogen: so_gen_t
  init(xug_len: UInt32, xug_count: u_int, xug_gen: unp_gen_t, xug_sogen: so_gen_t)
}
func y0(_: CDouble) -> CDouble
func y0(_: CDouble) -> CDouble
func y1(_: CDouble) -> CDouble
func y1(_: CDouble) -> CDouble
func yn(_: CInt, _: CDouble) -> CDouble
func yn(_: CInt, _: CDouble) -> CDouble
struct zone_info {
  var zi_count: integer_t
  var zi_cur_size: vm_size_t
  var zi_max_size: vm_size_t
  var zi_elem_size: vm_size_t
  var zi_alloc_size: vm_size_t
  var zi_pageable: integer_t
  var zi_sleepable: integer_t
  var zi_exhaustible: integer_t
  var zi_collectable: integer_t
  init(zi_count: integer_t, zi_cur_size: vm_size_t, zi_max_size: vm_size_t, zi_elem_size: vm_size_t, zi_alloc_size: vm_size_t, zi_pageable: integer_t, zi_sleepable: integer_t, zi_exhaustible: integer_t, zi_collectable: integer_t)
}
typealias zone_info_array_t = UnsafePointer<zone_info_t>
typealias zone_info_t = zone_info
struct zone_name {
  var zn_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar)
  init(zn_name: (CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar, CChar))
}
typealias zone_name_array_t = UnsafePointer<zone_name_t>
typealias zone_name_t = zone_name
func zopen(_: CString, _: CString, _: CInt) -> UnsafePointer<FILE>
func zopen(_: CString, _: CString, _: CInt) -> UnsafePointer<FILE>
var EMULTIHOP: CInt {
  get {
    return
  }
}
var IPC_NOWAIT: CInt {
  get {
    return
  }
}
var ENAMETOOLONG: CInt {
  get {
    return
  }
}
var ENEEDAUTH: CInt {
  get {
    return
  }
}
var IPC_R: CInt {
  get {
    return
  }
}
var IPC_RMID: CInt {
  get {
    return
  }
}
var IPC_SET: CInt {
  get {
    return
  }
}
var ENETDOWN: CInt {
  get {
    return
  }
}
var ENETRESET: CInt {
  get {
    return
  }
}
var ENFILE: CInt {
  get {
    return
  }
}
var IPC_STAT: CInt {
  get {
    return
  }
}
var ENETUNREACH: CInt {
  get {
    return
  }
}
var ENOATTR: CInt {
  get {
    return
  }
}
var ENOBUFS: CInt {
  get {
    return
  }
}
var EIO: CInt {
  get {
    return
  }
}
var EINVAL: CInt {
  get {
    return
  }
}
var IPCTL_RTEXPIRE: CInt {
  get {
    return
  }
}
var EISCONN: CInt {
  get {
    return
  }
}
var IPCTL_RTMAXCACHE: CInt {
  get {
    return
  }
}
var IPCTL_RTMINEXPIRE: CInt {
  get {
    return
  }
}
var EISDIR: CInt {
  get {
    return
  }
}
var ELAST: CInt {
  get {
    return
  }
}
var IPCTL_SENDREDIRECTS: CInt {
  get {
    return
  }
}
var ELOOP: CInt {
  get {
    return
  }
}
var EMFILE: CInt {
  get {
    return
  }
}
var IPCTL_SOURCEROUTE: CInt {
  get {
    return
  }
}
var IPC_CREAT: CInt {
  get {
    return
  }
}
var IPC_EXCL: CInt {
  get {
    return
  }
}
var EMLINK: CInt {
  get {
    return
  }
}
var EMSGSIZE: CInt {
  get {
    return
  }
}
var EMPTY: CInt {
  get {
    return
  }
}
var EFL_VM: CInt {
  get {
    return
  }
}
var EFL_ZF: CInt {
  get {
    return
  }
}
var IPCTL_DIRECTEDBROADCAST: CInt {
  get {
    return
  }
}
var IPCTL_STATS: CInt {
  get {
    return
  }
}
var EFTYPE: CInt {
  get {
    return
  }
}
var EHOSTDOWN: CInt {
  get {
    return
  }
}
var IPCTL_FASTFORWARDING: CInt {
  get {
    return
  }
}
var IPCTL_FORWARDING: CInt {
  get {
    return
  }
}
var EHOSTUNREACH: CInt {
  get {
    return
  }
}
var IPCTL_GIF_TTL: CInt {
  get {
    return
  }
}
var IPC_M: CInt {
  get {
    return
  }
}
var IPCTL_INTRQDROPS: CInt {
  get {
    return
  }
}
var EIDRM: CInt {
  get {
    return
  }
}
var IPCTL_INTRQMAXLEN: CInt {
  get {
    return
  }
}
var EILSEQ: CInt {
  get {
    return
  }
}
var IPCTL_KEEPFAITH: CInt {
  get {
    return
  }
}
var EINTR: CInt {
  get {
    return
  }
}
var EINPROGRESS: CInt {
  get {
    return
  }
}
var IPCTL_MAXID: CInt {
  get {
    return
  }
}
var EFL_OF: CInt {
  get {
    return
  }
}
var IOPOL_SCOPE_THREAD: CInt {
  get {
    return
  }
}
var EFL_PF: CInt {
  get {
    return
  }
}
var IOPOL_STANDARD: CInt {
  get {
    return
  }
}
var EFL_RF: CInt {
  get {
    return
  }
}
var IOPOL_THROTTLE: CInt {
  get {
    return
  }
}
var EFL_SET: CInt {
  get {
    return
  }
}
var IOPOL_TYPE_DISK: CInt {
  get {
    return
  }
}
var EFL_SF: CInt {
  get {
    return
  }
}
var IOPOL_UTILITY: CInt {
  get {
    return
  }
}
var EFL_TF: CInt {
  get {
    return
  }
}
var IOV_MAX: CInt {
  get {
    return
  }
}
var IO_NUM_PRIORITIES: CInt {
  get {
    return
  }
}
var EFL_USER_SET: CInt {
  get {
    return
  }
}
var EFL_VIF: CInt {
  get {
    return
  }
}
var IPCTL_ACCEPTSOURCEROUTE: CInt {
  get {
    return
  }
}
var EFL_VIP: CInt {
  get {
    return
  }
}
var IPCTL_DEFTTL: CInt {
  get {
    return
  }
}
var EPROCUNAVAIL: CInt {
  get {
    return
  }
}
var IPPROTO_EMCON: CInt {
  get {
    return
  }
}
var EPROCLIM: CInt {
  get {
    return
  }
}
var IPPROTO_EGP: CInt {
  get {
    return
  }
}
var EPIPE: CInt {
  get {
    return
  }
}
var EPROC_SLEADER: CInt {
  get {
    return
  }
}
var IPPROTO_EON: CInt {
  get {
    return
  }
}
var EPROC_CTTY: CInt {
  get {
    return
  }
}
var IPPROTO_ENCAP: CInt {
  get {
    return
  }
}
var EPROGUNAVAIL: CInt {
  get {
    return
  }
}
var IPPROTO_ETHERIP: CInt {
  get {
    return
  }
}
var EPROGMISMATCH: CInt {
  get {
    return
  }
}
var IPPROTO_ESP: CInt {
  get {
    return
  }
}
var EPROTOTYPE: CInt {
  get {
    return
  }
}
var IPPROTO_GMTP: CInt {
  get {
    return
  }
}
var EPROTONOSUPPORT: CInt {
  get {
    return
  }
}
var IPPROTO_GGP: CInt {
  get {
    return
  }
}
var EPROTO: CInt {
  get {
    return
  }
}
var ENVIRONMENT_SLOT: CInt {
  get {
    return
  }
}
var IPPROTO_CMTP: CInt {
  get {
    return
  }
}
var IPPROTO_FRAGMENT: CInt {
  get {
    return
  }
}
var ENOTTY: CInt {
  get {
    return
  }
}
var IPPROTO_CHAOS: CInt {
  get {
    return
  }
}
var EOF: CInt {
  get {
    return
  }
}
var IPPROTO_CPHB: CInt {
  get {
    return
  }
}
var IPPROTO_CPNX: CInt {
  get {
    return
  }
}
var ENXIO: CInt {
  get {
    return
  }
}
var EOWNERDEAD: CInt {
  get {
    return
  }
}
var IPPROTO_DGP: CInt {
  get {
    return
  }
}
var EOVERFLOW: CInt {
  get {
    return
  }
}
var EOPNOTSUPP: CInt {
  get {
    return
  }
}
var IPPROTO_DSTOPTS: CInt {
  get {
    return
  }
}
var IPPROTO_DDP: CInt {
  get {
    return
  }
}
var EPFNOSUPPORT: CInt {
  get {
    return
  }
}
var EPERM: CInt {
  get {
    return
  }
}
var IPPROTO_DONE: CInt {
  get {
    return
  }
}
var IPPROTO_DIVERT: CInt {
  get {
    return
  }
}
var ENOSTR: CInt {
  get {
    return
  }
}
var IPPROTO_AHIP: CInt {
  get {
    return
  }
}
var ENOSR: CInt {
  get {
    return
  }
}
var IPPROTO_ARGUS: CInt {
  get {
    return
  }
}
var ENOTCONN: CInt {
  get {
    return
  }
}
var IPPROTO_AH: CInt {
  get {
    return
  }
}
var ENOTBLK: CInt {
  get {
    return
  }
}
var ENOTEMPTY: CInt {
  get {
    return
  }
}
var IPPROTO_APES: CInt {
  get {
    return
  }
}
var ENOSYS: CInt {
  get {
    return
  }
}
var IPPROTO_AX25: CInt {
  get {
    return
  }
}
var ENOTDIR: CInt {
  get {
    return
  }
}
var ENOTSOCK: CInt {
  get {
    return
  }
}
var ENOTSUP: CInt {
  get {
    return
  }
}
var ENOTRECOVERABLE: CInt {
  get {
    return
  }
}
var IPPROTO_BLT: CInt {
  get {
    return
  }
}
var IPPROTO_BHA: CInt {
  get {
    return
  }
}
var IPC_W: CInt {
  get {
    return
  }
}
var ENOENT: CInt {
  get {
    return
  }
}
var ENODATA: CInt {
  get {
    return
  }
}
var ENODEV: CInt {
  get {
    return
  }
}
var ENOLCK: CInt {
  get {
    return
  }
}
var IPPORT_HILASTAUTO: CInt {
  get {
    return
  }
}
var ENOLINK: CInt {
  get {
    return
  }
}
var ENOEXEC: CInt {
  get {
    return
  }
}
var IPPORT_HIFIRSTAUTO: CInt {
  get {
    return
  }
}
var IPPORT_RESERVEDSTART: CInt {
  get {
    return
  }
}
var ENOMSG: CInt {
  get {
    return
  }
}
var IPPORT_RESERVED: CInt {
  get {
    return
  }
}
var IPPROTO_BRSATMON: CInt {
  get {
    return
  }
}
var ENOMEM: CInt {
  get {
    return
  }
}
var ENOPROTOOPT: CInt {
  get {
    return
  }
}
var IPPROTO_3PC: CInt {
  get {
    return
  }
}
var ENOSPC: CInt {
  get {
    return
  }
}
var IPPORT_USERRESERVED: CInt {
  get {
    return
  }
}
var ENOPOLICY: CInt {
  get {
    return
  }
}
var IPPROTO_ADFS: CInt {
  get {
    return
  }
}
var EVFILT_THREADMARKER: CInt {
  get {
    return
  }
}
var IPPROTO_MHRP: CInt {
  get {
    return
  }
}
var EVFILT_TIMER: CInt {
  get {
    return
  }
}
var IPPROTO_CFTP: CInt {
  get {
    return
  }
}
var IPPROTO_MEAS: CInt {
  get {
    return
  }
}
var EVFILT_SIGNAL: CInt {
  get {
    return
  }
}
var IPPROTO_LEAF2: CInt {
  get {
    return
  }
}
var EVFILT_SYSCOUNT: CInt {
  get {
    return
  }
}
var IPPROTO_MAX: CInt {
  get {
    return
  }
}
var EVFILT_WRITE: CInt {
  get {
    return
  }
}
var IPPROTO_MUX: CInt {
  get {
    return
  }
}
var EVFILT_VNODE: CInt {
  get {
    return
  }
}
var EV_ADD: CInt {
  get {
    return
  }
}
var IPPROTO_ND: CInt {
  get {
    return
  }
}
var IPPROTO_MICP: CInt {
  get {
    return
  }
}
var EVFILT_USER: CInt {
  get {
    return
  }
}
var IPPROTO_MTP: CInt {
  get {
    return
  }
}
var EVFILT_VM: CInt {
  get {
    return
  }
}
var ETXTBSY: CInt {
  get {
    return
  }
}
var IPPROTO_IPPC: CInt {
  get {
    return
  }
}
var IPPROTO_IPV6: CInt {
  get {
    return
  }
}
var IPPROTO_IPV4: CInt {
  get {
    return
  }
}
var EUSERS: CInt {
  get {
    return
  }
}
var ETIME: CInt {
  get {
    return
  }
}
var IPPROTO_IPEIP: CInt {
  get {
    return
  }
}
var ETOOMANYREFS: CInt {
  get {
    return
  }
}
var ETIMEDOUT: CInt {
  get {
    return
  }
}
var IPPROTO_IPIP: CInt {
  get {
    return
  }
}
var IPPROTO_LARP: CInt {
  get {
    return
  }
}
var EVFILT_PROC: CInt {
  get {
    return
  }
}
var EVFILT_MACHPORT: CInt {
  get {
    return
  }
}
var IPPROTO_LEAF1: CInt {
  get {
    return
  }
}
var EVFILT_READ: CInt {
  get {
    return
  }
}
var IPPROTO_IRTP: CInt {
  get {
    return
  }
}
var EVFILT_AIO: CInt {
  get {
    return
  }
}
var IPPROTO_KRYPTOLAN: CInt {
  get {
    return
  }
}
var EVFILT_FS: CInt {
  get {
    return
  }
}
var IPPROTO_IGRP: CInt {
  get {
    return
  }
}
var ESHLIBVERS: CInt {
  get {
    return
  }
}
var IPPROTO_IL: CInt {
  get {
    return
  }
}
var ERPCMISMATCH: CInt {
  get {
    return
  }
}
var IPPROTO_IGMP: CInt {
  get {
    return
  }
}
var IPPROTO_IGP: CInt {
  get {
    return
  }
}
var ESRCH: CInt {
  get {
    return
  }
}
var ESTALE: CInt {
  get {
    return
  }
}
var IPPROTO_IPCOMP: CInt {
  get {
    return
  }
}
var IPPROTO_IPCV: CInt {
  get {
    return
  }
}
var ESHUTDOWN: CInt {
  get {
    return
  }
}
var IPPROTO_INLSP: CInt {
  get {
    return
  }
}
var IPPROTO_INP: CInt {
  get {
    return
  }
}
var ESOCKTNOSUPPORT: CInt {
  get {
    return
  }
}
var ESPIPE: CInt {
  get {
    return
  }
}
var IPPROTO_IP: CInt {
  get {
    return
  }
}
var EQUIV_CLASS_MAX: CInt {
  get {
    return
  }
}
var IPPROTO_HMP: CInt {
  get {
    return
  }
}
var ERA: CInt {
  get {
    return
  }
}
var IPPROTO_HOPOPTS: CInt {
  get {
    return
  }
}
var ERANGE: CInt {
  get {
    return
  }
}
var EPWROFF: CInt {
  get {
    return
  }
}
var IPPROTO_GRE: CInt {
  get {
    return
  }
}
var EQFULL: CInt {
  get {
    return
  }
}
var IPPROTO_HELLO: CInt {
  get {
    return
  }
}
var ERA_T_FMT: CInt {
  get {
    return
  }
}
var IPPROTO_IDPR: CInt {
  get {
    return
  }
}
var EREMOTE: CInt {
  get {
    return
  }
}
var IPPROTO_IDRP: CInt {
  get {
    return
  }
}
var EROFS: CInt {
  get {
    return
  }
}
var IPPROTO_ICMP: CInt {
  get {
    return
  }
}
var ERA_D_FMT: CInt {
  get {
    return
  }
}
var IPPROTO_ICMPV6: CInt {
  get {
    return
  }
}
var ERA_D_T_FMT: CInt {
  get {
    return
  }
}
var IPPROTO_IDP: CInt {
  get {
    return
  }
}
var IPPROTO_TRUNK1: CInt {
  get {
    return
  }
}
var EV_WCONN: CInt {
  get {
    return
  }
}
var IPPROTO_TPXX: CInt {
  get {
    return
  }
}
var EV_WCLOSED: CInt {
  get {
    return
  }
}
var IPPROTO_TP: CInt {
  get {
    return
  }
}
var EV_WBYTES: CInt {
  get {
    return
  }
}
var IPPROTO_TCP: CInt {
  get {
    return
  }
}
var EV_TIMEOUT: CInt {
  get {
    return
  }
}
var IPPROTO_TCF: CInt {
  get {
    return
  }
}
var EXCEPTION_STATE: CInt {
  get {
    return
  }
}
var IPPROTO_VISA: CInt {
  get {
    return
  }
}
var IPPROTO_VINES: CInt {
  get {
    return
  }
}
var EXCEPTION_DEFAULT: CInt {
  get {
    return
  }
}
var IPPROTO_UDP: CInt {
  get {
    return
  }
}
var EXCEPTION_CODE_MAX: CInt {
  get {
    return
  }
}
var IPPROTO_TTP: CInt {
  get {
    return
  }
}
var EWOULDBLOCK: CInt {
  get {
    return
  }
}
var IPPROTO_TRUNK2: CInt {
  get {
    return
  }
}
var EV_WR: CInt {
  get {
    return
  }
}
var EV_RESET: CInt {
  get {
    return
  }
}
var IPPROTO_SEP: CInt {
  get {
    return
  }
}
var EV_RECEIPT: CInt {
  get {
    return
  }
}
var IPPROTO_SDRP: CInt {
  get {
    return
  }
}
var EV_RE: CInt {
  get {
    return
  }
}
var EV_RCONN: CInt {
  get {
    return
  }
}
var IPPROTO_SCCSP: CInt {
  get {
    return
  }
}
var IPPROTO_SCTP: CInt {
  get {
    return
  }
}
var IPPROTO_SATMON: CInt {
  get {
    return
  }
}
var EV_RCLOSED: CInt {
  get {
    return
  }
}
var EV_SYSFLAGS: CInt {
  get {
    return
  }
}
var IPPROTO_SWIPE: CInt {
  get {
    return
  }
}
var IPPROTO_SVMTP: CInt {
  get {
    return
  }
}
var IPPROTO_SRPC: CInt {
  get {
    return
  }
}
var IPPROTO_ST: CInt {
  get {
    return
  }
}
var EV_RM: CInt {
  get {
    return
  }
}
var EV_MASK: CInt {
  get {
    return
  }
}
var IPPROTO_RDP: CInt {
  get {
    return
  }
}
var IPPROTO_RCCMON: CInt {
  get {
    return
  }
}
var EV_FLAG1: CInt {
  get {
    return
  }
}
var IPPROTO_PVP: CInt {
  get {
    return
  }
}
var IPPROTO_RAW: CInt {
  get {
    return
  }
}
var EV_FLAG0: CInt {
  get {
    return
  }
}
var EV_FD: CInt {
  get {
    return
  }
}
var EV_FIN: CInt {
  get {
    return
  }
}
var EV_RBYTES: CInt {
  get {
    return
  }
}
var IPPROTO_SATEXPAK: CInt {
  get {
    return
  }
}
var IPPROTO_PUP: CInt {
  get {
    return
  }
}
var IPPROTO_RVD: CInt {
  get {
    return
  }
}
var EV_POLL: CInt {
  get {
    return
  }
}
var IPPROTO_RSVP: CInt {
  get {
    return
  }
}
var EV_OOBAND: CInt {
  get {
    return
  }
}
var EV_ONESHOT: CInt {
  get {
    return
  }
}
var EV_OOB: CInt {
  get {
    return
  }
}
var IPPROTO_ROUTING: CInt {
  get {
    return
  }
}
var EV_DISPATCH: CInt {
  get {
    return
  }
}
var IPPROTO_OSPFIGP: CInt {
  get {
    return
  }
}
var IPPROTO_NSP: CInt {
  get {
    return
  }
}
var EV_DISABLE: CInt {
  get {
    return
  }
}
var IPPROTO_NVPII: CInt {
  get {
    return
  }
}
var IPPROTO_NONE: CInt {
  get {
    return
  }
}
var EV_DELETE: CInt {
  get {
    return
  }
}
var IPPROTO_NHRP: CInt {
  get {
    return
  }
}
var EV_CLEAR: CInt {
  get {
    return
  }
}
var EV_EX: CInt {
  get {
    return
  }
}
var IPPROTO_PRM: CInt {
  get {
    return
  }
}
var IPPROTO_PIM: CInt {
  get {
    return
  }
}
var EV_ERROR: CInt {
  get {
    return
  }
}
var EV_EOF: CInt {
  get {
    return
  }
}
var IPPROTO_PIGP: CInt {
  get {
    return
  }
}
var EV_DMASK: CUnsignedInt {
  get {
    return
  }
}
var IPPROTO_PGM: CInt {
  get {
    return
  }
}
var EV_ENABLE: CInt {
  get {
    return
  }
}
var EXC_I386_NOEXT: CInt {
  get {
    return
  }
}
var EXC_I386_NOEXTFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_NEIGHBORGCTHRESH: CInt {
  get {
    return
  }
}
var EXC_I386_PGFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_PREFER_TEMPADDR: CInt {
  get {
    return
  }
}
var EXC_I386_SEGNPFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_RIP6STATS: CInt {
  get {
    return
  }
}
var IPV6CTL_MAXIFPREFIXES: CInt {
  get {
    return
  }
}
var EXC_I386_INVOP: CInt {
  get {
    return
  }
}
var IPV6CTL_MCAST_PMTU: CInt {
  get {
    return
  }
}
var EXC_I386_INVOPFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_MRTPROTO: CInt {
  get {
    return
  }
}
var EXC_I386_INVTSSFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_MRTSTATS: CInt {
  get {
    return
  }
}
var EXC_I386_NMIFLT: CInt {
  get {
    return
  }
}
var EXC_I386_EXTOVR: CInt {
  get {
    return
  }
}
var IPV6CTL_MAXDYNROUTES: CInt {
  get {
    return
  }
}
var EXC_I386_GPFLT: CInt {
  get {
    return
  }
}
var EXC_I386_EXTOVRFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_MAXFRAGPACKETS: CInt {
  get {
    return
  }
}
var EXC_I386_INTO: CInt {
  get {
    return
  }
}
var IPV6CTL_MAXFRAGS: CInt {
  get {
    return
  }
}
var IPV6CTL_MAXID: CInt {
  get {
    return
  }
}
var EXC_I386_INTOFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_MAXIFDEFROUTERS: CInt {
  get {
    return
  }
}
var IPV6CTL_HDRNESTLIMIT: CInt {
  get {
    return
  }
}
var EXC_I386_ENDPERR: CInt {
  get {
    return
  }
}
var IPV6CTL_KAME_VERSION: CInt {
  get {
    return
  }
}
var EXC_I386_ENOEXTFLT: CInt {
  get {
    return
  }
}
var EXC_I386_EXTERR: CInt {
  get {
    return
  }
}
var IPV6CTL_KEEPFAITH: CInt {
  get {
    return
  }
}
var EXC_I386_EXTERRFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_LOG_INTERVAL: CInt {
  get {
    return
  }
}
var IPV6CTL_DEFMCASTHLIM: CInt {
  get {
    return
  }
}
var EXC_I386_DBLFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_FORWARDING: CInt {
  get {
    return
  }
}
var EXC_I386_DIV: CInt {
  get {
    return
  }
}
var EXC_I386_DIVERR: CInt {
  get {
    return
  }
}
var IPV6CTL_FORWSRCRT: CInt {
  get {
    return
  }
}
var EXC_I386_EMERR: CInt {
  get {
    return
  }
}
var IPV6CTL_GIF_HLIM: CInt {
  get {
    return
  }
}
var EXC_I386_ALIGNFLT: CInt {
  get {
    return
  }
}
var IPV6CTL_AUTO_FLOWLABEL: CInt {
  get {
    return
  }
}
var EXC_I386_BOUND: CInt {
  get {
    return
  }
}
var IPV6CTL_AUTO_LINKLOCAL: CInt {
  get {
    return
  }
}
var EXC_I386_BOUNDFLT: CInt {
  get {
    return
  }
}
var EXC_I386_BPT: CInt {
  get {
    return
  }
}
var IPV6CTL_DAD_COUNT: CInt {
  get {
    return
  }
}
var IPV6CTL_DEFHLIM: CInt {
  get {
    return
  }
}
var EXC_I386_BPTFLT: CInt {
  get {
    return
  }
}
var IPPROTO_XNET: CInt {
  get {
    return
  }
}
var EXC_BREAKPOINT: CInt {
  get {
    return
  }
}
var IPPROTO_XTP: CInt {
  get {
    return
  }
}
var EXC_CRASH: CInt {
  get {
    return
  }
}
var IPV6CTL_ACCEPT_RTADV: CInt {
  get {
    return
  }
}
var EXC_EMULATION: CInt {
  get {
    return
  }
}
var EXC_GUARD: CInt {
  get {
    return
  }
}
var IPV6CTL_ADDRCTLPOLICY: CInt {
  get {
    return
  }
}
var EXCEPTION_STATE_IDENTITY: CInt {
  get {
    return
  }
}
var IPPROTO_VMTP: CInt {
  get {
    return
  }
}
var IPPROTO_WBEXPAK: CInt {
  get {
    return
  }
}
var EXC_ARITHMETIC: CInt {
  get {
    return
  }
}
var EXC_BAD_ACCESS: CInt {
  get {
    return
  }
}
var IPPROTO_WBMON: CInt {
  get {
    return
  }
}
var IPPROTO_WSN: CInt {
  get {
    return
  }
}
var EXC_BAD_INSTRUCTION: CInt {
  get {
    return
  }
}
var EXPR_NEST_MAX: CInt {
  get {
    return
  }
}
var IPV6_DEFAULT_MULTICAST_HOPS: CInt {
  get {
    return
  }
}
var EXPIRE_AFTER_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var IPV6_CHECKSUM: CInt {
  get {
    return
  }
}
var IPV6_FAITH: CInt {
  get {
    return
  }
}
var EXTB: CInt {
  get {
    return
  }
}
var IPV6_DEFAULT_MULTICAST_LOOP: CInt {
  get {
    return
  }
}
var EXTA: CInt {
  get {
    return
  }
}
var EXDEV: CInt {
  get {
    return
  }
}
var IPV6_2292RTHDR: CInt {
  get {
    return
  }
}
var EXC_TYPES_COUNT: CInt {
  get {
    return
  }
}
var IPV6_2292PKTOPTIONS: CInt {
  get {
    return
  }
}
var EXC_SYSCALL: CInt {
  get {
    return
  }
}
var EXIT_SUCCESS: CInt {
  get {
    return
  }
}
var IPV6_BOUND_IF: CInt {
  get {
    return
  }
}
var EXIT_FAILURE: CInt {
  get {
    return
  }
}
var IPV6_BINDV6ONLY: CInt {
  get {
    return
  }
}
var EXC_RPC_ALERT: CInt {
  get {
    return
  }
}
var IPV6_2292HOPOPTS: CInt {
  get {
    return
  }
}
var EXC_RESOURCE: CInt {
  get {
    return
  }
}
var IPV6_2292HOPLIMIT: CInt {
  get {
    return
  }
}
var IPV6_2292PKTINFO: CInt {
  get {
    return
  }
}
var EXC_SOFT_SIGNAL: CInt {
  get {
    return
  }
}
var IPV6_2292NEXTHOP: CInt {
  get {
    return
  }
}
var EXC_SOFTWARE: CInt {
  get {
    return
  }
}
var IPV6PORT_RESERVEDMIN: CInt {
  get {
    return
  }
}
var IPV6_2292DSTOPTS: CInt {
  get {
    return
  }
}
var IPV6PORT_ANONMAX: CInt {
  get {
    return
  }
}
var IPV6CTL_USE_DEPRECATED: CInt {
  get {
    return
  }
}
var IPV6CTL_V6ONLY: CInt {
  get {
    return
  }
}
var IPV6PORT_RESERVED: CInt {
  get {
    return
  }
}
var EXC_MASK_MACHINE: CInt {
  get {
    return
  }
}
var IPV6PORT_ANONMIN: CInt {
  get {
    return
  }
}
var IPV6CTL_TEMPVLTIME: CInt {
  get {
    return
  }
}
var IPV6CTL_TEMPPLTIME: CInt {
  get {
    return
  }
}
var IPV6CTL_USE_DEFAULTZONE: CInt {
  get {
    return
  }
}
var IPV6CTL_USETEMPADDR: CInt {
  get {
    return
  }
}
var IPV6CTL_SOURCECHECK: CInt {
  get {
    return
  }
}
var EXC_MACH_SYSCALL: CInt {
  get {
    return
  }
}
var IPV6CTL_SENDREDIRECTS: CInt {
  get {
    return
  }
}
var EXC_MACF_MIN: CInt {
  get {
    return
  }
}
var IPV6CTL_STATS: CInt {
  get {
    return
  }
}
var IPV6CTL_SOURCECHECK_LOGINT: CInt {
  get {
    return
  }
}
var EXC_I386_SGLSTP: CInt {
  get {
    return
  }
}
var IPV6CTL_RTEXPIRE: CInt {
  get {
    return
  }
}
var EXC_I386_SGL: CInt {
  get {
    return
  }
}
var IPV6CTL_RR_PRUNE: CInt {
  get {
    return
  }
}
var IPV6CTL_RTMINEXPIRE: CInt {
  get {
    return
  }
}
var EXC_MACF_MAX: CInt {
  get {
    return
  }
}
var EXC_I386_SSEEXTERR: CInt {
  get {
    return
  }
}
var IPV6CTL_RTMAXCACHE: CInt {
  get {
    return
  }
}
var EXC_I386_STKFLT: CInt {
  get {
    return
  }
}
var IP_DEFAULT_MULTICAST_LOOP: CInt {
  get {
    return
  }
}
var FASTTRAP_SEG_DS: CInt {
  get {
    return
  }
}
var FASTTRAP_SEG_FS: CInt {
  get {
    return
  }
}
var IP_DEFAULT_MULTICAST_TTL: CInt {
  get {
    return
  }
}
var FASTTRAP_SEG_ES: CInt {
  get {
    return
  }
}
var FASTTRAP_RIP_X: CInt {
  get {
    return
  }
}
var IP_BLOCK_SOURCE: CInt {
  get {
    return
  }
}
var FASTTRAP_SEG_CS: CInt {
  get {
    return
  }
}
var IP_BOUND_IF: CInt {
  get {
    return
  }
}
var FASTTRAP_RIP_1: CInt {
  get {
    return
  }
}
var IP_ADD_MEMBERSHIP: CInt {
  get {
    return
  }
}
var FASTTRAP_RIP_2: CInt {
  get {
    return
  }
}
var IP_ADD_SOURCE_MEMBERSHIP: CInt {
  get {
    return
  }
}
var FASTTRAP_OFFSET_AFRAMES: CInt {
  get {
    return
  }
}
var IPV6_UNICAST_HOPS: CInt {
  get {
    return
  }
}
var FASTTRAP_RETURN_AFRAMES: CInt {
  get {
    return
  }
}
var IPV6_V6ONLY: CInt {
  get {
    return
  }
}
var IPV6_SOCKOPT_RESERVED1: CInt {
  get {
    return
  }
}
var FASTTRAP_INSTR: CInt {
  get {
    return
  }
}
var IPV6_TCLASS: CInt {
  get {
    return
  }
}
var FASTTRAP_MAX_INSTR_SIZE: CInt {
  get {
    return
  }
}
var IPV6_RTHDR_STRICT: CInt {
  get {
    return
  }
}
var FAPPEND: CInt {
  get {
    return
  }
}
var EX__MAX: CInt {
  get {
    return
  }
}
var IPV6_RTHDR_TYPE_0: CInt {
  get {
    return
  }
}
var FASTTRAP_ENTRY_AFRAMES: CInt {
  get {
    return
  }
}
var EX_USAGE: CInt {
  get {
    return
  }
}
var IPV6_RECVTCLASS: CInt {
  get {
    return
  }
}
var IPV6_RTHDR_LOOSE: CInt {
  get {
    return
  }
}
var EX__BASE: CInt {
  get {
    return
  }
}
var EX_TEMPFAIL: CInt {
  get {
    return
  }
}
var IPV6_PORTRANGE_HIGH: CInt {
  get {
    return
  }
}
var EX_UNAVAILABLE: CInt {
  get {
    return
  }
}
var IPV6_PORTRANGE_LOW: CInt {
  get {
    return
  }
}
var EX_OSFILE: CInt {
  get {
    return
  }
}
var IPV6_PORTRANGE: CInt {
  get {
    return
  }
}
var EX_PROTOCOL: CInt {
  get {
    return
  }
}
var EX_SOFTWARE: CInt {
  get {
    return
  }
}
var IPV6_PORTRANGE_DEFAULT: CInt {
  get {
    return
  }
}
var EX_OK: CInt {
  get {
    return
  }
}
var IPV6_MULTICAST_IF: CInt {
  get {
    return
  }
}
var EX_OSERR: CInt {
  get {
    return
  }
}
var IPV6_MULTICAST_LOOP: CInt {
  get {
    return
  }
}
var EX_NOPERM: CInt {
  get {
    return
  }
}
var IPV6_MIN_MEMBERSHIPS: CInt {
  get {
    return
  }
}
var IPV6_MULTICAST_HOPS: CInt {
  get {
    return
  }
}
var EX_NOUSER: CInt {
  get {
    return
  }
}
var EX_IOERR: CInt {
  get {
    return
  }
}
var IPV6_MAX_MEMBERSHIPS: CInt {
  get {
    return
  }
}
var EX_NOHOST: CInt {
  get {
    return
  }
}
var EX_NOINPUT: CInt {
  get {
    return
  }
}
var IPV6_MAX_SOCK_SRC_FILTER: CInt {
  get {
    return
  }
}
var EX_CONFIG: CInt {
  get {
    return
  }
}
var IPV6_LEAVE_GROUP: CInt {
  get {
    return
  }
}
var EX_DATAERR: CInt {
  get {
    return
  }
}
var IPV6_MAX_GROUP_SRC_FILTER: CInt {
  get {
    return
  }
}
var EXTPROC: CInt {
  get {
    return
  }
}
var IPV6_IPSEC_POLICY: CInt {
  get {
    return
  }
}
var EX_CANTCREAT: CInt {
  get {
    return
  }
}
var IPV6_JOIN_GROUP: CInt {
  get {
    return
  }
}
var IPV6_FW_FLUSH: CInt {
  get {
    return
  }
}
var IPV6_FW_GET: CInt {
  get {
    return
  }
}
var EXTJNL_CONTENT_TYPE_UUID: CString {
  get {
    return
  }
}
var IPV6_FW_ADD: CInt {
  get {
    return
  }
}
var IPV6_FW_DEL: CInt {
  get {
    return
  }
}
var IPV6_FW_ZERO: CInt {
  get {
    return
  }
}
var FE_UNDERFLOW: CInt {
  get {
    return
  }
}
var FE_TOWARDZERO: CInt {
  get {
    return
  }
}
var IP_OLD_FW_ZERO: CInt {
  get {
    return
  }
}
var FE_TONEAREST: CInt {
  get {
    return
  }
}
var FE_OVERFLOW: CInt {
  get {
    return
  }
}
var IP_OLD_FW_GET: CInt {
  get {
    return
  }
}
var IP_OLD_FW_RESETLOG: CInt {
  get {
    return
  }
}
var FE_INVALID: CInt {
  get {
    return
  }
}
var FE_INEXACT: CInt {
  get {
    return
  }
}
var IP_OLD_FW_DEL: CInt {
  get {
    return
  }
}
var IP_OLD_FW_FLUSH: CInt {
  get {
    return
  }
}
var FE_DOWNWARD: CInt {
  get {
    return
  }
}
var FE_DIVBYZERO: CInt {
  get {
    return
  }
}
var IP_NAT__XXX: CInt {
  get {
    return
  }
}
var IP_MULTICAST_TTL: CInt {
  get {
    return
  }
}
var FE_DENORMALOPERAND: CInt {
  get {
    return
  }
}
var IP_MULTICAST_LOOP: CInt {
  get {
    return
  }
}
var IP_MULTICAST_VIF: CInt {
  get {
    return
  }
}
var FE_ALL_EXCEPT: CInt {
  get {
    return
  }
}
var IP_MULTICAST_IFINDEX: CInt {
  get {
    return
  }
}
var IP_MULTICAST_IF: CInt {
  get {
    return
  }
}
var IP_MAX_SOCK_SRC_FILTER: CInt {
  get {
    return
  }
}
var IP_MAX_SOCK_MUTE_FILTER: CInt {
  get {
    return
  }
}
var FD_CLOEXEC: CInt {
  get {
    return
  }
}
var IP_MAX_GROUP_SRC_FILTER: CInt {
  get {
    return
  }
}
var IP_MAX_MEMBERSHIPS: CInt {
  get {
    return
  }
}
var FCNTL_FS_SPECIFIC_BASE: CInt {
  get {
    return
  }
}
var IP_IPSEC_POLICY: CInt {
  get {
    return
  }
}
var FASYNC: CInt {
  get {
    return
  }
}
var IP_HDRINCL: CInt {
  get {
    return
  }
}
var FASTTRAP_T_RET16: CInt {
  get {
    return
  }
}
var FASTTRAP_T_PUSHL_EBP: CInt {
  get {
    return
  }
}
var FASTTRAP_T_RET: CInt {
  get {
    return
  }
}
var IP_FW_ZERO: CInt {
  get {
    return
  }
}
var FASTTRAP_T_NOP: CInt {
  get {
    return
  }
}
var IP_MSFILTER: CInt {
  get {
    return
  }
}
var IP_FW_RESETLOG: CInt {
  get {
    return
  }
}
var FASTTRAP_T_LOOP: CInt {
  get {
    return
  }
}
var IP_FW_GET: CInt {
  get {
    return
  }
}
var FASTTRAP_T_JMP: CInt {
  get {
    return
  }
}
var IP_FW_DEL: CInt {
  get {
    return
  }
}
var IP_FW_FLUSH: CInt {
  get {
    return
  }
}
var IP_FW_ADD: CInt {
  get {
    return
  }
}
var FASTTRAP_T_JCXZ: CInt {
  get {
    return
  }
}
var IP_MIN_MEMBERSHIPS: CInt {
  get {
    return
  }
}
var IP_FAITH: CInt {
  get {
    return
  }
}
var FASTTRAP_T_JCC: CInt {
  get {
    return
  }
}
var IP_DUMMYNET_GET: CInt {
  get {
    return
  }
}
var FASTTRAP_T_COMMON: CInt {
  get {
    return
  }
}
var IP_OPTIONS: CInt {
  get {
    return
  }
}
var FASTTRAP_T_CALL: CInt {
  get {
    return
  }
}
var IP_DUMMYNET_FLUSH: CInt {
  get {
    return
  }
}
var FASTTRAP_SUNWDTRACE_SIZE: CInt {
  get {
    return
  }
}
var IP_DUMMYNET_DEL: CInt {
  get {
    return
  }
}
var FASTTRAP_SEG_SS: CInt {
  get {
    return
  }
}
var IP_DUMMYNET_CONFIGURE: CInt {
  get {
    return
  }
}
var FASTTRAP_SEG_NONE: CInt {
  get {
    return
  }
}
var IP_DROP_SOURCE_MEMBERSHIP: CInt {
  get {
    return
  }
}
var FASTTRAP_SEG_GS: CInt {
  get {
    return
  }
}
var IP_DROP_MEMBERSHIP: CInt {
  get {
    return
  }
}
var AUDIT_CONTROL_FILE: CString {
  get {
    return
  }
}
var AUDIT_EVENT_FILE: CString {
  get {
    return
  }
}
var CRF_MAC_ENFORCE: CInt {
  get {
    return
  }
}
var AUDIT_GROUP: CInt {
  get {
    return
  }
}
var CRF_NOMEMBERD: CInt {
  get {
    return
  }
}
var AUDIT_HARD_LIMIT_FREE_BLOCKS: CInt {
  get {
    return
  }
}
var CRNCYSTR: CInt {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_OLDDARWIN: CInt {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_OPENBSM: CInt {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_OPENBSM10: CInt {
  get {
    return
  }
}
var CS5: CInt {
  get {
    return
  }
}
var CRTS_IFLOW: CInt {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_OPENBSM11: CInt {
  get {
    return
  }
}
var CS6: CInt {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_SOLARIS: CInt {
  get {
    return
  }
}
var CS7: CInt {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_TSOL: CInt {
  get {
    return
  }
}
var CSIZE: CInt {
  get {
    return
  }
}
var CS8: CInt {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_TSOL25: CInt {
  get {
    return
  }
}
var CSTOPB: CInt {
  get {
    return
  }
}
var IP_OLD_FW_ADD: CInt {
  get {
    return
  }
}
var AUDIT_HOST_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var AUDIT_MAX_ENV: CInt {
  get {
    return
  }
}
var AUDIT_MAX_ARGS: CInt {
  get {
    return
  }
}
var AUDIT_MAX_GROUPS: CInt {
  get {
    return
  }
}
var CTIME: CInt {
  get {
    return
  }
}
var AUDIT_OFF: CInt {
  get {
    return
  }
}
var CTLFLAG_ANYBODY: CInt {
  get {
    return
  }
}
var AT_FDCWD: CInt {
  get {
    return
  }
}
var AT_REMOVEDIR: CInt {
  get {
    return
  }
}
var AT_SYMLINK_FOLLOW: CInt {
  get {
    return
  }
}
var AT_SYMLINK_NOFOLLOW: CInt {
  get {
    return
  }
}
var AUC_AUDITING: CInt {
  get {
    return
  }
}
var AUC_DISABLED: CInt {
  get {
    return
  }
}
var AUC_NOAUDIT: CInt {
  get {
    return
  }
}
var AUC_UNSET: CInt {
  get {
    return
  }
}
var AUDITDEV_FILENAME: CString {
  get {
    return
  }
}
var CQUIT: CInt {
  get {
    return
  }
}
var CR0: CInt {
  get {
    return
  }
}
var AUDIT_AHLT: CInt {
  get {
    return
  }
}
var AUDIT_ARGE: CInt {
  get {
    return
  }
}
var CR1: CInt {
  get {
    return
  }
}
var AUDIT_ARGV: CInt {
  get {
    return
  }
}
var CR2: CInt {
  get {
    return
  }
}
var AUDIT_CLASS_FILE: CString {
  get {
    return
  }
}
var CR3: CInt {
  get {
    return
  }
}
var CRDLY: CInt {
  get {
    return
  }
}
var AUDIT_CNT: CInt {
  get {
    return
  }
}
var CREAD: CInt {
  get {
    return
  }
}
var CTL_DEBUG_MAXID: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_ROTATE_KERNEL: CInt {
  get {
    return
  }
}
var CTL_DEBUG: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_READ_FILE: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_ROTATE_USER: CInt {
  get {
    return
  }
}
var AUDIT_USER: CInt {
  get {
    return
  }
}
var CTL_DEBUG_VALUE: CInt {
  get {
    return
  }
}
var AUDIT_WINDATA: CInt {
  get {
    return
  }
}
var CTL_HW: CInt {
  get {
    return
  }
}
var AUDIT_USER_FILE: CString {
  get {
    return
  }
}
var AUP_DECIMAL: CInt {
  get {
    return
  }
}
var CTL_KERN: CInt {
  get {
    return
  }
}
var AUP_BINARY: CInt {
  get {
    return
  }
}
var AUDIT_ZONENAME: CInt {
  get {
    return
  }
}
var AUP_OCTAL: CInt {
  get {
    return
  }
}
var CTL_MAXID: CInt {
  get {
    return
  }
}
var CTL_DEBUG_NAME: CInt {
  get {
    return
  }
}
var AUP_HEX: CInt {
  get {
    return
  }
}
var CTL_MACHDEP: CInt {
  get {
    return
  }
}
var CTL_NET: CInt {
  get {
    return
  }
}
var AUR_BYTE: CInt {
  get {
    return
  }
}
var AUP_STRING: CInt {
  get {
    return
  }
}
var CTL_MAXNAME: CInt {
  get {
    return
  }
}
var CTL_USER: CInt {
  get {
    return
  }
}
var AUR_CHAR: CInt {
  get {
    return
  }
}
var CTL_UNSPEC: CInt {
  get {
    return
  }
}
var AUR_INT32: CInt {
  get {
    return
  }
}
var CTL_VFS: CInt {
  get {
    return
  }
}
var AUR_INT: CInt {
  get {
    return
  }
}
var CTLFLAG_LOCKED: CInt {
  get {
    return
  }
}
var AUDIT_PATH: CInt {
  get {
    return
  }
}
var CTLFLAG_MASKED: CInt {
  get {
    return
  }
}
var CTLFLAG_KERN: CInt {
  get {
    return
  }
}
var AUDIT_ON: CInt {
  get {
    return
  }
}
var AUDIT_PUBLIC: CInt {
  get {
    return
  }
}
var CTLFLAG_NOLOCK: CInt {
  get {
    return
  }
}
var AUDIT_PERZONE: CInt {
  get {
    return
  }
}
var CTLFLAG_NOAUTO: CInt {
  get {
    return
  }
}
var AUDIT_SCNT: CInt {
  get {
    return
  }
}
var CTLFLAG_RD: CUnsignedInt {
  get {
    return
  }
}
var AUDIT_RECORD_MAGIC: CUnsignedInt {
  get {
    return
  }
}
var CTLFLAG_OID2: CInt {
  get {
    return
  }
}
var CTLFLAG_SECURE: CInt {
  get {
    return
  }
}
var AUDIT_SEQ: CInt {
  get {
    return
  }
}
var AUDIT_TRAIL: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_EXPIRE_TRAILS: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_CLOSE_AND_DIE: CInt {
  get {
    return
  }
}
var CTLFLAG_WR: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_INITIALIZE: CInt {
  get {
    return
  }
}
var CTLTYPE_INT: CInt {
  get {
    return
  }
}
var CTLTYPE: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_MAX: CInt {
  get {
    return
  }
}
var CTLTYPE_OPAQUE: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_LOW_SPACE: CInt {
  get {
    return
  }
}
var CTLTYPE_NODE: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_NO_SPACE: CInt {
  get {
    return
  }
}
var CTLTYPE_STRUCT: CInt {
  get {
    return
  }
}
var AUDIT_TRIGGER_MIN: CInt {
  get {
    return
  }
}
var CTLTYPE_QUAD: CInt {
  get {
    return
  }
}
var CTLTYPE_STRING: CInt {
  get {
    return
  }
}
var C_IXGRP: CInt {
  get {
    return
  }
}
var AUT_HEADER32: CInt {
  get {
    return
  }
}
var AUT_HEADER64: CInt {
  get {
    return
  }
}
var AUT_HEADER32_EX: CInt {
  get {
    return
  }
}
var C_IXOTH: CInt {
  get {
    return
  }
}
var AUT_GROUPS: CInt {
  get {
    return
  }
}
var C_IWGRP: CInt {
  get {
    return
  }
}
var C_IWUSR: CInt {
  get {
    return
  }
}
var C_IWOTH: CInt {
  get {
    return
  }
}
var AUT_HEADER: CInt {
  get {
    return
  }
}
var AUT_INVALID: CInt {
  get {
    return
  }
}
var DAY_3: CInt {
  get {
    return
  }
}
var DAY_5: CInt {
  get {
    return
  }
}
var DAY_4: CInt {
  get {
    return
  }
}
var AUT_IN_ADDR: CInt {
  get {
    return
  }
}
var AUT_HEADER64_EX: CInt {
  get {
    return
  }
}
var C_IXUSR: CInt {
  get {
    return
  }
}
var AUT_HOST: CInt {
  get {
    return
  }
}
var DAY_2: CInt {
  get {
    return
  }
}
var DAY_1: CInt {
  get {
    return
  }
}
var DBL_EPSILON: CDouble {
  get {
    return
  }
}
var DBL_DIG: CInt {
  get {
    return
  }
}
var DBL_MANT_DIG: CInt {
  get {
    return
  }
}
var DAY_6: CInt {
  get {
    return
  }
}
var DAY_7: CInt {
  get {
    return
  }
}
var DBL_MAX_EXP: CInt {
  get {
    return
  }
}
var DBL_MIN_10_EXP: CInt {
  get {
    return
  }
}
var DBL_MIN: CDouble {
  get {
    return
  }
}
var DBL_MAX: CDouble {
  get {
    return
  }
}
var DBL_MAX_10_EXP: CInt {
  get {
    return
  }
}
var AUR_SHORT: CInt {
  get {
    return
  }
}
var CTL_VM: CInt {
  get {
    return
  }
}
var AUR_INT64: CInt {
  get {
    return
  }
}
var AUT_ACL: CInt {
  get {
    return
  }
}
var C_IROTH: CInt {
  get {
    return
  }
}
var AUT_ARG: CInt {
  get {
    return
  }
}
var C_IRUSR: CInt {
  get {
    return
  }
}
var AUT_ARG32: CInt {
  get {
    return
  }
}
var C_ISBLK: CInt {
  get {
    return
  }
}
var AUT_ACE: CInt {
  get {
    return
  }
}
var C_IRGRP: CInt {
  get {
    return
  }
}
var AUT_ATTR32: CInt {
  get {
    return
  }
}
var C_ISDIR: CInt {
  get {
    return
  }
}
var C_ISFIFO: CInt {
  get {
    return
  }
}
var AUT_ATTR64: CInt {
  get {
    return
  }
}
var C_ISGID: CInt {
  get {
    return
  }
}
var AUT_ARG64: CInt {
  get {
    return
  }
}
var C_ISCTG: CInt {
  get {
    return
  }
}
var C_ISCHR: CInt {
  get {
    return
  }
}
var AUT_ATTR: CInt {
  get {
    return
  }
}
var C_ISSOCK: CInt {
  get {
    return
  }
}
var C_ISUID: CInt {
  get {
    return
  }
}
var AUT_EXEC_ENV: CInt {
  get {
    return
  }
}
var AUT_EXIT: CInt {
  get {
    return
  }
}
var C_ISLNK: CInt {
  get {
    return
  }
}
var AUT_CMD: CInt {
  get {
    return
  }
}
var AUT_DATA: CInt {
  get {
    return
  }
}
var C_ISREG: CInt {
  get {
    return
  }
}
var AUT_EXEC_ARGS: CInt {
  get {
    return
  }
}
var IFM_TOK_UTP16: CInt {
  get {
    return
  }
}
var C_ISVTX: CInt {
  get {
    return
  }
}
var IFM_TOK_UTP100: CInt {
  get {
    return
  }
}
var IFM_TOK_STP4: CInt {
  get {
    return
  }
}
var IFM_TOK_STP16: CInt {
  get {
    return
  }
}
var IFM_TOK_STP100: CInt {
  get {
    return
  }
}
var IFM_TOK_UTP4: CInt {
  get {
    return
  }
}
var IFSTATMAX: CInt {
  get {
    return
  }
}
var IFQ_MAXLEN: CInt {
  get {
    return
  }
}
var IFNET_SLOWHZ: CInt {
  get {
    return
  }
}
var IFNAMSIZ: CInt {
  get {
    return
  }
}
var IFM_WAKESAMENET: CInt {
  get {
    return
  }
}
var IF_NAMESIZE: CInt {
  get {
    return
  }
}
var DEVICE_PAGER_COHERENT: CInt {
  get {
    return
  }
}
var IF_MINMTU: CInt {
  get {
    return
  }
}
var DEVICE_PAGER_CACHE_INHIB: CInt {
  get {
    return
  }
}
var IF_MAXMTU: CInt {
  get {
    return
  }
}
var DBM_RDONLY: CInt {
  get {
    return
  }
}
var DBM_INSERT: CInt {
  get {
    return
  }
}
var DBL_TRUE_MIN: CDouble {
  get {
    return
  }
}
var DBL_MIN_EXP: CInt {
  get {
    return
  }
}
var DEAD_PROCESS: CInt {
  get {
    return
  }
}
var DECIMAL_DIG: CInt {
  get {
    return
  }
}
var DBM_SUFFIX: CString {
  get {
    return
  }
}
var DBM_REPLACE: CInt {
  get {
    return
  }
}
var IFM_TOK_AUTO: CInt {
  get {
    return
  }
}
var IFM_TOK_ALLR: CInt {
  get {
    return
  }
}
var IFM_TMASK: CInt {
  get {
    return
  }
}
var IFM_TOKEN: CInt {
  get {
    return
  }
}
var IFM_TOK_SRCRT: CInt {
  get {
    return
  }
}
var IFM_TOK_ETR: CInt {
  get {
    return
  }
}
var IFM_TOK_DTR: CInt {
  get {
    return
  }
}
var IFM_TOK_CLASSIC: CInt {
  get {
    return
  }
}
var ILL_BADSTK: CInt {
  get {
    return
  }
}
var DEV_BSHIFT: CInt {
  get {
    return
  }
}
var ILL_COPROC: CInt {
  get {
    return
  }
}
var DEV_BSIZE: CInt {
  get {
    return
  }
}
var ILL_ILLADR: CInt {
  get {
    return
  }
}
var DFLCSIZ: CInt {
  get {
    return
  }
}
var ILL_ILLOPC: CInt {
  get {
    return
  }
}
var ILL_ILLOPN: CInt {
  get {
    return
  }
}
var DEVICE_PAGER_CONTIGUOUS: CInt {
  get {
    return
  }
}
var IF_WAKE_ON_MAGIC_PACKET: CInt {
  get {
    return
  }
}
var DEVICE_PAGER_GUARDED: CInt {
  get {
    return
  }
}
var IGNBRK: CInt {
  get {
    return
  }
}
var IGNCR: CInt {
  get {
    return
  }
}
var DEVICE_PAGER_NOPHYSCACHE: CInt {
  get {
    return
  }
}
var IGNPAR: CInt {
  get {
    return
  }
}
var DEVICE_PAGER_WRITE_THROUGH: CInt {
  get {
    return
  }
}
var DIR_MNTSTATUS_MNTPOINT: CInt {
  get {
    return
  }
}
var DIR_MNTSTATUS_TRIGGER: CInt {
  get {
    return
  }
}
var ILL_ILLTRP: CInt {
  get {
    return
  }
}
var DIRBLKSIZ: CInt {
  get {
    return
  }
}
var ILL_NOOP: CInt {
  get {
    return
  }
}
var ILL_PRVOPC: CInt {
  get {
    return
  }
}
var DIR_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var ILL_PRVREG: CInt {
  get {
    return
  }
}
var IMAXBEL: CInt {
  get {
    return
  }
}
var DTF_REWIND: CInt {
  get {
    return
  }
}
var INIT_PROCESS: CInt {
  get {
    return
  }
}
var INLCR: CInt {
  get {
    return
  }
}
var INI_IPV6: CInt {
  get {
    return
  }
}
var INI_IPV4: CInt {
  get {
    return
  }
}
var DST_WET: CInt {
  get {
    return
  }
}
var DST_USA: CInt {
  get {
    return
  }
}
var INET_ADDRSTRLEN: CInt {
  get {
    return
  }
}
var INET6_ADDRSTRLEN: CInt {
  get {
    return
  }
}
var DST_NONE: CInt {
  get {
    return
  }
}
var DTF_NODUP: CInt {
  get {
    return
  }
}
var DTF_HIDEW: CInt {
  get {
    return
  }
}
var INT32_MAX: CInt {
  get {
    return
  }
}
var INT64_MAX: CLongLong {
  get {
    return
  }
}
var INPCK: CInt {
  get {
    return
  }
}
var INT16_MIN: CInt {
  get {
    return
  }
}
var INT16_MAX: CInt {
  get {
    return
  }
}
var DK_FEATURE_PRIORITY: CInt {
  get {
    return
  }
}
var DST_AUST: CInt {
  get {
    return
  }
}
var INADDR_NONE: CUnsignedInt {
  get {
    return
  }
}
var DOMAIN: CInt {
  get {
    return
  }
}
var DST_MET: CInt {
  get {
    return
  }
}
var DST_CAN: CInt {
  get {
    return
  }
}
var DST_EET: CInt {
  get {
    return
  }
}
var DMBIC: CInt {
  get {
    return
  }
}
var DK_FEATURE_UNMAP: CInt {
  get {
    return
  }
}
var DMSET: CInt {
  get {
    return
  }
}
var DMBIS: CInt {
  get {
    return
  }
}
var DMGET: CInt {
  get {
    return
  }
}
var EAI_BADHINTS: CInt {
  get {
    return
  }
}
var EAI_FAIL: CInt {
  get {
    return
  }
}
var EAI_AGAIN: CInt {
  get {
    return
  }
}
var INT_LEAST8_MAX: CInt {
  get {
    return
  }
}
var EAI_BADFLAGS: CInt {
  get {
    return
  }
}
var INT_MAX: CInt {
  get {
    return
  }
}
var INT_LEAST8_MIN: CInt {
  get {
    return
  }
}
var EAFNOSUPPORT: CInt {
  get {
    return
  }
}
var INT_LEAST64_MAX: CLongLong {
  get {
    return
  }
}
var EAI_ADDRFAMILY: CInt {
  get {
    return
  }
}
var EAGAIN: CInt {
  get {
    return
  }
}
var EADDRINUSE: CInt {
  get {
    return
  }
}
var INT_LEAST32_MAX: CInt {
  get {
    return
  }
}
var EADDRNOTAVAIL: CInt {
  get {
    return
  }
}
var EAI_SERVICE: CInt {
  get {
    return
  }
}
var IN_CLASSB_HOST: CInt {
  get {
    return
  }
}
var IN_CLASSB_MAX: CInt {
  get {
    return
  }
}
var EAI_SOCKTYPE: CInt {
  get {
    return
  }
}
var EAI_OVERFLOW: CInt {
  get {
    return
  }
}
var IN_CLASSA_NSHIFT: CInt {
  get {
    return
  }
}
var EAI_PROTOCOL: CInt {
  get {
    return
  }
}
var EAI_NODATA: CInt {
  get {
    return
  }
}
var IN_CLASSA_MAX: CInt {
  get {
    return
  }
}
var EAI_NONAME: CInt {
  get {
    return
  }
}
var IN_CLASSA_NET: CUnsignedInt {
  get {
    return
  }
}
var EAI_FAMILY: CInt {
  get {
    return
  }
}
var EAI_MEMORY: CInt {
  get {
    return
  }
}
var IN_CLASSA_HOST: CInt {
  get {
    return
  }
}
var EAI_MAX: CInt {
  get {
    return
  }
}
var INTPTR_MAX: CLongLong {
  get {
    return
  }
}
var DT_LNK: CInt {
  get {
    return
  }
}
var DT_REG: CInt {
  get {
    return
  }
}
var DT_SOCK: CInt {
  get {
    return
  }
}
var DT_CHR: CInt {
  get {
    return
  }
}
var INTMAX_MAX: CLongLong {
  get {
    return
  }
}
var INT_FAST16_MAX: CInt {
  get {
    return
  }
}
var DT_DIR: CInt {
  get {
    return
  }
}
var DT_FIFO: CInt {
  get {
    return
  }
}
var INT8_MIN: CInt {
  get {
    return
  }
}
var DT_BLK: CInt {
  get {
    return
  }
}
var INT8_MAX: CInt {
  get {
    return
  }
}
var D_T_FMT: CInt {
  get {
    return
  }
}
var E2BIG: CInt {
  get {
    return
  }
}
var INT_LEAST16_MAX: CInt {
  get {
    return
  }
}
var EACCES: CInt {
  get {
    return
  }
}
var INT_LEAST16_MIN: CInt {
  get {
    return
  }
}
var D_TAPE: CInt {
  get {
    return
  }
}
var D_TTY: CInt {
  get {
    return
  }
}
var INT_FAST8_MAX: CInt {
  get {
    return
  }
}
var INT_FAST8_MIN: CInt {
  get {
    return
  }
}
var D_DISK: CInt {
  get {
    return
  }
}
var INT_FAST64_MAX: CLongLong {
  get {
    return
  }
}
var D_FMT: CInt {
  get {
    return
  }
}
var D_MD_ORDER: CInt {
  get {
    return
  }
}
var DT_UNKNOWN: CInt {
  get {
    return
  }
}
var INT_FAST16_MIN: CInt {
  get {
    return
  }
}
var DT_WHT: CInt {
  get {
    return
  }
}
var EFL_AC: CInt {
  get {
    return
  }
}
var INT_FAST32_MAX: CInt {
  get {
    return
  }
}
var EFBIG: CInt {
  get {
    return
  }
}
var EFAULT: CInt {
  get {
    return
  }
}
var EEXIST: CInt {
  get {
    return
  }
}
var EDQUOT: CInt {
  get {
    return
  }
}
var EDOM: CInt {
  get {
    return
  }
}
var EDEVERR: CInt {
  get {
    return
  }
}
var IOCPARM_MASK: CInt {
  get {
    return
  }
}
var EDESTADDRREQ: CInt {
  get {
    return
  }
}
var EDEADLK: CInt {
  get {
    return
  }
}
var ECONNRESET: CInt {
  get {
    return
  }
}
var EFL_NT: CInt {
  get {
    return
  }
}
var IOPOL_SCOPE_PROCESS: CInt {
  get {
    return
  }
}
var EFL_IOPL_USER: CInt {
  get {
    return
  }
}
var IOPOL_SCOPE_DARWIN_BG: CInt {
  get {
    return
  }
}
var EFL_IOPL_KERNEL: CInt {
  get {
    return
  }
}
var IOPOL_PASSIVE: CInt {
  get {
    return
  }
}
var EFL_IOPL: CInt {
  get {
    return
  }
}
var IOPOL_NORMAL: CInt {
  get {
    return
  }
}
var EFL_IF: CInt {
  get {
    return
  }
}
var IOPOL_IMPORTANT: CInt {
  get {
    return
  }
}
var EFL_ID: CInt {
  get {
    return
  }
}
var IOPOL_DEFAULT: CInt {
  get {
    return
  }
}
var EFL_DF: CInt {
  get {
    return
  }
}
var EFL_CLR: CUnsignedInt {
  get {
    return
  }
}
var IOPOL_APPLICATION: CInt {
  get {
    return
  }
}
var EFL_CF: CInt {
  get {
    return
  }
}
var EFL_AF: CInt {
  get {
    return
  }
}
var EBUSY: CInt {
  get {
    return
  }
}
var IN_CLASSD_NET: CUnsignedInt {
  get {
    return
  }
}
var EBADRPC: CInt {
  get {
    return
  }
}
var IN_CLASSD_HOST: CInt {
  get {
    return
  }
}
var EBADMACHO: CInt {
  get {
    return
  }
}
var EBADMSG: CInt {
  get {
    return
  }
}
var EBADF: CInt {
  get {
    return
  }
}
var IN_CLASSC_NSHIFT: CInt {
  get {
    return
  }
}
var EBADEXEC: CInt {
  get {
    return
  }
}
var IN_CLASSC_NET: CUnsignedInt {
  get {
    return
  }
}
var EBADARCH: CInt {
  get {
    return
  }
}
var IN_CLASSC_HOST: CInt {
  get {
    return
  }
}
var IN_CLASSB_NSHIFT: CInt {
  get {
    return
  }
}
var EAUTH: CInt {
  get {
    return
  }
}
var EAI_SYSTEM: CInt {
  get {
    return
  }
}
var IN_CLASSB_NET: CUnsignedInt {
  get {
    return
  }
}
var EALREADY: CInt {
  get {
    return
  }
}
var ECONNABORTED: CInt {
  get {
    return
  }
}
var ECONNREFUSED: CInt {
  get {
    return
  }
}
var ECHOPRT: CInt {
  get {
    return
  }
}
var ECHONL: CInt {
  get {
    return
  }
}
var IN_LOOPBACKNET: CInt {
  get {
    return
  }
}
var ECHOKE: CInt {
  get {
    return
  }
}
var ECHOE: CInt {
  get {
    return
  }
}
var ECHOK: CInt {
  get {
    return
  }
}
var ECHOCTL: CInt {
  get {
    return
  }
}
var ECHO: CInt {
  get {
    return
  }
}
var IN_CLASSD_NSHIFT: CInt {
  get {
    return
  }
}
var ECANCELED: CInt {
  get {
    return
  }
}
var ECHILD: CInt {
  get {
    return
  }
}
var B_DEVMAGIC: CUnsignedInt {
  get {
    return
  }
}
var B_ENCRYPTED_IO: CInt {
  get {
    return
  }
}
var B_FUA: CInt {
  get {
    return
  }
}
var B_IOSTREAMING: CInt {
  get {
    return
  }
}
var B_LOCKED: CInt {
  get {
    return
  }
}
var B_META: CInt {
  get {
    return
  }
}
var B_MAGICMASK: CUnsignedInt {
  get {
    return
  }
}
var B_NOCACHE: CInt {
  get {
    return
  }
}
var B_PAGEIO: CInt {
  get {
    return
  }
}
var B_ADAPTORMASK: CInt {
  get {
    return
  }
}
var B_ADAPTORSHIFT: CInt {
  get {
    return
  }
}
var B_ASYNC: CInt {
  get {
    return
  }
}
var B_CLUSTER: CInt {
  get {
    return
  }
}
var B_CONTROLLERMASK: CInt {
  get {
    return
  }
}
var B_CONTROLLERSHIFT: CInt {
  get {
    return
  }
}
var B_DELWRI: CInt {
  get {
    return
  }
}
var ABDAY_5: CInt {
  get {
    return
  }
}
var B_TYPEMASK: CInt {
  get {
    return
  }
}
var ABDAY_6: CInt {
  get {
    return
  }
}
var B_TYPESHIFT: CInt {
  get {
    return
  }
}
var ABMON_1: CInt {
  get {
    return
  }
}
var B_UNITMASK: CInt {
  get {
    return
  }
}
var ABDAY_7: CInt {
  get {
    return
  }
}
var ABMON_10: CInt {
  get {
    return
  }
}
var B_UNITSHIFT: CInt {
  get {
    return
  }
}
var ABMON_11: CInt {
  get {
    return
  }
}
var B_WRITE: CInt {
  get {
    return
  }
}
var ABMON_12: CInt {
  get {
    return
  }
}
var ABMON_2: CInt {
  get {
    return
  }
}
var ABMON_4: CInt {
  get {
    return
  }
}
var ABMON_3: CInt {
  get {
    return
  }
}
var CALENDAR_CLOCK: CInt {
  get {
    return
  }
}
var B_PARTITIONMASK: CInt {
  get {
    return
  }
}
var B_PARTITIONSHIFT: CInt {
  get {
    return
  }
}
var B_PASSIVE: CInt {
  get {
    return
  }
}
var B_PHYS: CInt {
  get {
    return
  }
}
var B_RAW: CInt {
  get {
    return
  }
}
var ABDAY_1: CInt {
  get {
    return
  }
}
var B_STATICCONTENT: CInt {
  get {
    return
  }
}
var B_READ: CInt {
  get {
    return
  }
}
var B_THROTTLED_IO: CInt {
  get {
    return
  }
}
var ABDAY_2: CInt {
  get {
    return
  }
}
var ABDAY_4: CInt {
  get {
    return
  }
}
var ABDAY_3: CInt {
  get {
    return
  }
}
var ACL_MAX_ENTRIES: CInt {
  get {
    return
  }
}
var ACCOUNTING: CInt {
  get {
    return
  }
}
var CCAR_OFLOW: CInt {
  get {
    return
  }
}
var ACOMPAT: CInt {
  get {
    return
  }
}
var ACORE: CInt {
  get {
    return
  }
}
var ACL_UNDEFINED_ID: NilType {
  get {
    return
  }
}
var CCTS_OFLOW: CInt {
  get {
    return
  }
}
var CDTR_IFLOW: CInt {
  get {
    return
  }
}
var CDSR_OFLOW: CInt {
  get {
    return
  }
}
var CEOL: CInt {
  get {
    return
  }
}
var ABMON_6: CInt {
  get {
    return
  }
}
var ABMON_5: CInt {
  get {
    return
  }
}
var ABMON_9: CInt {
  get {
    return
  }
}
var CALL_NOT_IN_CARBON: CInt {
  get {
    return
  }
}
var ABMON_7: CInt {
  get {
    return
  }
}
var ABMON_8: CInt {
  get {
    return
  }
}
var CBLOCK: CInt {
  get {
    return
  }
}
var ACCESSOR_CALLS_ARE_FUNCTIONS: CInt {
  get {
    return
  }
}
var CBRK: CInt {
  get {
    return
  }
}
var ACCESSX_MAX_DESCRIPTORS: CInt {
  get {
    return
  }
}
var CIGNORE: CInt {
  get {
    return
  }
}
var CERASE: CInt {
  get {
    return
  }
}
var CHARCLASS_NAME_MAX: CInt {
  get {
    return
  }
}
var CHAR_MAX: CInt {
  get {
    return
  }
}
var CHAR_BIT: CInt {
  get {
    return
  }
}
var CHILD_MAX: CInt {
  get {
    return
  }
}
var CHAR_MIN: CInt {
  get {
    return
  }
}
var CLD_EXITED: CInt {
  get {
    return
  }
}
var CLD_KILLED: CInt {
  get {
    return
  }
}
var CLD_NOOP: CInt {
  get {
    return
  }
}
var CLD_CONTINUED: CInt {
  get {
    return
  }
}
var CLD_DUMPED: CInt {
  get {
    return
  }
}
var CLK_TCK: CInt {
  get {
    return
  }
}
var CLOCAL: CInt {
  get {
    return
  }
}
var CLD_STOPPED: CInt {
  get {
    return
  }
}
var CLD_TRAPPED: CInt {
  get {
    return
  }
}
var AF_DLI: CInt {
  get {
    return
  }
}
var CMASK: CInt {
  get {
    return
  }
}
var AF_DECnet: CInt {
  get {
    return
  }
}
var CLSIZELOG2: CInt {
  get {
    return
  }
}
var AF_E164: CInt {
  get {
    return
  }
}
var CMIN: CInt {
  get {
    return
  }
}
var AF_COIP: CInt {
  get {
    return
  }
}
var CLSIZE: CInt {
  get {
    return
  }
}
var AF_DATAKIT: CInt {
  get {
    return
  }
}
var AF_IMPLINK: CInt {
  get {
    return
  }
}
var AF_IEEE80211: CInt {
  get {
    return
  }
}
var AF_INET: CInt {
  get {
    return
  }
}
var AF_ECMA: CInt {
  get {
    return
  }
}
var AF_HYLINK: CInt {
  get {
    return
  }
}
var CLOCK_ALARM_MAXRES: CInt {
  get {
    return
  }
}
var CLOCK_ALARM_MINRES: CInt {
  get {
    return
  }
}
var CLOCKS_PER_SEC: CInt {
  get {
    return
  }
}
var CLOCK_ALARM_CURRES: CInt {
  get {
    return
  }
}
var AF_CHAOS: CInt {
  get {
    return
  }
}
var AF_CNT: CInt {
  get {
    return
  }
}
var CLOCK_GET_TIME_RES: CInt {
  get {
    return
  }
}
var AFORK: CInt {
  get {
    return
  }
}
var AF_CCITT: CInt {
  get {
    return
  }
}
var AF_APPLETALK: CInt {
  get {
    return
  }
}
var AF_PUP: CInt {
  get {
    return
  }
}
var AF_PPP: CInt {
  get {
    return
  }
}
var AF_NS: CInt {
  get {
    return
  }
}
var AF_OSI: CInt {
  get {
    return
  }
}
var AF_NETBIOS: CInt {
  get {
    return
  }
}
var AF_SYSTEM: CInt {
  get {
    return
  }
}
var AF_SNA: CInt {
  get {
    return
  }
}
var CONTROL: CInt {
  get {
    return
  }
}
var AF_ROUTE: CInt {
  get {
    return
  }
}
var AF_SIP: CInt {
  get {
    return
  }
}
var COMAPT_MAXLOGNAME: CInt {
  get {
    return
  }
}
var AF_RESERVED_36: CInt {
  get {
    return
  }
}
var AF_LAT: CInt {
  get {
    return
  }
}
var AF_ISDN: CInt {
  get {
    return
  }
}
var AF_ISO: CInt {
  get {
    return
  }
}
var AF_IPX: CInt {
  get {
    return
  }
}
var AF_INET6: CInt {
  get {
    return
  }
}
var AF_NDRV: CInt {
  get {
    return
  }
}
var AF_NATM: CInt {
  get {
    return
  }
}
var AF_LOCAL: CInt {
  get {
    return
  }
}
var AF_MAX: CInt {
  get {
    return
  }
}
var AF_LINK: CInt {
  get {
    return
  }
}
var COLL_WEIGHTS_MAX: CInt {
  get {
    return
  }
}
var CODESET: CInt {
  get {
    return
  }
}
var AI_NUMERICHOST: CInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_XSCALE: CInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_SWIFT: CInt {
  get {
    return
  }
}
var AI_CANONNAME: CInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_CYCLONE: CInt {
  get {
    return
  }
}
var AI_ALL: CInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_9: CUnsignedInt {
  get {
    return
  }
}
var AI_V4MAPPED_CFG: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_23: CInt {
  get {
    return
  }
}
var AI_V4MAPPED: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_15: CInt {
  get {
    return
  }
}
var AI_PASSIVE: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_14: CInt {
  get {
    return
  }
}
var AI_NUMERICSERV: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_13: CUnsignedInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_11: CUnsignedInt {
  get {
    return
  }
}
var AHZ: CInt {
  get {
    return
  }
}
var AF_UTUN: CInt {
  get {
    return
  }
}
var CPF_OVERWRITE: CInt {
  get {
    return
  }
}
var AF_UNSPEC: CInt {
  get {
    return
  }
}
var AF_UNIX: CInt {
  get {
    return
  }
}
var AF_SYS_CONTROL: CInt {
  get {
    return
  }
}
var CPF_IGNORE_MODE: CInt {
  get {
    return
  }
}
var AI_ADDRCONFIG: CInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_15: CUnsignedInt {
  get {
    return
  }
}
var AIO_NOTCANCELED: CInt {
  get {
    return
  }
}
var AIO_LISTIO_MAX: CInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_14: CUnsignedInt {
  get {
    return
  }
}
var AIO_CANCELED: CInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_13: CInt {
  get {
    return
  }
}
var CPUFAMILY_ARM_12: CUnsignedInt {
  get {
    return
  }
}
var AIO_ALLDONE: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_ETHERNET: CInt {
  get {
    return
  }
}
var CPUFAMILY_POWERPC_G4: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_FAITH: CInt {
  get {
    return
  }
}
var CPUFAMILY_POWERPC_G5: CUnsignedInt {
  get {
    return
  }
}
var APPLE_IF_FAM_FIREWIRE: CInt {
  get {
    return
  }
}
var CPUFAMILY_UNKNOWN: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_GIF: CInt {
  get {
    return
  }
}
var CPUMON_MAKE_FATAL: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_SANDYBRIDGE: CInt {
  get {
    return
  }
}
var ALT_DIGITS: CInt {
  get {
    return
  }
}
var AM_STR: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_WESTMERE: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_BOND: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_YONAH: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_DISC: CInt {
  get {
    return
  }
}
var CPUFAMILY_POWERPC_G3: CUnsignedInt {
  get {
    return
  }
}
var ALLOW_OBSOLETE_CARBON_OSUTILS: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_IVYBRIDGE: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_MEROM: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_NEHALEM: CInt {
  get {
    return
  }
}
var ALRMTYPE: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_PENRYN: CInt {
  get {
    return
  }
}
var ALTWERASE: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_26: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_CORE2: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_CORE: CInt {
  get {
    return
  }
}
var ALLOW_OBSOLETE_CARBON_MACMEMORY: CInt {
  get {
    return
  }
}
var CPUFAMILY_INTEL_HASWELL: CInt {
  get {
    return
  }
}
var ARCDENSITY: CInt {
  get {
    return
  }
}
var ARG1_EXTENT: CInt {
  get {
    return
  }
}
var ARGS10_EXTENT: CInt {
  get {
    return
  }
}
var AQ_HIWATER: CInt {
  get {
    return
  }
}
var AQ_MAXBUFSZ: CInt {
  get {
    return
  }
}
var AQ_LOWATER: CInt {
  get {
    return
  }
}
var AQ_MAXHIGH: CInt {
  get {
    return
  }
}
var CPU_STATE_SYSTEM: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_SLIP: CInt {
  get {
    return
  }
}
var CPU_STATE_USER: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_STF: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_TUN: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_VLAN: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_LOOPBACK: CInt {
  get {
    return
  }
}
var CPU_ARCH_ABI64: CInt {
  get {
    return
  }
}
var CPU_ARCH_MASK: CUnsignedInt {
  get {
    return
  }
}
var APPLE_IF_FAM_MDECAP: CInt {
  get {
    return
  }
}
var CPU_STATE_MAX: CInt {
  get {
    return
  }
}
var CPU_STATE_IDLE: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_PPP: CInt {
  get {
    return
  }
}
var CPU_STATE_NICE: CInt {
  get {
    return
  }
}
var APPLE_IF_FAM_PVC: CInt {
  get {
    return
  }
}
var ATTR_CMN_BKUPTIME: CInt {
  get {
    return
  }
}
var ATTR_CMN_ADDEDTIME: CInt {
  get {
    return
  }
}
var ATTR_CMN_CRTIME: CInt {
  get {
    return
  }
}
var ATTR_CMN_CHGTIME: CInt {
  get {
    return
  }
}
var ATTR_BIT_MAP_COUNT: CInt {
  get {
    return
  }
}
var ATTR_CMN_ACCTIME: CInt {
  get {
    return
  }
}
var ATTR_CMN_ACCESSMASK: CInt {
  get {
    return
  }
}
var ARGS8_EXTENT: CInt {
  get {
    return
  }
}
var ARGS7_EXTENT: CInt {
  get {
    return
  }
}
var ASU: CInt {
  get {
    return
  }
}
var ARGS9_EXTENT: CInt {
  get {
    return
  }
}
var ARGS3_EXTENT: CInt {
  get {
    return
  }
}
var ARGS4_EXTENT: CInt {
  get {
    return
  }
}
var ARGS2_EXTENT: CInt {
  get {
    return
  }
}
var ARGS6_EXTENT: CInt {
  get {
    return
  }
}
var ARGS5_EXTENT: CInt {
  get {
    return
  }
}
var ATTR_CMN_MODTIME: CInt {
  get {
    return
  }
}
var CPU_SUBTYPE_MASK: CUnsignedInt {
  get {
    return
  }
}
var ATTR_CMN_GRPUUID: CInt {
  get {
    return
  }
}
var ATTR_CMN_NAMEDATTRCOUNT: CInt {
  get {
    return
  }
}
var ATTR_CMN_NAME: CInt {
  get {
    return
  }
}
var ATTR_CMN_FULLPATH: CInt {
  get {
    return
  }
}
var ATTR_CMN_FSID: CInt {
  get {
    return
  }
}
var ATTR_CMN_GRPID: CInt {
  get {
    return
  }
}
var ATTR_CMN_GEN_COUNT: CInt {
  get {
    return
  }
}
var CPU_SUBTYPE_LIB64: CUnsignedInt {
  get {
    return
  }
}
var ATTR_CMN_FILEID: CInt {
  get {
    return
  }
}
var ATTR_CMN_EXTENDED_SECURITY: CInt {
  get {
    return
  }
}
var CPU_SUBTYPE_INTEL_FAMILY_MAX: CInt {
  get {
    return
  }
}
var ATTR_CMN_FNDRINFO: CInt {
  get {
    return
  }
}
var CPU_SUBTYPE_INTEL_MODEL_ALL: CInt {
  get {
    return
  }
}
var ATTR_CMN_FLAGS: CInt {
  get {
    return
  }
}
var ATTR_CMN_DEVID: CInt {
  get {
    return
  }
}
var ATTR_CMN_DATA_PROTECT_FLAGS: CInt {
  get {
    return
  }
}
var ATTR_CMN_ERROR: CInt {
  get {
    return
  }
}
var ATTR_CMN_DOCUMENT_ID: CInt {
  get {
    return
  }
}
var ATTR_DIR_ENTRYCOUNT: CInt {
  get {
    return
  }
}
var ATTR_DIR_LINKCOUNT: CInt {
  get {
    return
  }
}
var ATTR_CMN_VALIDMASK: CUnsignedInt {
  get {
    return
  }
}
var ATTR_CMN_VOLSETMASK: CInt {
  get {
    return
  }
}
var ATTR_CMN_USERACCESS: CInt {
  get {
    return
  }
}
var ATTR_CMN_UUID: CInt {
  get {
    return
  }
}
var ATTR_CMN_SCRIPT: CInt {
  get {
    return
  }
}
var ATTR_CMN_SETMASK: CInt {
  get {
    return
  }
}
var ATTR_CMN_PAROBJID: CInt {
  get {
    return
  }
}
var ATTR_CMN_RETURNED_ATTRS: CUnsignedInt {
  get {
    return
  }
}
var ATTR_CMN_OWNERID: CInt {
  get {
    return
  }
}
var ATTR_CMN_PARENTID: CInt {
  get {
    return
  }
}
var ATTR_CMN_OBJTAG: CInt {
  get {
    return
  }
}
var ATTR_CMN_OBJTYPE: CInt {
  get {
    return
  }
}
var ATTR_CMN_NAMEDATTRLIST: CInt {
  get {
    return
  }
}
var ATTR_CMN_OBJID: CInt {
  get {
    return
  }
}
var ATTR_CMN_OBJPERMANENTID: CInt {
  get {
    return
  }
}
var ATTR_FILE_RSRCALLOCSIZE: CInt {
  get {
    return
  }
}
var ATTR_FILE_RSRCEXTENTS: CInt {
  get {
    return
  }
}
var ATTR_FILE_IOBLOCKSIZE: CInt {
  get {
    return
  }
}
var ATTR_FILE_LINKCOUNT: CInt {
  get {
    return
  }
}
var ATTR_FILE_FORKCOUNT: CInt {
  get {
    return
  }
}
var ATTR_FILE_FORKLIST: CInt {
  get {
    return
  }
}
var ATTR_FILE_DEVTYPE: CInt {
  get {
    return
  }
}
var ATTR_FILE_FILETYPE: CInt {
  get {
    return
  }
}
var ATTR_FILE_DATAEXTENTS: CInt {
  get {
    return
  }
}
var ATTR_FILE_DATALENGTH: CInt {
  get {
    return
  }
}
var ATTR_FILE_CLUMPSIZE: CInt {
  get {
    return
  }
}
var ATTR_FILE_DATAALLOCSIZE: CInt {
  get {
    return
  }
}
var ATTR_DIR_VALIDMASK: CInt {
  get {
    return
  }
}
var ATTR_FILE_ALLOCSIZE: CInt {
  get {
    return
  }
}
var ATTR_DIR_MOUNTSTATUS: CInt {
  get {
    return
  }
}
var ATTR_DIR_SETMASK: CInt {
  get {
    return
  }
}
var ATTR_VOL_FSTYPE: CInt {
  get {
    return
  }
}
var ATTR_VOL_FILECOUNT: CInt {
  get {
    return
  }
}
var ATTR_VOL_ENCODINGSUSED: CInt {
  get {
    return
  }
}
var ATTR_VOL_DIRCOUNT: CInt {
  get {
    return
  }
}
var ATTR_VOL_CAPABILITIES: CInt {
  get {
    return
  }
}
var ATTR_VOL_ATTRIBUTES: CInt {
  get {
    return
  }
}
var ATTR_VOL_ALLOCATIONCLUMP: CInt {
  get {
    return
  }
}
var ATTR_MAX_BUFFER: CInt {
  get {
    return
  }
}
var ATTR_FORK_VALIDMASK: CInt {
  get {
    return
  }
}
var ATTR_FORK_TOTALSIZE: CInt {
  get {
    return
  }
}
var ATTR_FORK_SETMASK: CInt {
  get {
    return
  }
}
var ATTR_FORK_ALLOCSIZE: CInt {
  get {
    return
  }
}
var ATTR_FILE_VALIDMASK: CInt {
  get {
    return
  }
}
var ATTR_FILE_TOTALSIZE: CInt {
  get {
    return
  }
}
var ATTR_FILE_SETMASK: CInt {
  get {
    return
  }
}
var ATTR_FILE_RSRCLENGTH: CInt {
  get {
    return
  }
}
var AT_EACCESS: CInt {
  get {
    return
  }
}
var ATTR_VOL_VALIDMASK: CUnsignedInt {
  get {
    return
  }
}
var ATTR_VOL_UUID: CInt {
  get {
    return
  }
}
var ATTR_VOL_SPACEFREE: CInt {
  get {
    return
  }
}
var ATTR_VOL_SPACEAVAIL: CInt {
  get {
    return
  }
}
var ATTR_VOL_SIZE: CInt {
  get {
    return
  }
}
var ATTR_VOL_SIGNATURE: CInt {
  get {
    return
  }
}
var ATTR_VOL_SETMASK: CUnsignedInt {
  get {
    return
  }
}
var ATTR_VOL_OBJCOUNT: CInt {
  get {
    return
  }
}
var ATTR_VOL_NAME: CInt {
  get {
    return
  }
}
var ATTR_VOL_MOUNTPOINT: CInt {
  get {
    return
  }
}
var ATTR_VOL_MOUNTFLAGS: CInt {
  get {
    return
  }
}
var ATTR_VOL_MOUNTEDDEVICE: CInt {
  get {
    return
  }
}
var ATTR_VOL_MINALLOCATION: CInt {
  get {
    return
  }
}
var ATTR_VOL_MAXOBJCOUNT: CInt {
  get {
    return
  }
}
var ATTR_VOL_IOBLOCKSIZE: CInt {
  get {
    return
  }
}
var ATTR_VOL_INFO: CUnsignedInt {
  get {
    return
  }
}
var AXSIG: CInt {
  get {
    return
  }
}
var A_GETCWD: CInt {
  get {
    return
  }
}
var A_GETKAUDIT: CInt {
  get {
    return
  }
}
var A_GETFSIZE: CInt {
  get {
    return
  }
}
var A_GETCOND: CInt {
  get {
    return
  }
}
var A_GETCAR: CInt {
  get {
    return
  }
}
var A_GETCLASS: CInt {
  get {
    return
  }
}
var A_GETSFLAGS: CInt {
  get {
    return
  }
}
var A_GETSINFO_ADDR: CInt {
  get {
    return
  }
}
var A_GETSTAT: CInt {
  get {
    return
  }
}
var A_GETPINFO: CInt {
  get {
    return
  }
}
var A_GETPOLICY: CInt {
  get {
    return
  }
}
var A_GETKMASK: CInt {
  get {
    return
  }
}
var A_GETQCTRL: CInt {
  get {
    return
  }
}
var A_OLDSETCOND: CInt {
  get {
    return
  }
}
var A_GETPINFO_ADDR: CInt {
  get {
    return
  }
}
var A_OLDSETPOLICY: CInt {
  get {
    return
  }
}
var A_OLDSETQCTRL: CInt {
  get {
    return
  }
}
var A_OLDGETCOND: CInt {
  get {
    return
  }
}
var A_OLDGETPOLICY: CInt {
  get {
    return
  }
}
var A_OLDGETQCTRL: CInt {
  get {
    return
  }
}
var A_SETPMASK: CInt {
  get {
    return
  }
}
var A_SETKMASK: CInt {
  get {
    return
  }
}
var A_SETFSIZE: CInt {
  get {
    return
  }
}
var A_SETPOLICY: CInt {
  get {
    return
  }
}
var A_SETKAUDIT: CInt {
  get {
    return
  }
}
var A_SENDTRIGGER: CInt {
  get {
    return
  }
}
var A_SETCLASS: CInt {
  get {
    return
  }
}
var A_SETUMASK: CInt {
  get {
    return
  }
}
var A_SETCOND: CInt {
  get {
    return
  }
}
var B0: CInt {
  get {
    return
  }
}
var A_SETSFLAGS: CInt {
  get {
    return
  }
}
var A_SETQCTRL: CInt {
  get {
    return
  }
}
var A_SETSTAT: CInt {
  get {
    return
  }
}
var A_SETSMASK: CInt {
  get {
    return
  }
}
var B19200: CInt {
  get {
    return
  }
}
var B1800: CInt {
  get {
    return
  }
}
var B2400: CInt {
  get {
    return
  }
}
var B200: CInt {
  get {
    return
  }
}
var B230400: CInt {
  get {
    return
  }
}
var B1200: CInt {
  get {
    return
  }
}
var B115200: CInt {
  get {
    return
  }
}
var B110: CInt {
  get {
    return
  }
}
var B14400: CInt {
  get {
    return
  }
}
var B150: CInt {
  get {
    return
  }
}
var B134: CInt {
  get {
    return
  }
}
var B7200: CInt {
  get {
    return
  }
}
var B600: CInt {
  get {
    return
  }
}
var B9600: CInt {
  get {
    return
  }
}
var B76800: CInt {
  get {
    return
  }
}
var B75: CInt {
  get {
    return
  }
}
var B38400: CInt {
  get {
    return
  }
}
var B300: CInt {
  get {
    return
  }
}
var B28800: CInt {
  get {
    return
  }
}
var B4800: CInt {
  get {
    return
  }
}
var B50: CInt {
  get {
    return
  }
}
var B57600: CInt {
  get {
    return
  }
}
var BC_DIM_MAX: CInt {
  get {
    return
  }
}
var BC_BASE_MAX: CInt {
  get {
    return
  }
}
var BC_STRING_MAX: CInt {
  get {
    return
  }
}
var BC_SCALE_MAX: CInt {
  get {
    return
  }
}
var BACKSPACE: CInt {
  get {
    return
  }
}
var BLK_WRITE: CInt {
  get {
    return
  }
}
var BLK_ONLYVALID: CUnsignedInt {
  get {
    return
  }
}
var BLK_READ: CInt {
  get {
    return
  }
}
var BIG_ENDIAN: CInt {
  get {
    return
  }
}
var BLK_META: CInt {
  get {
    return
  }
}
var BSM_TEXTBUFSZ: CInt {
  get {
    return
  }
}
var BUFSIZ: CInt {
  get {
    return
  }
}
var BSD4_3: CInt {
  get {
    return
  }
}
var BSDLY: CInt {
  get {
    return
  }
}
var BSD4_4: CInt {
  get {
    return
  }
}
var BS1: CInt {
  get {
    return
  }
}
var BSD: CInt {
  get {
    return
  }
}
var BOOT_TIME: CInt {
  get {
    return
  }
}
var BRKINT: CInt {
  get {
    return
  }
}
var BS0: CInt {
  get {
    return
  }
}
var BUF_SCAN_DIRTY: CInt {
  get {
    return
  }
}
var BLKDEV_IOSIZE: CInt {
  get {
    return
  }
}
var BUF_SKIP_LOCKED: CInt {
  get {
    return
  }
}
var BUF_RETURNED_DONE: CInt {
  get {
    return
  }
}
var BUF_NOTIFY_BUSY: CInt {
  get {
    return
  }
}
var BUF_RETURNED: CInt {
  get {
    return
  }
}
var BUF_INVALIDATE_LOCKED: CInt {
  get {
    return
  }
}
var BUF_CLAIMED: CInt {
  get {
    return
  }
}
var BUF_CLAIMED_DONE: CInt {
  get {
    return
  }
}
var BUS_OBJERR: CInt {
  get {
    return
  }
}
var BUS_ADRERR: CInt {
  get {
    return
  }
}
var BUS_NOOP: CInt {
  get {
    return
  }
}
var BUS_ADRALN: CInt {
  get {
    return
  }
}
var BUF_WAIT: CInt {
  get {
    return
  }
}
var BUF_SKIP_META: CInt {
  get {
    return
  }
}
var BUF_WRITE_DATA: CInt {
  get {
    return
  }
}
var BUF_SKIP_NONLOCKED: CInt {
  get {
    return
  }
}
var BUF_SCAN_CLEAN: CInt {
  get {
    return
  }
}
var BYTE_SIZE: CInt {
  get {
    return
  }
}
var BYTE_ORDER: CInt {
  get {
    return
  }
}
var SYS_memorystatus_get_level: CInt {
  get {
    return
  }
}
var SYS_mkdir: CInt {
  get {
    return
  }
}
var SYS_minherit: CInt {
  get {
    return
  }
}
var SYS_mincore: CInt {
  get {
    return
  }
}
var SYS_mkdirat: CInt {
  get {
    return
  }
}
var SYS_mkfifo_extended: CInt {
  get {
    return
  }
}
var SYS_mkdir_extended: CInt {
  get {
    return
  }
}
var SYS_mkfifo: CInt {
  get {
    return
  }
}
var SYS_listxattr: CInt {
  get {
    return
  }
}
var SYS_listen: CInt {
  get {
    return
  }
}
var SYS_lstat64: CInt {
  get {
    return
  }
}
var SYS_lstat: CInt {
  get {
    return
  }
}
var SYS_lseek: CInt {
  get {
    return
  }
}
var SYS_lstat_extended: CInt {
  get {
    return
  }
}
var SYS_lstat64_extended: CInt {
  get {
    return
  }
}
var SYS_memorystatus_control: CInt {
  get {
    return
  }
}
var SYS_madvise: CInt {
  get {
    return
  }
}
var MACH_TASK_BASIC_INFO: CInt {
  get {
    return
  }
}
var SYS_kevent64: CInt {
  get {
    return
  }
}
var MACH_SEND_TRAILER: CInt {
  get {
    return
  }
}
var SYS_kevent: CInt {
  get {
    return
  }
}
var SYS_kqueue: CInt {
  get {
    return
  }
}
var SYS_kill: CInt {
  get {
    return
  }
}
var SYS_lchown: CInt {
  get {
    return
  }
}
var SYS_ledger: CInt {
  get {
    return
  }
}
var SYS_link: CInt {
  get {
    return
  }
}
var SYS_lio_listio: CInt {
  get {
    return
  }
}
var SYS_linkat: CInt {
  get {
    return
  }
}
var MACH_SEND_NODENAP: CInt {
  get {
    return
  }
}
var SYS_guarded_open_np: CInt {
  get {
    return
  }
}
var MACH_SEND_MSG_TOO_SMALL: CInt {
  get {
    return
  }
}
var MACH_SEND_NOTIFY: CInt {
  get {
    return
  }
}
var SYS_guarded_open_dprotected_np: CInt {
  get {
    return
  }
}
var MACH_SEND_NOIMPORTANCE: CInt {
  get {
    return
  }
}
var MACH_SEND_TIMED_OUT: CInt {
  get {
    return
  }
}
var SYS_initgroups: CInt {
  get {
    return
  }
}
var MACH_SEND_NO_BUFFER: CInt {
  get {
    return
  }
}
var SYS_identitysvc: CInt {
  get {
    return
  }
}
var SYS_iopolicysys: CInt {
  get {
    return
  }
}
var MACH_SEND_TOO_LARGE: CInt {
  get {
    return
  }
}
var MACH_SEND_TIMEOUT: CInt {
  get {
    return
  }
}
var SYS_ioctl: CInt {
  get {
    return
  }
}
var SYS_getsockopt: CInt {
  get {
    return
  }
}
var SYS_issetugid: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_REPLY: CInt {
  get {
    return
  }
}
var SYS_gettid: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_RIGHT: CInt {
  get {
    return
  }
}
var SYS_gettimeofday: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_RT_OOL_SIZE: CInt {
  get {
    return
  }
}
var SYS_getuid: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_TRAILER: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_TYPE: CInt {
  get {
    return
  }
}
var SYS_getwgroups: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_VOUCHER: CInt {
  get {
    return
  }
}
var MACH_SEND_IN_PROGRESS: CInt {
  get {
    return
  }
}
var SYS_guarded_close_np: CInt {
  get {
    return
  }
}
var SYS_getxattr: CInt {
  get {
    return
  }
}
var MACH_SEND_MSG: CInt {
  get {
    return
  }
}
var SYS_guarded_kqueue_np: CInt {
  get {
    return
  }
}
var MACH_SEND_INTERRUPT: CInt {
  get {
    return
  }
}
var SYS_getpgid: CInt {
  get {
    return
  }
}
var MACH_SEND_INTERRUPTED: CInt {
  get {
    return
  }
}
var SYS_getpid: CInt {
  get {
    return
  }
}
var SYS_getpgrp: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_DATA: CInt {
  get {
    return
  }
}
var SYS_getppid: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_DEST: CInt {
  get {
    return
  }
}
var SYS_getpriority: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_HEADER: CInt {
  get {
    return
  }
}
var SYS_getrlimit: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_MEMORY: CInt {
  get {
    return
  }
}
var SYS_getrusage: CInt {
  get {
    return
  }
}
var SYS_getsgroups: CInt {
  get {
    return
  }
}
var SYS_kdebug_trace: CInt {
  get {
    return
  }
}
var SYS_getsockname: CInt {
  get {
    return
  }
}
var MACH_SEND_INVALID_NOTIFY: CInt {
  get {
    return
  }
}
var SYS_kas_info: CInt {
  get {
    return
  }
}
var SYS_getfsstat: CInt {
  get {
    return
  }
}
var SYS_getfsstat64: CInt {
  get {
    return
  }
}
var SYS_getgid: CInt {
  get {
    return
  }
}
var MACH_RCV_TRAILER_NULL: CInt {
  get {
    return
  }
}
var SYS_getgroups: CInt {
  get {
    return
  }
}
var MACH_RCV_TRAILER_SENDER: CInt {
  get {
    return
  }
}
var SYS_getsid: CInt {
  get {
    return
  }
}
var MACH_RCV_TRAILER_SEQNO: CInt {
  get {
    return
  }
}
var SYS_gethostuuid: CInt {
  get {
    return
  }
}
var SYS_getlcid: CInt {
  get {
    return
  }
}
var MACH_RCV_VOUCHER: CInt {
  get {
    return
  }
}
var SYS_getlogin: CInt {
  get {
    return
  }
}
var MACH_SEND_ALWAYS: CInt {
  get {
    return
  }
}
var SYS_getpeername: CInt {
  get {
    return
  }
}
var MACH_SEND_IMPORTANCE: CInt {
  get {
    return
  }
}
var MACH_RCV_TIMED_OUT: CInt {
  get {
    return
  }
}
var SYS_getauid: CInt {
  get {
    return
  }
}
var MACH_RCV_TIMEOUT: CInt {
  get {
    return
  }
}
var SYS_getdirentries: CInt {
  get {
    return
  }
}
var SYS_getitimer: CInt {
  get {
    return
  }
}
var MACH_RCV_TOO_LARGE: CInt {
  get {
    return
  }
}
var SYS_getdirentries64: CInt {
  get {
    return
  }
}
var MACH_RCV_TRAILER_AUDIT: CInt {
  get {
    return
  }
}
var SYS_getdirentriesattr: CInt {
  get {
    return
  }
}
var MACH_RCV_TRAILER_AV: CInt {
  get {
    return
  }
}
var SYS_getdtablesize: CInt {
  get {
    return
  }
}
var MACH_RCV_TRAILER_CTX: CInt {
  get {
    return
  }
}
var SYS_getegid: CInt {
  get {
    return
  }
}
var SYS_geteuid: CInt {
  get {
    return
  }
}
var SYS_getfh: CInt {
  get {
    return
  }
}
var MACH_RCV_TRAILER_LABELS: CInt {
  get {
    return
  }
}
var MAP_NOCACHE: CInt {
  get {
    return
  }
}
var SYS_quotactl: CInt {
  get {
    return
  }
}
var MAP_MEM_WTHRU: CInt {
  get {
    return
  }
}
var SYS_pwrite_nocancel: CInt {
  get {
    return
  }
}
var MAP_MEM_WCOMB: CInt {
  get {
    return
  }
}
var SYS_pwrite: CInt {
  get {
    return
  }
}
var MAP_MEM_VM_SHARE: CInt {
  get {
    return
  }
}
var SYS_ptrace: CInt {
  get {
    return
  }
}
var MAP_MEM_VM_COPY: CInt {
  get {
    return
  }
}
var MAP_RENAME: CInt {
  get {
    return
  }
}
var MAP_PRIVATE: CInt {
  get {
    return
  }
}
var SYS_readlink: CInt {
  get {
    return
  }
}
var SYS_readlinkat: CInt {
  get {
    return
  }
}
var MAP_NORESERVE: CInt {
  get {
    return
  }
}
var SYS_read_nocancel: CInt {
  get {
    return
  }
}
var MAP_NOEXTEND: CInt {
  get {
    return
  }
}
var MAP_MEM_NAMED_REUSE: CInt {
  get {
    return
  }
}
var SYS_psynch_rw_unlock: CInt {
  get {
    return
  }
}
var SYS_read: CInt {
  get {
    return
  }
}
var MAP_MEM_NAMED_CREATE: CInt {
  get {
    return
  }
}
var SYS_psynch_rw_rdlock: CInt {
  get {
    return
  }
}
var MAP_MEM_IO: CInt {
  get {
    return
  }
}
var SYS_psynch_rw_longrdlock: CInt {
  get {
    return
  }
}
var MAP_MEM_INNERWBACK: CInt {
  get {
    return
  }
}
var SYS_psynch_rw_downgrade: CInt {
  get {
    return
  }
}
var MAP_MEM_USE_DATA_ADDR: CInt {
  get {
    return
  }
}
var SYS_psynch_rw_wrlock: CInt {
  get {
    return
  }
}
var MAP_MEM_PURGABLE: CInt {
  get {
    return
  }
}
var SYS_psynch_rw_upgrade: CInt {
  get {
    return
  }
}
var MAP_MEM_ONLY: CInt {
  get {
    return
  }
}
var SYS_psynch_rw_yieldwrlock: CInt {
  get {
    return
  }
}
var SYS_psynch_rw_unlock2: CInt {
  get {
    return
  }
}
var MAP_MEM_NOOP: CInt {
  get {
    return
  }
}
var SYS_psynch_cvclrprepost: CInt {
  get {
    return
  }
}
var MAP_COPY: CInt {
  get {
    return
  }
}
var SYS_psynch_cvbroad: CInt {
  get {
    return
  }
}
var MAP_ANON: CInt {
  get {
    return
  }
}
var SYS_process_policy: CInt {
  get {
    return
  }
}
var SYS_proc_uuid_policy: CInt {
  get {
    return
  }
}
var MALLOC_ZONE_SPECIFIC_FLAGS: CInt {
  get {
    return
  }
}
var SYS_psynch_mutexwait: CInt {
  get {
    return
  }
}
var MAP_MEM_COPYBACK: CInt {
  get {
    return
  }
}
var MAP_JIT: CInt {
  get {
    return
  }
}
var SYS_psynch_mutexdrop: CInt {
  get {
    return
  }
}
var MAP_HASSEMAPHORE: CInt {
  get {
    return
  }
}
var MAP_FILE: CInt {
  get {
    return
  }
}
var MAP_FIXED: CInt {
  get {
    return
  }
}
var MAGIC: CString {
  get {
    return
  }
}
var SYS_posix_spawn: CInt {
  get {
    return
  }
}
var SYS_pread: CInt {
  get {
    return
  }
}
var SYS_poll_nocancel: CInt {
  get {
    return
  }
}
var MADV_ZERO_WIRED_PAGES: CInt {
  get {
    return
  }
}
var SYS_poll: CInt {
  get {
    return
  }
}
var MADV_WILLNEED: CInt {
  get {
    return
  }
}
var SYS_pipe: CInt {
  get {
    return
  }
}
var MADV_SEQUENTIAL: CInt {
  get {
    return
  }
}
var MALLOC_PTR_REGION_RANGE_TYPE: CInt {
  get {
    return
  }
}
var SYS_proc_trace_log: CInt {
  get {
    return
  }
}
var MALLOC_PTR_IN_USE_RANGE_TYPE: CInt {
  get {
    return
  }
}
var SYS_psynch_cvwait: CInt {
  get {
    return
  }
}
var SYS_proc_rlimit_control: CInt {
  get {
    return
  }
}
var MALLOC_ADMIN_REGION_RANGE_TYPE: CInt {
  get {
    return
  }
}
var SYS_psynch_cvsignal: CInt {
  get {
    return
  }
}
var SYS_proc_info: CInt {
  get {
    return
  }
}
var SYS_pread_nocancel: CInt {
  get {
    return
  }
}
var SYS_pathconf: CInt {
  get {
    return
  }
}
var MADV_CAN_REUSE: CInt {
  get {
    return
  }
}
var SYS_peeloff: CInt {
  get {
    return
  }
}
var MADV_DONTNEED: CInt {
  get {
    return
  }
}
var SYS_openat_nocancel: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_MAX_ALLOWED: CInt {
  get {
    return
  }
}
var SYS_openbyid_np: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_MIN_REQUIRED: CInt {
  get {
    return
  }
}
var MADV_NORMAL: CInt {
  get {
    return
  }
}
var SYS_pid_shutdown_sockets: CInt {
  get {
    return
  }
}
var MADV_RANDOM: CInt {
  get {
    return
  }
}
var SYS_pid_suspend: CInt {
  get {
    return
  }
}
var SYS_pid_hibernate: CInt {
  get {
    return
  }
}
var MADV_FREE: CInt {
  get {
    return
  }
}
var MADV_FREE_REUSE: CInt {
  get {
    return
  }
}
var SYS_pid_resume: CInt {
  get {
    return
  }
}
var MADV_FREE_REUSABLE: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_4: CInt {
  get {
    return
  }
}
var SYS_nfsclnt: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_5: CInt {
  get {
    return
  }
}
var SYS_nfssvc: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_2: CInt {
  get {
    return
  }
}
var SYS_munmap: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_3: CInt {
  get {
    return
  }
}
var SYS_necp_match_policy: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_8: CInt {
  get {
    return
  }
}
var SYS_open_extended: CInt {
  get {
    return
  }
}
var SYS_openat: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_9: CInt {
  get {
    return
  }
}
var SYS_open_nocancel: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_6: CInt {
  get {
    return
  }
}
var SYS_open: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_7: CInt {
  get {
    return
  }
}
var SYS_open_dprotected_np: CInt {
  get {
    return
  }
}
var SYS_msgsnd: CInt {
  get {
    return
  }
}
var SYS_msgsnd_nocancel: CInt {
  get {
    return
  }
}
var SYS_msgrcv: CInt {
  get {
    return
  }
}
var SYS_msgsys: CInt {
  get {
    return
  }
}
var SYS_msgrcv_nocancel: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_1: CInt {
  get {
    return
  }
}
var SYS_munlock: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_10: CInt {
  get {
    return
  }
}
var SYS_munlockall: CInt {
  get {
    return
  }
}
var MACH_ZONE_NAME_MAX_LEN: CInt {
  get {
    return
  }
}
var SYS_msync: CInt {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_0: CInt {
  get {
    return
  }
}
var SYS_msync_nocancel: CInt {
  get {
    return
  }
}
var SYS_mlockall: CInt {
  get {
    return
  }
}
var SYS_mmap: CInt {
  get {
    return
  }
}
var SYS_modwatch: CInt {
  get {
    return
  }
}
var SYS_mknod: CInt {
  get {
    return
  }
}
var SYS_mlock: CInt {
  get {
    return
  }
}
var SYS_msgctl: CInt {
  get {
    return
  }
}
var SYS_msgget: CInt {
  get {
    return
  }
}
var SYS_mount: CInt {
  get {
    return
  }
}
var SYS_mprotect: CInt {
  get {
    return
  }
}
var MCL_FUTURE: CInt {
  get {
    return
  }
}
var SYS_shmsys: CInt {
  get {
    return
  }
}
var MCL_CURRENT: CInt {
  get {
    return
  }
}
var MCLSHIFT: CInt {
  get {
    return
  }
}
var SYS_shmdt: CInt {
  get {
    return
  }
}
var MCS_OFFLINE: CInt {
  get {
    return
  }
}
var SYS_sigaction: CInt {
  get {
    return
  }
}
var MCS_DISABLED: CInt {
  get {
    return
  }
}
var SYS_shutdown: CInt {
  get {
    return
  }
}
var MCAST_UNDEFINED: CInt {
  get {
    return
  }
}
var SYS_shm_unlink: CInt {
  get {
    return
  }
}
var MCAST_UNBLOCK_SOURCE: CInt {
  get {
    return
  }
}
var SYS_shm_open: CInt {
  get {
    return
  }
}
var SYS_shmget: CInt {
  get {
    return
  }
}
var SYS_shmat: CInt {
  get {
    return
  }
}
var MCAST_JOIN_SOURCE_GROUP: CInt {
  get {
    return
  }
}
var SYS_sfi_pidctl: CInt {
  get {
    return
  }
}
var SYS_shmctl: CInt {
  get {
    return
  }
}
var MCAST_JOIN_GROUP: CInt {
  get {
    return
  }
}
var MCAST_LEAVE_SOURCE_GROUP: CInt {
  get {
    return
  }
}
var SYS_shared_region_map_and_slide_np: CInt {
  get {
    return
  }
}
var SYS_sfi_ctl: CInt {
  get {
    return
  }
}
var MCAST_LEAVE_GROUP: CInt {
  get {
    return
  }
}
var MCAST_BLOCK_SOURCE: CInt {
  get {
    return
  }
}
var SYS_setuid: CInt {
  get {
    return
  }
}
var SYS_shared_region_check_np: CInt {
  get {
    return
  }
}
var MB_LEN_MAX: CInt {
  get {
    return
  }
}
var SYS_settimeofday: CInt {
  get {
    return
  }
}
var SYS_setxattr: CInt {
  get {
    return
  }
}
var MCAST_INCLUDE: CInt {
  get {
    return
  }
}
var MCAST_EXCLUDE: CInt {
  get {
    return
  }
}
var SYS_setwgroups: CInt {
  get {
    return
  }
}
var SYS_setsgroups: CInt {
  get {
    return
  }
}
var SYS_setsid: CInt {
  get {
    return
  }
}
var MBIGCLSHIFT: CInt {
  get {
    return
  }
}
var SYS_settid: CInt {
  get {
    return
  }
}
var MAX_MBUF_CNAME: CInt {
  get {
    return
  }
}
var SYS_setprivexec: CInt {
  get {
    return
  }
}
var MAX_KCTL_NAME: CInt {
  get {
    return
  }
}
var MAX_SACK_BLKS: CInt {
  get {
    return
  }
}
var SYS_setrlimit: CInt {
  get {
    return
  }
}
var MAX_CANON: CInt {
  get {
    return
  }
}
var SYS_setitimer: CInt {
  get {
    return
  }
}
var MAXUPRC: CInt {
  get {
    return
  }
}
var MAX_INPUT: CInt {
  get {
    return
  }
}
var SYS_seteuid: CInt {
  get {
    return
  }
}
var MAXTHREADNAMESIZE: CInt {
  get {
    return
  }
}
var SYS_setreuid: CInt {
  get {
    return
  }
}
var MAX_AUDITSTRING_LEN: CInt {
  get {
    return
  }
}
var MAX_AUDIT_RECORDS: CInt {
  get {
    return
  }
}
var SYS_setregid: CInt {
  get {
    return
  }
}
var MAXQUOTAS: CInt {
  get {
    return
  }
}
var SYS_sendto: CInt {
  get {
    return
  }
}
var MAXPRI: CInt {
  get {
    return
  }
}
var SYS_setattrlist: CInt {
  get {
    return
  }
}
var SYS_setaudit_addr: CInt {
  get {
    return
  }
}
var MAXSYMLINKS: CInt {
  get {
    return
  }
}
var SYS_setpriority: CInt {
  get {
    return
  }
}
var MAXNAMLEN: CInt {
  get {
    return
  }
}
var SYS_sendfile: CInt {
  get {
    return
  }
}
var MAXLOGNAME: CInt {
  get {
    return
  }
}
var MAXPATHLEN: CInt {
  get {
    return
  }
}
var SYS_sendmsg: CInt {
  get {
    return
  }
}
var SYS_setlcid: CInt {
  get {
    return
  }
}
var SYS_settid_with_pid: CInt {
  get {
    return
  }
}
var SYS_sendmsg_nocancel: CInt {
  get {
    return
  }
}
var SYS_setsockopt: CInt {
  get {
    return
  }
}
var MAXFLOAT: CFloat {
  get {
    return
  }
}
var SYS_semctl: CInt {
  get {
    return
  }
}
var SYS_sem_wait_nocancel: CInt {
  get {
    return
  }
}
var SYS_sendto_nocancel: CInt {
  get {
    return
  }
}
var SYS_semget: CInt {
  get {
    return
  }
}
var MAXFRAG: CInt {
  get {
    return
  }
}
var SYS_semop: CInt {
  get {
    return
  }
}
var SYS_setgid: CInt {
  get {
    return
  }
}
var MAXHOSTNAMELEN: CInt {
  get {
    return
  }
}
var SYS_semsys: CInt {
  get {
    return
  }
}
var MAXINTERP: CInt {
  get {
    return
  }
}
var SYS_sem_post: CInt {
  get {
    return
  }
}
var MAXCOMLEN: CInt {
  get {
    return
  }
}
var SYS_sem_trywait: CInt {
  get {
    return
  }
}
var SYS_setauid: CInt {
  get {
    return
  }
}
var MAXDOMNAMELEN: CInt {
  get {
    return
  }
}
var MATTR_VAL_OFF: CInt {
  get {
    return
  }
}
var SYS_select: CInt {
  get {
    return
  }
}
var SYS_sendmsg_x: CInt {
  get {
    return
  }
}
var SYS_sem_unlink: CInt {
  get {
    return
  }
}
var MATTR_VAL_ON: CInt {
  get {
    return
  }
}
var SYS_select_nocancel: CInt {
  get {
    return
  }
}
var SYS_sem_wait: CInt {
  get {
    return
  }
}
var SYS_sem_close: CInt {
  get {
    return
  }
}
var SYS_setlogin: CInt {
  get {
    return
  }
}
var MAX_TCPOPTLEN: CInt {
  get {
    return
  }
}
var SYS_rename: CInt {
  get {
    return
  }
}
var SYS_sem_open: CInt {
  get {
    return
  }
}
var MATTR_VAL_DCACHE_FLUSH: CInt {
  get {
    return
  }
}
var MATTR_VAL_GET: CInt {
  get {
    return
  }
}
var SYS_renameat: CInt {
  get {
    return
  }
}
var MATTR_VAL_GET_INFO: CInt {
  get {
    return
  }
}
var SYS_revoke: CInt {
  get {
    return
  }
}
var MATTR_VAL_ICACHE_FLUSH: CInt {
  get {
    return
  }
}
var SYS_rmdir: CInt {
  get {
    return
  }
}
var SYS_searchfs: CInt {
  get {
    return
  }
}
var MATTR_MIGRATE: CInt {
  get {
    return
  }
}
var MATTR_REPLICATE: CInt {
  get {
    return
  }
}
var SYS_recvmsg_nocancel: CInt {
  get {
    return
  }
}
var SYS_recvmsg: CInt {
  get {
    return
  }
}
var MATTR_VAL_CACHE_FLUSH: CInt {
  get {
    return
  }
}
var SYS_recvmsg_x: CInt {
  get {
    return
  }
}
var MATTR_VAL_CACHE_SYNC: CInt {
  get {
    return
  }
}
var SYS_removexattr: CInt {
  get {
    return
  }
}
var SYS_readv: CInt {
  get {
    return
  }
}
var MAP_RESERVED0080: CInt {
  get {
    return
  }
}
var MAP_SHARED: CInt {
  get {
    return
  }
}
var SYS_readv_nocancel: CInt {
  get {
    return
  }
}
var MATH_ERREXCEPT: CInt {
  get {
    return
  }
}
var MATH_ERRNO: CInt {
  get {
    return
  }
}
var SYS_recvfrom: CInt {
  get {
    return
  }
}
var SYS_reboot: CInt {
  get {
    return
  }
}
var MATTR_CACHE: CInt {
  get {
    return
  }
}
var SYS_recvfrom_nocancel: CInt {
  get {
    return
  }
}
var MIXEDMODE_CALLS_ARE_FUNCTIONS: CInt {
  get {
    return
  }
}
var SYS_setpgid: CInt {
  get {
    return
  }
}
var MINSIGSTKSZ: CInt {
  get {
    return
  }
}
var MINFREE_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var S_IRWXU: CInt {
  get {
    return
  }
}
var MINCORE_REFERENCED_OTHER: CInt {
  get {
    return
  }
}
var S_IRWXO: CInt {
  get {
    return
  }
}
var MINCORE_REFERENCED: CInt {
  get {
    return
  }
}
var S_IRUSR: CInt {
  get {
    return
  }
}
var MINCORE_MODIFIED_OTHER: CInt {
  get {
    return
  }
}
var S_IRWXG: CInt {
  get {
    return
  }
}
var S_IROTH: CInt {
  get {
    return
  }
}
var MINCORE_MODIFIED: CInt {
  get {
    return
  }
}
var S_IRGRP: CInt {
  get {
    return
  }
}
var SYS_setegid: CInt {
  get {
    return
  }
}
var MINCORE_INCORE: CInt {
  get {
    return
  }
}
var S_IFWHT: CInt {
  get {
    return
  }
}
var S_ISGID: CInt {
  get {
    return
  }
}
var MINBUCKET: CInt {
  get {
    return
  }
}
var MINARCS: CInt {
  get {
    return
  }
}
var S_IFSOCK: CInt {
  get {
    return
  }
}
var MIG_TYPE_ERROR: CInt {
  get {
    return
  }
}
var S_IFREG: CInt {
  get {
    return
  }
}
var MIG_TRAILER_ERROR: CInt {
  get {
    return
  }
}
var S_IREAD: CInt {
  get {
    return
  }
}
var S_IFIFO: CInt {
  get {
    return
  }
}
var S_IFLNK: CInt {
  get {
    return
  }
}
var MIG_SERVER_DIED: CInt {
  get {
    return
  }
}
var S_IFCHR: CInt {
  get {
    return
  }
}
var S_IFBLK: CInt {
  get {
    return
  }
}
var S_IEXEC: CInt {
  get {
    return
  }
}
var MIG_REPLY_MISMATCH: CInt {
  get {
    return
  }
}
var S_BLKSIZE: CInt {
  get {
    return
  }
}
var SYS_writev_nocancel: CInt {
  get {
    return
  }
}
var MIG_REMOTE_ERROR: CInt {
  get {
    return
  }
}
var SYS_setgroups: CInt {
  get {
    return
  }
}
var SYS_writev: CInt {
  get {
    return
  }
}
var MIG_NO_REPLY: CInt {
  get {
    return
  }
}
var SZOMB: CInt {
  get {
    return
  }
}
var SYS_write_nocancel: CInt {
  get {
    return
  }
}
var MIG_BAD_ID: CInt {
  get {
    return
  }
}
var MIG_EXCEPTION: CInt {
  get {
    return
  }
}
var SYS_write: CInt {
  get {
    return
  }
}
var MIG_BAD_ARGUMENTS: CInt {
  get {
    return
  }
}
var MIG_ARRAY_TOO_LARGE: CInt {
  get {
    return
  }
}
var SYS_workq_open: CInt {
  get {
    return
  }
}
var MFSTYPENAMELEN: CInt {
  get {
    return
  }
}
var SYS_workq_kernreturn: CInt {
  get {
    return
  }
}
var MFSNAMELEN: CInt {
  get {
    return
  }
}
var SYS_watchevent: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_TERMINATE_IDLE: CInt {
  get {
    return
  }
}
var S_IFDIR: CInt {
  get {
    return
  }
}
var SYS_waitid_nocancel: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_RETURN_NONE: CInt {
  get {
    return
  }
}
var SYS_waitid: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_RETURN_DIRTY: CInt {
  get {
    return
  }
}
var SYS_wait4_nocancel: CInt {
  get {
    return
  }
}
var SYS_waitevent: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_RETURN_ANYTHING: CInt {
  get {
    return
  }
}
var SYS_wait4: CInt {
  get {
    return
  }
}
var SYS_vm_pressure_monitor: CInt {
  get {
    return
  }
}
var SYS_vfs_purge: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_RETURN_ALL: CInt {
  get {
    return
  }
}
var SYS_vfork: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_RESPECT_CACHE: CInt {
  get {
    return
  }
}
var SYS_unmount: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_RELEASE_NO_OP: CInt {
  get {
    return
  }
}
var SYS_utimes: CInt {
  get {
    return
  }
}
var SYS_unlink: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_PERFORMANCE_INFO: CInt {
  get {
    return
  }
}
var SYS_unlinkat: CInt {
  get {
    return
  }
}
var SYS_umask: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_IO_SYNC: CInt {
  get {
    return
  }
}
var SYS_thread_selfusage: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_INFO_MAX: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_PURGE: CInt {
  get {
    return
  }
}
var SYS_truncate: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_SYNC: CInt {
  get {
    return
  }
}
var SYS_undelete: CInt {
  get {
    return
  }
}
var SYS_sysctlbyname: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_NO_CHANGE: CInt {
  get {
    return
  }
}
var SYS_system_override: CInt {
  get {
    return
  }
}
var SYS_syscall: CInt {
  get {
    return
  }
}
var SYS_umask_extended: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_FLUSH: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_SYNC: CInt {
  get {
    return
  }
}
var SYS_symlinkat: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_TEMPORARY: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_FLUSH_ALL: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_NONE: CInt {
  get {
    return
  }
}
var SYS_statfs64: CInt {
  get {
    return
  }
}
var SYS_sync: CInt {
  get {
    return
  }
}
var SYS_thread_selfid: CInt {
  get {
    return
  }
}
var SYS_swapon: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_SYMMETRIC: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_DELAY: CInt {
  get {
    return
  }
}
var SYS_stat_extended: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_INVALID: CInt {
  get {
    return
  }
}
var SYS_statfs: CInt {
  get {
    return
  }
}
var SYS_stat64: CInt {
  get {
    return
  }
}
var SYS_stat64_extended: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_CALL: CInt {
  get {
    return
  }
}
var SYS_stack_snapshot: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_BEHAVIOR_INFO: CInt {
  get {
    return
  }
}
var SYS_stat: CInt {
  get {
    return
  }
}
var SYS_symlink: CInt {
  get {
    return
  }
}
var SYS_socketpair: CInt {
  get {
    return
  }
}
var MEMBER_SET_SFLAGS_MASK_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var SYS_sigsuspend_nocancel: CInt {
  get {
    return
  }
}
var MEMORY_OBJECT_ATTRIBUTE_INFO: CInt {
  get {
    return
  }
}
var SYS_socket: CInt {
  get {
    return
  }
}
var MDMBUF: CInt {
  get {
    return
  }
}
var SYS_sigprocmask: CInt {
  get {
    return
  }
}
var MEMBER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var SYS_socket_delegate: CInt {
  get {
    return
  }
}
var MCS_ONLINE: CInt {
  get {
    return
  }
}
var SYS_sigaltstack: CInt {
  get {
    return
  }
}
var MCS_PURGING: CInt {
  get {
    return
  }
}
var LOG_LOCAL4: CInt {
  get {
    return
  }
}
var LOG_LOCAL3: CInt {
  get {
    return
  }
}
var SO_NOTIFYCONFLICT: CInt {
  get {
    return
  }
}
var SYS_sysctl: CInt {
  get {
    return
  }
}
var LOG_LOCAL2: CInt {
  get {
    return
  }
}
var SYS_sigpending: CInt {
  get {
    return
  }
}
var LOG_LOCAL6: CInt {
  get {
    return
  }
}
var SYS_sigreturn: CInt {
  get {
    return
  }
}
var SO_NOSIGPIPE: CInt {
  get {
    return
  }
}
var SO_NREAD: CInt {
  get {
    return
  }
}
var SYS_sigsuspend: CInt {
  get {
    return
  }
}
var LOG_LOCAL5: CInt {
  get {
    return
  }
}
var SO_NP_EXTENSIONS: CInt {
  get {
    return
  }
}
var SO_OOBINLINE: CInt {
  get {
    return
  }
}
var SO_NWRITE: CInt {
  get {
    return
  }
}
var LOG_LPR: CInt {
  get {
    return
  }
}
var LOG_LOCAL7: CInt {
  get {
    return
  }
}
var SO_NUMRCVPKT: CInt {
  get {
    return
  }
}
var SO_RANDOMPORT: CInt {
  get {
    return
  }
}
var SYS_telemetry: CInt {
  get {
    return
  }
}
var SO_PEERLABEL: CInt {
  get {
    return
  }
}
var LOG_MAIL: CInt {
  get {
    return
  }
}
var LOG_NETINFO: CInt {
  get {
    return
  }
}
var SO_RCVLOWAT: CInt {
  get {
    return
  }
}
var LOG_NDELAY: CInt {
  get {
    return
  }
}
var SO_RCVBUF: CInt {
  get {
    return
  }
}
var LOG_NFACILITIES: CInt {
  get {
    return
  }
}
var SO_REUSEADDR: CInt {
  get {
    return
  }
}
var LOG_NEWS: CInt {
  get {
    return
  }
}
var SO_RCVTIMEO: CInt {
  get {
    return
  }
}
var SO_SNDBUF: CInt {
  get {
    return
  }
}
var LOG_NOWAIT: CInt {
  get {
    return
  }
}
var SO_REUSESHAREUID: CInt {
  get {
    return
  }
}
var LOG_NOTICE: CInt {
  get {
    return
  }
}
var SO_REUSEPORT: CInt {
  get {
    return
  }
}
var LOG_PID: CInt {
  get {
    return
  }
}
var SO_SNDTIMEO: CInt {
  get {
    return
  }
}
var LOG_PERROR: CInt {
  get {
    return
  }
}
var SO_SNDLOWAT: CInt {
  get {
    return
  }
}
var LOG_ODELAY: CInt {
  get {
    return
  }
}
var LOG_AUTHPRIV: CInt {
  get {
    return
  }
}
var SOI_S_RCVATMARK: CInt {
  get {
    return
  }
}
var SOI_S_PRIV: CInt {
  get {
    return
  }
}
var LOG_AUTH: CInt {
  get {
    return
  }
}
var LOG_CRIT: CInt {
  get {
    return
  }
}
var SOL_SOCKET: CInt {
  get {
    return
  }
}
var SOL_LOCAL: CInt {
  get {
    return
  }
}
var LOG_CONS: CInt {
  get {
    return
  }
}
var LOG_DAEMON: CInt {
  get {
    return
  }
}
var SONPX_SETOPTSHUT: CInt {
  get {
    return
  }
}
var SOMAXCONN: CInt {
  get {
    return
  }
}
var LOG_CRON: CInt {
  get {
    return
  }
}
var LOG_ERR: CInt {
  get {
    return
  }
}
var SO_DEBUG: CInt {
  get {
    return
  }
}
var LOG_DEBUG: CInt {
  get {
    return
  }
}
var SO_ACCEPTCONN: CInt {
  get {
    return
  }
}
var LOG_EMERG: CInt {
  get {
    return
  }
}
var LOG_FACMASK: CInt {
  get {
    return
  }
}
var SO_BROADCAST: CInt {
  get {
    return
  }
}
var SO_DONTTRUNC: CInt {
  get {
    return
  }
}
var SO_DONTROUTE: CInt {
  get {
    return
  }
}
var SO_KEEPALIVE: CInt {
  get {
    return
  }
}
var LOG_INSTALL: CInt {
  get {
    return
  }
}
var SO_ERROR: CInt {
  get {
    return
  }
}
var LOG_FTP: CInt {
  get {
    return
  }
}
var LOG_INFO: CInt {
  get {
    return
  }
}
var SO_LINGER: CInt {
  get {
    return
  }
}
var SO_LINGER_SEC: CInt {
  get {
    return
  }
}
var LOG_LAUNCHD: CInt {
  get {
    return
  }
}
var SO_LABEL: CInt {
  get {
    return
  }
}
var LOG_KERN: CInt {
  get {
    return
  }
}
var LOG_LOCAL1: CInt {
  get {
    return
  }
}
var SO_NOADDRERR: CInt {
  get {
    return
  }
}
var LOG_LOCAL0: CInt {
  get {
    return
  }
}
var SO_NKE: CInt {
  get {
    return
  }
}
var LITTLE_ENDIAN: CInt {
  get {
    return
  }
}
var SOCK_DGRAM: CInt {
  get {
    return
  }
}
var SOCK_RAW: CInt {
  get {
    return
  }
}
var SOCK_MAXADDRLEN: CInt {
  get {
    return
  }
}
var LLONG_MAX: CLongLong {
  get {
    return
  }
}
var SOCK_RDM: CInt {
  get {
    return
  }
}
var SOCK_SEQPACKET: CInt {
  get {
    return
  }
}
var LOAD_SCALE: CInt {
  get {
    return
  }
}
var SOCK_STREAM: CInt {
  get {
    return
  }
}
var LOCAL_PEERCRED: CInt {
  get {
    return
  }
}
var LOCAL_PEEREPID: CInt {
  get {
    return
  }
}
var SOI_S_ASYNC: CInt {
  get {
    return
  }
}
var LOCAL_PEEREUUID: CInt {
  get {
    return
  }
}
var SOI_S_CANTRCVMORE: CInt {
  get {
    return
  }
}
var LOCAL_PEERPID: CInt {
  get {
    return
  }
}
var SOI_S_CANTSENDMORE: CInt {
  get {
    return
  }
}
var LOCAL_PEERUUID: CInt {
  get {
    return
  }
}
var SOI_S_COMP: CInt {
  get {
    return
  }
}
var LOCKGROUP_ATTR_STAT: CUnsignedLongLong {
  get {
    return
  }
}
var SOI_S_DRAINING: CInt {
  get {
    return
  }
}
var LOCKGROUP_MAX_NAME: CInt {
  get {
    return
  }
}
var SOI_S_INCOMP: CInt {
  get {
    return
  }
}
var LOCK_NB: CInt {
  get {
    return
  }
}
var LOCK_EX: CInt {
  get {
    return
  }
}
var SOI_S_ISCONNECTED: CInt {
  get {
    return
  }
}
var SOI_S_ISCONNECTING: CInt {
  get {
    return
  }
}
var LOCK_SH: CInt {
  get {
    return
  }
}
var SOI_S_ISDISCONNECTED: CInt {
  get {
    return
  }
}
var SOI_S_NBIO: CInt {
  get {
    return
  }
}
var LOCK_UN: CInt {
  get {
    return
  }
}
var LOG_ALERT: CInt {
  get {
    return
  }
}
var SOI_S_NOFDREF: CInt {
  get {
    return
  }
}
var SOI_S_ISDISCONNECTING: CInt {
  get {
    return
  }
}
var LOGIN_PROCESS: CInt {
  get {
    return
  }
}
var LIO_NOWAIT: CInt {
  get {
    return
  }
}
var LIO_READ: CInt {
  get {
    return
  }
}
var LIO_WAIT: CInt {
  get {
    return
  }
}
var LIO_WRITE: CInt {
  get {
    return
  }
}
var SMALL_PIPE_SIZE: CInt {
  get {
    return
  }
}
var SM_COW: CInt {
  get {
    return
  }
}
var SM_EMPTY: CInt {
  get {
    return
  }
}
var SM_LARGE_PAGE: CInt {
  get {
    return
  }
}
var SM_PRIVATE: CInt {
  get {
    return
  }
}
var SM_PRIVATE_ALIASED: CInt {
  get {
    return
  }
}
var SM_SHARED: CInt {
  get {
    return
  }
}
var SM_SHARED_ALIASED: CInt {
  get {
    return
  }
}
var SM_TRUESHARED: CInt {
  get {
    return
  }
}
var SUPERPAGE_SIZE_ANY: CInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_VOUCHER_MASK: CInt {
  get {
    return
  }
}
var SUPERPAGE_SIZE_2MB: CInt {
  get {
    return
  }
}
var SUPERPAGE_NONE: CInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_USER: CUnsignedInt {
  get {
    return
  }
}
var MACH_MSG_ALLOCATE: CInt {
  get {
    return
  }
}
var SV_INTERRUPT: CInt {
  get {
    return
  }
}
var SUPERUSER_SET_SFLAGS_MASK_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var MACH_MSGH_KIND_NOTIFICATION: CInt {
  get {
    return
  }
}
var MACH_MSGH_KIND_NORMAL: CInt {
  get {
    return
  }
}
var SUPERUSER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var MACH_MSGH_BITS_ZERO: CInt {
  get {
    return
  }
}
var SV_SIGINFO: CInt {
  get {
    return
  }
}
var MACH_MSG_IPC_SPACE: CInt {
  get {
    return
  }
}
var SV_RESETHAND: CInt {
  get {
    return
  }
}
var MACH_MSG_IPC_KERNEL: CInt {
  get {
    return
  }
}
var SV_ONSTACK: CInt {
  get {
    return
  }
}
var SV_NODEFER: CInt {
  get {
    return
  }
}
var SV_NOCLDSTOP: CInt {
  get {
    return
  }
}
var MACH_MSG_OOL_PORTS_DESCRIPTOR: CInt {
  get {
    return
  }
}
var SWITCH_OPTION_WAIT: CInt {
  get {
    return
  }
}
var MACH_MSG_OOL_DESCRIPTOR: CInt {
  get {
    return
  }
}
var SWITCH_OPTION_NONE: CInt {
  get {
    return
  }
}
var SWITCH_OPTION_DEPRESS: CInt {
  get {
    return
  }
}
var MACH_MSG_MASK: CInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_IMPHOLDASRT: CUnsignedInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_LOCAL_MASK: CInt {
  get {
    return
  }
}
var ST_NOSUID: CInt {
  get {
    return
  }
}
var ST_RDONLY: CInt {
  get {
    return
  }
}
var STDOUT_FILENO: CInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_RAISEIMP: CUnsignedInt {
  get {
    return
  }
}
var STDIN_FILENO: CInt {
  get {
    return
  }
}
var STDERR_FILENO: CInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_USED: CUnsignedInt {
  get {
    return
  }
}
var SUBCMDSHIFT: CInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_REMOTE_MASK: CInt {
  get {
    return
  }
}
var SUBCMDMASK: CInt {
  get {
    return
  }
}
var M16KCLSHIFT: CInt {
  get {
    return
  }
}
var SSLEEP: CInt {
  get {
    return
  }
}
var MACHINE_THREAD_STATE: CInt {
  get {
    return
  }
}
var SSTOP: CInt {
  get {
    return
  }
}
var SRUN: CInt {
  get {
    return
  }
}
var SRCHFS_VALIDOPTIONSMASK: CUnsignedInt {
  get {
    return
  }
}
var L_tmpnam: CInt {
  get {
    return
  }
}
var SSIZE_MAX: CLong {
  get {
    return
  }
}
var MACH_EXCEPTION_CODES: CUnsignedInt {
  get {
    return
  }
}
var SS_ONSTACK: CInt {
  get {
    return
  }
}
var SS_DISABLE: CInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_COMPLEX: CUnsignedInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_DENAP: CUnsignedInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_CIRCULAR: CUnsignedInt {
  get {
    return
  }
}
var MACH_MSGH_BITS_DENAPHOLDASRT: CUnsignedInt {
  get {
    return
  }
}
var LOG_RAS: CInt {
  get {
    return
  }
}
var SO_TYPE: CInt {
  get {
    return
  }
}
var LOG_REMOTEAUTH: CInt {
  get {
    return
  }
}
var SO_UPCALLCLOSEWAIT: CInt {
  get {
    return
  }
}
var LOG_SYSLOG: CInt {
  get {
    return
  }
}
var SO_TIMESTAMP: CInt {
  get {
    return
  }
}
var LOG_PRIMASK: CInt {
  get {
    return
  }
}
var SO_TIMESTAMP_MONOTONIC: CInt {
  get {
    return
  }
}
var LOG_UUCP: CInt {
  get {
    return
  }
}
var SRCHFS_MATCHDIRS: CInt {
  get {
    return
  }
}
var LOG_WARNING: CInt {
  get {
    return
  }
}
var SRCHFS_MATCHFILES: CInt {
  get {
    return
  }
}
var SO_USELOOPBACK: CInt {
  get {
    return
  }
}
var SO_WANTMORE: CInt {
  get {
    return
  }
}
var LOG_USER: CInt {
  get {
    return
  }
}
var SO_WANTOOBFLAG: CInt {
  get {
    return
  }
}
var SRCHFS_NEGATEPARAMS: CUnsignedInt {
  get {
    return
  }
}
var LONG_MAX: CLong {
  get {
    return
  }
}
var SRCHFS_SKIPINAPPROPRIATE: CInt {
  get {
    return
  }
}
var LONG_BIT: CInt {
  get {
    return
  }
}
var LONG_LONG_MAX: CLongLong {
  get {
    return
  }
}
var SRCHFS_MATCHPARTIALNAMES: CInt {
  get {
    return
  }
}
var SRCHFS_SKIPPACKAGES: CInt {
  get {
    return
  }
}
var L_XTND: CInt {
  get {
    return
  }
}
var SRCHFS_START: CInt {
  get {
    return
  }
}
var L_ctermid: CInt {
  get {
    return
  }
}
var LSCALE: CInt {
  get {
    return
  }
}
var SRCHFS_SKIPINVISIBLE: CInt {
  get {
    return
  }
}
var L_INCR: CInt {
  get {
    return
  }
}
var L_SET: CInt {
  get {
    return
  }
}
var SRCHFS_SKIPLINKS: CInt {
  get {
    return
  }
}
var SYS_aio_suspend: CInt {
  get {
    return
  }
}
var SYS_aio_return: CInt {
  get {
    return
  }
}
var MACH_PORT_DNREQUESTS_SIZE_COUNT: CInt {
  get {
    return
  }
}
var SYS_aio_write: CInt {
  get {
    return
  }
}
var SYS_aio_suspend_nocancel: CInt {
  get {
    return
  }
}
var MACH_PORT_IMPORTANCE_RECEIVER: CInt {
  get {
    return
  }
}
var SYS_aio_error: CInt {
  get {
    return
  }
}
var SYS_aio_cancel: CInt {
  get {
    return
  }
}
var MACH_PORTS_SLOTS_USED: CInt {
  get {
    return
  }
}
var SYS_adjtime: CInt {
  get {
    return
  }
}
var SYS_aio_read: CInt {
  get {
    return
  }
}
var MACH_PORT_DNREQUESTS_SIZE: CInt {
  get {
    return
  }
}
var MACH_PORT_DENAP_RECEIVER: CInt {
  get {
    return
  }
}
var SYS_aio_fsync: CInt {
  get {
    return
  }
}
var MACH_PORT_NULL: CInt {
  get {
    return
  }
}
var SYS_bind: CInt {
  get {
    return
  }
}
var SYS_auditon: CInt {
  get {
    return
  }
}
var SYS_bsdthread_ctl: CInt {
  get {
    return
  }
}
var SYS_auditctl: CInt {
  get {
    return
  }
}
var SYS_bsdthread_create: CInt {
  get {
    return
  }
}
var SYS_audit_session_join: CInt {
  get {
    return
  }
}
var MACH_PORT_INFO_EXT: CInt {
  get {
    return
  }
}
var SYS_audit: CInt {
  get {
    return
  }
}
var SYS_audit_session_self: CInt {
  get {
    return
  }
}
var MACH_PORT_LIMITS_INFO: CInt {
  get {
    return
  }
}
var SYS_audit_session_port: CInt {
  get {
    return
  }
}
var MACH_MSG_VIRTUAL_COPY: CInt {
  get {
    return
  }
}
var SYS___pthread_markcancel: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_SEND_ONCE: CInt {
  get {
    return
  }
}
var SYS___pthread_kill: CInt {
  get {
    return
  }
}
var MACH_MSG_VM_SPACE: CInt {
  get {
    return
  }
}
var SYS___semwait_signal: CInt {
  get {
    return
  }
}
var MACH_MSG_VM_KERNEL: CInt {
  get {
    return
  }
}
var SYS___pthread_sigmask: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_NONE: CInt {
  get {
    return
  }
}
var SYS___pthread_canceled: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_NAME: CInt {
  get {
    return
  }
}
var SYS___old_semwait_signal_nocancel: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_SEND: CInt {
  get {
    return
  }
}
var SYS___pthread_fchdir: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_RECEIVE: CInt {
  get {
    return
  }
}
var SYS___pthread_chdir: CInt {
  get {
    return
  }
}
var SYS_access: CInt {
  get {
    return
  }
}
var SYS_accept_nocancel: CInt {
  get {
    return
  }
}
var SYS_acct: CInt {
  get {
    return
  }
}
var SYS_access_extended: CInt {
  get {
    return
  }
}
var MACH_NOTIFY_FIRST: CInt {
  get {
    return
  }
}
var SYS___sigwait: CInt {
  get {
    return
  }
}
var SYS___semwait_signal_nocancel: CInt {
  get {
    return
  }
}
var SYS_accept: CInt {
  get {
    return
  }
}
var SYS___sigwait_nocancel: CInt {
  get {
    return
  }
}
var SYS___mac_get_mount: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_LAST: CInt {
  get {
    return
  }
}
var SYS___mac_get_pid: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_MAKE_SEND: CInt {
  get {
    return
  }
}
var SYS___mac_get_proc: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_MAKE_SEND_ONCE: CInt {
  get {
    return
  }
}
var SYS___mac_getfsstat: CInt {
  get {
    return
  }
}
var SYS___mac_get_file: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_DISPOSE_RECEIVE: CInt {
  get {
    return
  }
}
var SYS___mac_get_lcid: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_DISPOSE_SEND: CInt {
  get {
    return
  }
}
var SYS___mac_get_lctx: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_DISPOSE_SEND_ONCE: CInt {
  get {
    return
  }
}
var SYS___mac_get_link: CInt {
  get {
    return
  }
}
var SYS___mac_set_link: CInt {
  get {
    return
  }
}
var SYS___mac_set_proc: CInt {
  get {
    return
  }
}
var SYS___mac_syscall: CInt {
  get {
    return
  }
}
var SYS___old_semwait_signal: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_MOVE_RECEIVE: CInt {
  get {
    return
  }
}
var SYS___mac_mount: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_MOVE_SEND: CInt {
  get {
    return
  }
}
var SYS___mac_set_fd: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_MOVE_SEND_ONCE: CInt {
  get {
    return
  }
}
var SYS___mac_set_file: CInt {
  get {
    return
  }
}
var SYS___mac_set_lctx: CInt {
  get {
    return
  }
}
var MACH_MSG_PORT_DESCRIPTOR: CInt {
  get {
    return
  }
}
var SYNC_POLICY_ORDER_MASK: CInt {
  get {
    return
  }
}
var SYNC_POLICY_REVERSED: CInt {
  get {
    return
  }
}
var SYNC_VOLUME_FULLSYNC: CInt {
  get {
    return
  }
}
var SYNC_VOLUME_WAIT: CInt {
  get {
    return
  }
}
var MACH_MSG_OOL_VOLATILE_DESCRIPTOR: CInt {
  get {
    return
  }
}
var SYNC_POLICY_FIFO: CInt {
  get {
    return
  }
}
var MACH_MSG_OPTION_NONE: CInt {
  get {
    return
  }
}
var SYNC_POLICY_FIXED_PRIORITY: CInt {
  get {
    return
  }
}
var MACH_MSG_OVERWRITE: CInt {
  get {
    return
  }
}
var MACH_MSG_PHYSICAL_COPY: CInt {
  get {
    return
  }
}
var SYNC_POLICY_MAX: CInt {
  get {
    return
  }
}
var SYS_MAXSYSCALL: CInt {
  get {
    return
  }
}
var SYS___disable_threadsignal: CInt {
  get {
    return
  }
}
var SYS___mac_execve: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_COPY_RECEIVE: CInt {
  get {
    return
  }
}
var SYS___mac_get_fd: CInt {
  get {
    return
  }
}
var MACH_MSG_TYPE_COPY_SEND: CInt {
  get {
    return
  }
}
var MACH_MSG_SUCCESS: CInt {
  get {
    return
  }
}
var SYSPROTO_CONTROL: CInt {
  get {
    return
  }
}
var SYSPROTO_EVENT: CInt {
  get {
    return
  }
}
var MACH_MSG_TRAILER_FORMAT_0: CInt {
  get {
    return
  }
}
var SYSTEM_CLOCK: CInt {
  get {
    return
  }
}
var MACH_RCV_IN_SET: CInt {
  get {
    return
  }
}
var MACH_RCV_IN_PROGRESS_TIMED: CInt {
  get {
    return
  }
}
var SYS_fstatfs: CInt {
  get {
    return
  }
}
var SYS_fstatat64: CInt {
  get {
    return
  }
}
var SYS_fstatat: CInt {
  get {
    return
  }
}
var MACH_RCV_IN_PROGRESS: CInt {
  get {
    return
  }
}
var MACH_RCV_INVALID_TYPE: CInt {
  get {
    return
  }
}
var SYS_fstat_extended: CInt {
  get {
    return
  }
}
var MACH_RCV_INVALID_TRAILER: CInt {
  get {
    return
  }
}
var SYS_fstat64_extended: CInt {
  get {
    return
  }
}
var MACH_RCV_INVALID_NOTIFY: CInt {
  get {
    return
  }
}
var SYS_fstat64: CInt {
  get {
    return
  }
}
var MACH_RCV_INVALID_NAME: CInt {
  get {
    return
  }
}
var SYS_fsgetpath: CInt {
  get {
    return
  }
}
var SYS_fstat: CInt {
  get {
    return
  }
}
var MACH_RCV_INVALID_DATA: CInt {
  get {
    return
  }
}
var SYS_fsetxattr: CInt {
  get {
    return
  }
}
var SYS_getaudit_addr: CInt {
  get {
    return
  }
}
var MACH_RCV_SCATTER_SMALL: CInt {
  get {
    return
  }
}
var SYS_getattrlistbulk: CInt {
  get {
    return
  }
}
var MACH_RCV_PORT_DIED: CInt {
  get {
    return
  }
}
var SYS_getattrlistat: CInt {
  get {
    return
  }
}
var MACH_RCV_PORT_CHANGED: CInt {
  get {
    return
  }
}
var SYS_getattrlist: CInt {
  get {
    return
  }
}
var MACH_RCV_OVERWRITE: CInt {
  get {
    return
  }
}
var SYS_futimes: CInt {
  get {
    return
  }
}
var MACH_RCV_NOTIFY: CInt {
  get {
    return
  }
}
var SYS_ftruncate: CInt {
  get {
    return
  }
}
var MACH_RCV_MSG: CInt {
  get {
    return
  }
}
var SYS_fsync_nocancel: CInt {
  get {
    return
  }
}
var MACH_RCV_LARGE_IDENTITY: CInt {
  get {
    return
  }
}
var SYS_fsync: CInt {
  get {
    return
  }
}
var MACH_RCV_LARGE: CInt {
  get {
    return
  }
}
var SYS_fstatfs64: CInt {
  get {
    return
  }
}
var SYS_fileport_makefd: CInt {
  get {
    return
  }
}
var SYS_fgetxattr: CInt {
  get {
    return
  }
}
var SYS_fhopen: CInt {
  get {
    return
  }
}
var SYS_fgetattrlist: CInt {
  get {
    return
  }
}
var SYS_ffsctl: CInt {
  get {
    return
  }
}
var SYS_fdatasync: CInt {
  get {
    return
  }
}
var SYS_fcntl_nocancel: CInt {
  get {
    return
  }
}
var SYS_fcntl: CInt {
  get {
    return
  }
}
var SYS_fchownat: CInt {
  get {
    return
  }
}
var SYS_fsetattrlist: CInt {
  get {
    return
  }
}
var MACH_RCV_INTERRUPTED: CInt {
  get {
    return
  }
}
var SYS_fsctl: CInt {
  get {
    return
  }
}
var MACH_RCV_INTERRUPT: CInt {
  get {
    return
  }
}
var SYS_fremovexattr: CInt {
  get {
    return
  }
}
var MACH_RCV_HEADER_ERROR: CInt {
  get {
    return
  }
}
var SYS_fpathconf: CInt {
  get {
    return
  }
}
var MACH_RCV_BODY_ERROR: CInt {
  get {
    return
  }
}
var SYS_fork: CInt {
  get {
    return
  }
}
var MACH_PORT_TYPE_SPREQUEST_DELAYED: CInt {
  get {
    return
  }
}
var SYS_flock: CInt {
  get {
    return
  }
}
var SYS_flistxattr: CInt {
  get {
    return
  }
}
var MACH_PORT_TYPE_SPREQUEST: CInt {
  get {
    return
  }
}
var SYS_fileport_makeport: CInt {
  get {
    return
  }
}
var SYS_dup2: CInt {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_STRICT_GUARD: CInt {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_TASKPTR: CInt {
  get {
    return
  }
}
var SYS_exchangedata: CInt {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_IMP_DONATION: CInt {
  get {
    return
  }
}
var SYS_delete: CInt {
  get {
    return
  }
}
var SYS_dup: CInt {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_REVIVE: CInt {
  get {
    return
  }
}
var SYS_disconnectx: CInt {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_GUARDED: CInt {
  get {
    return
  }
}
var SYS_csops_audittoken: CInt {
  get {
    return
  }
}
var SYS_csrctl: CInt {
  get {
    return
  }
}
var MACH_PORT_SRIGHTS_NONE: CInt {
  get {
    return
  }
}
var SYS_copyfile: CInt {
  get {
    return
  }
}
var MACH_PORT_SRIGHTS_PRESENT: CInt {
  get {
    return
  }
}
var SYS_csops: CInt {
  get {
    return
  }
}
var SYS_fchmodat: CInt {
  get {
    return
  }
}
var SYS_fchown: CInt {
  get {
    return
  }
}
var SYS_fchmod: CInt {
  get {
    return
  }
}
var SYS_fchflags: CInt {
  get {
    return
  }
}
var MACH_PORT_TYPE_DNREQUEST: CUnsignedInt {
  get {
    return
  }
}
var SYS_fchmod_extended: CInt {
  get {
    return
  }
}
var SYS_faccessat: CInt {
  get {
    return
  }
}
var SYS_fchdir: CInt {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_TEMPOWNER: CInt {
  get {
    return
  }
}
var SYS_execve: CInt {
  get {
    return
  }
}
var MACH_PORT_TEMPOWNER: CInt {
  get {
    return
  }
}
var SYS_exit: CInt {
  get {
    return
  }
}
var SYS_chmod_extended: CInt {
  get {
    return
  }
}
var MACH_PORT_RECEIVE_STATUS: CInt {
  get {
    return
  }
}
var SYS_chown: CInt {
  get {
    return
  }
}
var SYS_chflags: CInt {
  get {
    return
  }
}
var SYS_chmod: CInt {
  get {
    return
  }
}
var SYS_change_fdguard_np: CInt {
  get {
    return
  }
}
var SYS_chdir: CInt {
  get {
    return
  }
}
var SYS_bsdthread_register: CInt {
  get {
    return
  }
}
var SYS_bsdthread_terminate: CInt {
  get {
    return
  }
}
var SYS_connect_nocancel: CInt {
  get {
    return
  }
}
var SYS_coalition_info: CInt {
  get {
    return
  }
}
var SYS_connectx: CInt {
  get {
    return
  }
}
var SYS_connect: CInt {
  get {
    return
  }
}
var SYS_close: CInt {
  get {
    return
  }
}
var SYS_close_nocancel: CInt {
  get {
    return
  }
}
var SYS_coalition: CInt {
  get {
    return
  }
}
var SYS_chroot: CInt {
  get {
    return
  }
}
var SYS_chud: CInt {
  get {
    return
  }
}
var KERN_NTP_PLL: CInt {
  get {
    return
  }
}
var HOST_VM_PURGABLE: CInt {
  get {
    return
  }
}
var KERN_OPENEVT_PROC: CInt {
  get {
    return
  }
}
var KERN_NO_SPACE: CInt {
  get {
    return
  }
}
var KERN_NX_PROTECTION: CInt {
  get {
    return
  }
}
var KERN_OSRELDATE: CInt {
  get {
    return
  }
}
var HUGE: CFloat {
  get {
    return
  }
}
var KERN_OPERATION_TIMED_OUT: CInt {
  get {
    return
  }
}
var KERN_OSREV: CInt {
  get {
    return
  }
}
var KERN_OSRELEASE: CInt {
  get {
    return
  }
}
var KERN_NISDOMAINNAME: CInt {
  get {
    return
  }
}
var KERN_NODE_DOWN: CInt {
  get {
    return
  }
}
var KERN_NGROUPS: CInt {
  get {
    return
  }
}
var KERN_NOT_IN_SET: CInt {
  get {
    return
  }
}
var KERN_NOT_DEPRESSED: CInt {
  get {
    return
  }
}
var KERN_NOT_SUPPORTED: CInt {
  get {
    return
  }
}
var KERN_NOT_RECEIVER: CInt {
  get {
    return
  }
}
var KERN_NO_ACCESS: CInt {
  get {
    return
  }
}
var KERN_NOT_WAITING: CInt {
  get {
    return
  }
}
var HW_L1DCACHESIZE: CInt {
  get {
    return
  }
}
var KERN_PROCNAME: CInt {
  get {
    return
  }
}
var HW_FLOATINGPT: CInt {
  get {
    return
  }
}
var KERN_PROCDELAYTERM: CInt {
  get {
    return
  }
}
var HW_EPOCH: CInt {
  get {
    return
  }
}
var KERN_PROC_PGRP: CInt {
  get {
    return
  }
}
var HW_L2CACHESIZE: CInt {
  get {
    return
  }
}
var KERN_PROC_LCID: CInt {
  get {
    return
  }
}
var HW_L1ICACHESIZE: CInt {
  get {
    return
  }
}
var KERN_PROC_ALL: CInt {
  get {
    return
  }
}
var KERN_PROC_RUID: CInt {
  get {
    return
  }
}
var HW_L3CACHESIZE: CInt {
  get {
    return
  }
}
var KERN_PROC_PID: CInt {
  get {
    return
  }
}
var HW_L2SETTINGS: CInt {
  get {
    return
  }
}
var HW_MACHINE_ARCH: CInt {
  get {
    return
  }
}
var KERN_PROC_TTY: CInt {
  get {
    return
  }
}
var HW_MACHINE: CInt {
  get {
    return
  }
}
var KERN_PROC_SESSION: CInt {
  get {
    return
  }
}
var HW_L3SETTINGS: CInt {
  get {
    return
  }
}
var HW_AVAILCPU: CInt {
  get {
    return
  }
}
var HUPCL: CInt {
  get {
    return
  }
}
var KERN_POLICY_LIMIT: CInt {
  get {
    return
  }
}
var KERN_OSVERSION: CInt {
  get {
    return
  }
}
var KERN_OSTYPE: CInt {
  get {
    return
  }
}
var HW_BYTEORDER: CInt {
  get {
    return
  }
}
var KERN_POSIX: CInt {
  get {
    return
  }
}
var HW_BUS_FREQ: CInt {
  get {
    return
  }
}
var KERN_POLICY_STATIC: CInt {
  get {
    return
  }
}
var KERN_PROC: CInt {
  get {
    return
  }
}
var HW_CPU_FREQ: CInt {
  get {
    return
  }
}
var HW_CACHELINE: CInt {
  get {
    return
  }
}
var KERN_POSIX1: CInt {
  get {
    return
  }
}
var HW_DISKSTATS: CInt {
  get {
    return
  }
}
var KERN_PROCARGS2: CInt {
  get {
    return
  }
}
var HW_DISKNAMES: CInt {
  get {
    return
  }
}
var KERN_KDWRITETR: CInt {
  get {
    return
  }
}
var HOST_NOTIFY_TYPE_MAX: CInt {
  get {
    return
  }
}
var KERN_LCTX: CInt {
  get {
    return
  }
}
var HOST_NOT_FOUND: CInt {
  get {
    return
  }
}
var KERN_LCTX_ALL: CInt {
  get {
    return
  }
}
var KERN_LCTX_LCID: CInt {
  get {
    return
  }
}
var HOST_PORT: CInt {
  get {
    return
  }
}
var KERN_LOCK_OWNED: CInt {
  get {
    return
  }
}
var HOST_PRIORITY_INFO: CInt {
  get {
    return
  }
}
var KERN_LOCK_OWNED_SELF: CInt {
  get {
    return
  }
}
var KERN_PROCARGS: CInt {
  get {
    return
  }
}
var KERN_LOCK_SET_DESTROYED: CInt {
  get {
    return
  }
}
var KERN_LOCK_UNSTABLE: CInt {
  get {
    return
  }
}
var HOST_PRIV_PORT: CInt {
  get {
    return
  }
}
var KERN_LOGSIGEXIT: CInt {
  get {
    return
  }
}
var KERN_KDREADTR: CInt {
  get {
    return
  }
}
var HOST_LOAD_INFO: CInt {
  get {
    return
  }
}
var KERN_KDREMOVE: CInt {
  get {
    return
  }
}
var KERN_KDSETBUF: CInt {
  get {
    return
  }
}
var HOST_LOCAL_NODE: CInt {
  get {
    return
  }
}
var KERN_KDSETREG: CInt {
  get {
    return
  }
}
var KERN_KDSETRTCDEC: CInt {
  get {
    return
  }
}
var HOST_MACH_MSG_TRAP: CInt {
  get {
    return
  }
}
var KERN_KDSETUP: CInt {
  get {
    return
  }
}
var HOST_MAX_SPECIAL_KERNEL_PORT: CInt {
  get {
    return
  }
}
var KERN_KDSET_TYPEFILTER: CInt {
  get {
    return
  }
}
var KERN_KDTHRMAP: CInt {
  get {
    return
  }
}
var KERN_KDWRITEMAP: CInt {
  get {
    return
  }
}
var HOST_NOTIFY_CALENDAR_CHANGE: CInt {
  get {
    return
  }
}
var KERN_MAXVNODES: CInt {
  get {
    return
  }
}
var HOST_SECURITY_PORT: CInt {
  get {
    return
  }
}
var KERN_MEMORY_DATA_MOVED: CInt {
  get {
    return
  }
}
var HOST_SEMAPHORE_TRAPS: CInt {
  get {
    return
  }
}
var KERN_MEMORY_ERROR: CInt {
  get {
    return
  }
}
var KERN_MEMORY_FAILURE: CInt {
  get {
    return
  }
}
var KERN_MEMORY_PRESENT: CInt {
  get {
    return
  }
}
var KERN_MEMORY_RESTART_COPY: CInt {
  get {
    return
  }
}
var HOST_VM_INFO: CInt {
  get {
    return
  }
}
var KERN_NAME_EXISTS: CInt {
  get {
    return
  }
}
var HOST_VM_INFO64: CInt {
  get {
    return
  }
}
var KERN_LOW_PRI_DELAY: CInt {
  get {
    return
  }
}
var KERN_NETBOOT: CInt {
  get {
    return
  }
}
var HOST_REBOOT_DEBUGGER: CInt {
  get {
    return
  }
}
var KERN_LOW_PRI_WINDOW: CInt {
  get {
    return
  }
}
var HOST_REBOOT_HALT: CInt {
  get {
    return
  }
}
var KERN_MAXFILES: CInt {
  get {
    return
  }
}
var HOST_REBOOT_UPSDELAY: CInt {
  get {
    return
  }
}
var KERN_MAXFILESPERPROC: CInt {
  get {
    return
  }
}
var HOST_RESOURCE_SIZES: CInt {
  get {
    return
  }
}
var KERN_MAXID: CInt {
  get {
    return
  }
}
var HOST_SCHED_INFO: CInt {
  get {
    return
  }
}
var KERN_MAXPARTITIONS: CInt {
  get {
    return
  }
}
var KERN_MAXPROC: CInt {
  get {
    return
  }
}
var KERN_MAXPROCPERUID: CInt {
  get {
    return
  }
}
var KEV_DL_AWDL_RESTRICTED: CInt {
  get {
    return
  }
}
var IFF_LINK2: CInt {
  get {
    return
  }
}
var KEV_DL_ADDMULTI: CInt {
  get {
    return
  }
}
var IFF_LINK1: CInt {
  get {
    return
  }
}
var IFF_LINK0: CInt {
  get {
    return
  }
}
var KEV_CTL_SUBCLASS: CInt {
  get {
    return
  }
}
var IFF_BROADCAST: CInt {
  get {
    return
  }
}
var IFF_DEBUG: CInt {
  get {
    return
  }
}
var KEV_CTL_REGISTERED: CInt {
  get {
    return
  }
}
var IFF_NOTRAILERS: CInt {
  get {
    return
  }
}
var IFF_OACTIVE: CInt {
  get {
    return
  }
}
var KEV_DL_IFDELEGATE_CHANGED: CInt {
  get {
    return
  }
}
var IFF_NOARP: CInt {
  get {
    return
  }
}
var KEV_DL_IFCAP_CHANGED: CInt {
  get {
    return
  }
}
var IFF_MULTICAST: CInt {
  get {
    return
  }
}
var KEV_DL_DELMULTI: CInt {
  get {
    return
  }
}
var IFF_LOOPBACK: CInt {
  get {
    return
  }
}
var KEV_DL_AWDL_UNRESTRICTED: CInt {
  get {
    return
  }
}
var KERN_USRSTACK: CInt {
  get {
    return
  }
}
var IFCAP_TXSTATUS: CInt {
  get {
    return
  }
}
var KERN_UREFS_OVERFLOW: CInt {
  get {
    return
  }
}
var KERN_UPDATEINTERVAL: CInt {
  get {
    return
  }
}
var IFCAP_TXCSUM: CInt {
  get {
    return
  }
}
var IFCAP_TSO4: CInt {
  get {
    return
  }
}
var KERN_UNRAGE_THREAD: CInt {
  get {
    return
  }
}
var IFCAP_TSO6: CInt {
  get {
    return
  }
}
var IFF_ALTPHYS: CInt {
  get {
    return
  }
}
var KEV_CTL_DEREGISTERED: CInt {
  get {
    return
  }
}
var KERN_VERSION: CInt {
  get {
    return
  }
}
var IFF_ALLMULTI: CInt {
  get {
    return
  }
}
var KERN_VNODE: CInt {
  get {
    return
  }
}
var KERN_USRSTACK64: CInt {
  get {
    return
  }
}
var IFCAP_VLAN_MTU: CInt {
  get {
    return
  }
}
var KERN_USRSTACK32: CInt {
  get {
    return
  }
}
var IFCAP_VLAN_HWTAGGING: CInt {
  get {
    return
  }
}
var IFM_100_TX: CInt {
  get {
    return
  }
}
var KEV_DL_NODE_ABSENCE: CInt {
  get {
    return
  }
}
var IFM_100_T4: CInt {
  get {
    return
  }
}
var KEV_DL_MASTER_ELECTED: CInt {
  get {
    return
  }
}
var IFM_100_T2: CInt {
  get {
    return
  }
}
var KEV_DL_LINK_QUALITY_METRIC_CHANGED: CInt {
  get {
    return
  }
}
var IFM_100_FX: CInt {
  get {
    return
  }
}
var KEV_DL_SIFGENERIC: CInt {
  get {
    return
  }
}
var IFM_10G_T: CInt {
  get {
    return
  }
}
var KEV_DL_SIFFLAGS: CInt {
  get {
    return
  }
}
var IFM_10G_SR: CInt {
  get {
    return
  }
}
var KEV_DL_PROTO_DETACHED: CInt {
  get {
    return
  }
}
var IFM_10G_LR: CInt {
  get {
    return
  }
}
var KEV_DL_PROTO_ATTACHED: CInt {
  get {
    return
  }
}
var IFM_10G_CX4: CInt {
  get {
    return
  }
}
var IFM_100_VG: CInt {
  get {
    return
  }
}
var KEV_DL_NODE_PRESENCE: CInt {
  get {
    return
  }
}
var IFF_SIMPLEX: CInt {
  get {
    return
  }
}
var IFF_RUNNING: CInt {
  get {
    return
  }
}
var KEV_DL_IF_DETACHING: CInt {
  get {
    return
  }
}
var IFF_PROMISC: CInt {
  get {
    return
  }
}
var KEV_DL_IF_DETACHED: CInt {
  get {
    return
  }
}
var IFF_POINTOPOINT: CInt {
  get {
    return
  }
}
var KEV_DL_IF_ATTACHED: CInt {
  get {
    return
  }
}
var IFM_1000_T: CInt {
  get {
    return
  }
}
var KEV_DL_LINK_ON: CInt {
  get {
    return
  }
}
var IFM_1000_SX: CInt {
  get {
    return
  }
}
var KEV_DL_LINK_ADDRESS_CHANGED: CInt {
  get {
    return
  }
}
var KEV_DL_LINK_OFF: CInt {
  get {
    return
  }
}
var IFM_1000_LX: CInt {
  get {
    return
  }
}
var IFM_1000_CX: CInt {
  get {
    return
  }
}
var KEV_DL_ISSUES: CInt {
  get {
    return
  }
}
var IFF_UP: CInt {
  get {
    return
  }
}
var KEV_DL_IF_IDLE_ROUTE_REFCNT: CInt {
  get {
    return
  }
}
var KERN_RPC_SERVER_TERMINATED: CInt {
  get {
    return
  }
}
var KERN_RIGHT_EXISTS: CInt {
  get {
    return
  }
}
var KERN_RPC_CONTINUE_ORPHAN: CInt {
  get {
    return
  }
}
var I386_THREAD_STATE_MAX: CInt {
  get {
    return
  }
}
var KERN_SECURELVL: CInt {
  get {
    return
  }
}
var KERN_SEMAPHORE_DESTROYED: CInt {
  get {
    return
  }
}
var ICANON: CInt {
  get {
    return
  }
}
var I386_LPGSHIFT: CInt {
  get {
    return
  }
}
var KERN_RPC_TERMINATE_ORPHAN: CInt {
  get {
    return
  }
}
var KERN_SAFEBOOT: CInt {
  get {
    return
  }
}
var I386_PGBYTES: CInt {
  get {
    return
  }
}
var I386_PGSHIFT: CInt {
  get {
    return
  }
}
var KERN_SAVED_IDS: CInt {
  get {
    return
  }
}
var KERN_PROTECTION_FAILURE: CInt {
  get {
    return
  }
}
var HW_MODEL: CInt {
  get {
    return
  }
}
var KERN_PS_STRINGS: CInt {
  get {
    return
  }
}
var HW_NCPU: CInt {
  get {
    return
  }
}
var KERN_RAGEVNODE: CInt {
  get {
    return
  }
}
var KERN_PROC_UID: CInt {
  get {
    return
  }
}
var HW_MAXID: CInt {
  get {
    return
  }
}
var KERN_PROF: CInt {
  get {
    return
  }
}
var HW_MEMSIZE: CInt {
  get {
    return
  }
}
var HW_USERMEM: CInt {
  get {
    return
  }
}
var KERN_RESOURCE_SHORTAGE: CInt {
  get {
    return
  }
}
var HW_VECTORUNIT: CInt {
  get {
    return
  }
}
var KERN_RETURN_MAX: CInt {
  get {
    return
  }
}
var HW_PAGESIZE: CInt {
  get {
    return
  }
}
var KERN_RAGE_PROC: CInt {
  get {
    return
  }
}
var HW_PHYSMEM: CInt {
  get {
    return
  }
}
var HW_TB_FREQ: CInt {
  get {
    return
  }
}
var IFCAP_AV: CInt {
  get {
    return
  }
}
var KERN_THALTSTACK: CInt {
  get {
    return
  }
}
var KERN_RAGE_THREAD: CInt {
  get {
    return
  }
}
var KERN_TFP_POLICY_DENY: CInt {
  get {
    return
  }
}
var KERN_THREADNAME: CInt {
  get {
    return
  }
}
var ICONV_TRIVIALP: CInt {
  get {
    return
  }
}
var KERN_TFP_POLICY: CInt {
  get {
    return
  }
}
var IEXTEN: CInt {
  get {
    return
  }
}
var ICRNL: CInt {
  get {
    return
  }
}
var KERN_TFP_POLICY_DEFAULT: CInt {
  get {
    return
  }
}
var KERN_UNOPENEVT_PROC: CInt {
  get {
    return
  }
}
var IFCAP_RXCSUM: CInt {
  get {
    return
  }
}
var KERN_UNRAGE_PROC: CInt {
  get {
    return
  }
}
var IFCAP_JUMBO_MTU: CInt {
  get {
    return
  }
}
var KERN_TRANSLATE: CInt {
  get {
    return
  }
}
var KERN_TTY: CInt {
  get {
    return
  }
}
var IFCAP_LRO: CInt {
  get {
    return
  }
}
var ICONV_GET_DISCARD_ILSEQ: CInt {
  get {
    return
  }
}
var KERN_SUCCESS: CInt {
  get {
    return
  }
}
var ICONV_GET_TRANSLITERATE: CInt {
  get {
    return
  }
}
var KERN_SUGID_COREDUMP: CInt {
  get {
    return
  }
}
var ICMP6_FILTER: CInt {
  get {
    return
  }
}
var KERN_SHREG_PRIVATIZABLE: CInt {
  get {
    return
  }
}
var ICMPV6CTL_ND6_ONLINKNSRFC4861: CInt {
  get {
    return
  }
}
var KERN_SPECULATIVE_READS: CInt {
  get {
    return
  }
}
var ICONV_SET_HOOKS: CInt {
  get {
    return
  }
}
var KERN_TERMINATED: CInt {
  get {
    return
  }
}
var ICONV_SET_TRANSLITERATE: CInt {
  get {
    return
  }
}
var KERN_TFP: CInt {
  get {
    return
  }
}
var ICONV_SET_DISCARD_ILSEQ: CInt {
  get {
    return
  }
}
var KERN_SYMFILE: CInt {
  get {
    return
  }
}
var ICONV_SET_FALLBACKS: CInt {
  get {
    return
  }
}
var KERN_SYSV: CInt {
  get {
    return
  }
}
var SIGWINCH: CInt {
  get {
    return
  }
}
var SIGXCPU: CInt {
  get {
    return
  }
}
var SIGVTALRM: CInt {
  get {
    return
  }
}
var SIG_ATOMIC_MAX: CInt {
  get {
    return
  }
}
var SIGXFSZ: CInt {
  get {
    return
  }
}
var SIGTTOU: CInt {
  get {
    return
  }
}
var SIGURG: CInt {
  get {
    return
  }
}
var SIGTTIN: CInt {
  get {
    return
  }
}
var SIGUSR2: CInt {
  get {
    return
  }
}
var SIGUSR1: CInt {
  get {
    return
  }
}
var IFM_NONE: CInt {
  get {
    return
  }
}
var IFM_OMASK: CInt {
  get {
    return
  }
}
var IFM_LOOP: CInt {
  get {
    return
  }
}
var IFM_NMASK: CInt {
  get {
    return
  }
}
var IFM_MANUAL: CInt {
  get {
    return
  }
}
var SIG_SETMASK: CInt {
  get {
    return
  }
}
var SING: CInt {
  get {
    return
  }
}
var SIG_UNBLOCK: CInt {
  get {
    return
  }
}
var SIG_BLOCK: CInt {
  get {
    return
  }
}
var IFM_FDDI_UTP: CInt {
  get {
    return
  }
}
var IFM_FDX: CInt {
  get {
    return
  }
}
var IFM_FLAG0: CInt {
  get {
    return
  }
}
var IFM_FLAG1: CInt {
  get {
    return
  }
}
var IFM_FLAG2: CInt {
  get {
    return
  }
}
var IFM_ETHER: CInt {
  get {
    return
  }
}
var IFM_FDDI: CInt {
  get {
    return
  }
}
var IFM_FDDI_DA: CInt {
  get {
    return
  }
}
var IFM_FDDI_MMF: CInt {
  get {
    return
  }
}
var IFM_FDDI_SMF: CInt {
  get {
    return
  }
}
var KEV_DL_SUBCLASS: CInt {
  get {
    return
  }
}
var IFM_ACTIVE: CInt {
  get {
    return
  }
}
var IFM_AUTO: CInt {
  get {
    return
  }
}
var KEV_DL_WAKEFLAGS_CHANGED: CInt {
  get {
    return
  }
}
var IFM_AVALID: CInt {
  get {
    return
  }
}
var IFM_EEE: CInt {
  get {
    return
  }
}
var IFM_10_2: CInt {
  get {
    return
  }
}
var KEV_DL_SIFMEDIA: CInt {
  get {
    return
  }
}
var IFM_10_5: CInt {
  get {
    return
  }
}
var KEV_DL_SIFMETRICS: CInt {
  get {
    return
  }
}
var IFM_10_FL: CInt {
  get {
    return
  }
}
var KEV_DL_SIFMTU: CInt {
  get {
    return
  }
}
var IFM_10_STP: CInt {
  get {
    return
  }
}
var KEV_DL_SIFPHYS: CInt {
  get {
    return
  }
}
var IFM_10_T: CInt {
  get {
    return
  }
}
var IFM_IEEE80211_FH2: CInt {
  get {
    return
  }
}
var IFM_IMASK: CUnsignedInt {
  get {
    return
  }
}
var IFM_ISHIFT: CInt {
  get {
    return
  }
}
var IFM_IEEE80211_DS2: CInt {
  get {
    return
  }
}
var IFM_IEEE80211_DS22: CInt {
  get {
    return
  }
}
var IFM_IEEE80211_DS5: CInt {
  get {
    return
  }
}
var IFM_IEEE80211_FH1: CInt {
  get {
    return
  }
}
var IFM_IEEE80211: CInt {
  get {
    return
  }
}
var IFM_IEEE80211_ADHOC: CInt {
  get {
    return
  }
}
var IFM_IEEE80211_DS1: CInt {
  get {
    return
  }
}
var IFM_IEEE80211_DS11: CInt {
  get {
    return
  }
}
var IFM_FLOW: CInt {
  get {
    return
  }
}
var IFM_GMASK: CInt {
  get {
    return
  }
}
var IFM_HDX: CInt {
  get {
    return
  }
}
var IFM_HPNA_1: CInt {
  get {
    return
  }
}
var LC_MONETARY: CInt {
  get {
    return
  }
}
var LC_MESSAGES: CInt {
  get {
    return
  }
}
var LC_CTYPE: CInt {
  get {
    return
  }
}
var LC_ALL: CInt {
  get {
    return
  }
}
var LC_COLLATE: CInt {
  get {
    return
  }
}
var LCID_REMOVE: CInt {
  get {
    return
  }
}
var LCID_PROC_SELF: CInt {
  get {
    return
  }
}
var LCID_CREATE: CInt {
  get {
    return
  }
}
var KMOD_RETURN_SUCCESS: CInt {
  get {
    return
  }
}
var KMOD_RETURN_FAILURE: CInt {
  get {
    return
  }
}
var KMOD_MAX_NAME: CInt {
  get {
    return
  }
}
var KMOD_INFO_VERSION: CInt {
  get {
    return
  }
}
var LIO_NOP: CInt {
  get {
    return
  }
}
var LINK_MAX: CInt {
  get {
    return
  }
}
var LINE_MAX: CInt {
  get {
    return
  }
}
var SLIPDISC: CInt {
  get {
    return
  }
}
var LDBL_MIN_EXP: CInt {
  get {
    return
  }
}
var SI_USER: CInt {
  get {
    return
  }
}
var LDBL_MIN_10_EXP: CInt {
  get {
    return
  }
}
var SI_TIMER: CInt {
  get {
    return
  }
}
var SI_QUEUE: CInt {
  get {
    return
  }
}
var LDBL_MAX_EXP: CInt {
  get {
    return
  }
}
var LDBL_MAX_10_EXP: CInt {
  get {
    return
  }
}
var SI_MESGQ: CInt {
  get {
    return
  }
}
var SI_ASYNCIO: CInt {
  get {
    return
  }
}
var SIZE_T_MAX: CUnsignedLong {
  get {
    return
  }
}
var LDBL_MANT_DIG: CInt {
  get {
    return
  }
}
var SIZE_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var LDBL_DIG: CInt {
  get {
    return
  }
}
var LC_TIME: CInt {
  get {
    return
  }
}
var LC_NUMERIC: CInt {
  get {
    return
  }
}
var KIPC_SOMAXCONN: CInt {
  get {
    return
  }
}
var KIPC_SOCKBUF_WASTE: CInt {
  get {
    return
  }
}
var KIPC_SOQLIMITCOMPAT: CInt {
  get {
    return
  }
}
var KIPC_MBSTAT: CInt {
  get {
    return
  }
}
var KIPC_NMBCLUSTERS: CInt {
  get {
    return
  }
}
var KIPC_MAX_LINKHDR: CInt {
  get {
    return
  }
}
var KIPC_MAX_PROTOHDR: CInt {
  get {
    return
  }
}
var KIPC_MAX_DATALEN: CInt {
  get {
    return
  }
}
var KIPC_MAX_HDR: CInt {
  get {
    return
  }
}
var KIPC_MAXSOCKBUF: CInt {
  get {
    return
  }
}
var FNM_FILE_NAME: CInt {
  get {
    return
  }
}
var KAUTH_ACE_FILE_INHERIT: CInt {
  get {
    return
  }
}
var FNM_CASEFOLD: CInt {
  get {
    return
  }
}
var KAUTH_ACE_FAILURE: CInt {
  get {
    return
  }
}
var FNM_LEADING_DIR: CInt {
  get {
    return
  }
}
var KAUTH_ACE_GENERIC_EXECUTE: CInt {
  get {
    return
  }
}
var FNM_NOESCAPE: CInt {
  get {
    return
  }
}
var FNM_IGNORECASE: CInt {
  get {
    return
  }
}
var KAUTH_ACE_GENERIC_ALL: CInt {
  get {
    return
  }
}
var FNM_NOSYS: CInt {
  get {
    return
  }
}
var KAUTH_ACE_GENERIC_WRITE: CInt {
  get {
    return
  }
}
var KAUTH_ACE_GENERIC_READ: CInt {
  get {
    return
  }
}
var FNM_NOMATCH: CInt {
  get {
    return
  }
}
var FNM_PERIOD: CInt {
  get {
    return
  }
}
var FNM_PATHNAME: CInt {
  get {
    return
  }
}
var KAUTH_ACE_INHERITED: CInt {
  get {
    return
  }
}
var FOPEN_MAX: CInt {
  get {
    return
  }
}
var KAUTH_ACE_LIMIT_INHERIT: CInt {
  get {
    return
  }
}
var FNONBLOCK: CInt {
  get {
    return
  }
}
var KAUTH_ACE_KINDMASK: CInt {
  get {
    return
  }
}
var KAUTH_ACE_PERMIT: CInt {
  get {
    return
  }
}
var FPC_DE: CInt {
  get {
    return
  }
}
var KAUTH_ACE_ONLY_INHERIT: CInt {
  get {
    return
  }
}
var FPC_IC: CInt {
  get {
    return
  }
}
var FPC_DM: CInt {
  get {
    return
  }
}
var KAUTH_ACE_SUCCESS: CInt {
  get {
    return
  }
}
var KAUTH_ACL_FLAGS_PRIVATE: CInt {
  get {
    return
  }
}
var FPC_IE: CInt {
  get {
    return
  }
}
var FPC_IC_AFF: CInt {
  get {
    return
  }
}
var FPC_IC_PROJ: CInt {
  get {
    return
  }
}
var KAUTH_ACL_DEFER_INHERIT: CInt {
  get {
    return
  }
}
var FPC_OM: CInt {
  get {
    return
  }
}
var FPC_OE: CInt {
  get {
    return
  }
}
var KAUTH_ACL_NO_INHERIT: CInt {
  get {
    return
  }
}
var KAUTH_ACL_MAX_ENTRIES: CInt {
  get {
    return
  }
}
var FPC_IM: CInt {
  get {
    return
  }
}
var FPC_PC_24: CInt {
  get {
    return
  }
}
var KAUTH_CLEAR_CACHES: CInt {
  get {
    return
  }
}
var FPC_PC: CInt {
  get {
    return
  }
}
var KAUTH_ENDIAN_HOST: CInt {
  get {
    return
  }
}
var FPC_PC_64: CInt {
  get {
    return
  }
}
var KAUTH_ENDIAN_DISK: CInt {
  get {
    return
  }
}
var FPC_PC_53: CInt {
  get {
    return
  }
}
var FPC_RC_CHOP: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_DEREGISTER: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_BADRQ: CInt {
  get {
    return
  }
}
var FPC_RC: CInt {
  get {
    return
  }
}
var FPC_PE: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_FATAL: CInt {
  get {
    return
  }
}
var FPC_RC_RN: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_FAILURE: CInt {
  get {
    return
  }
}
var FPC_RC_RD: CInt {
  get {
    return
  }
}
var FPC_ZE: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_ISMEMBER: CInt {
  get {
    return
  }
}
var FPC_UE: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_INPROG: CInt {
  get {
    return
  }
}
var FPC_RC_RU: CInt {
  get {
    return
  }
}
var FPE_FLTDIV: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_REGISTER: CInt {
  get {
    return
  }
}
var FPC_ZM: CInt {
  get {
    return
  }
}
var FPE_FLTOVF: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_SUCCESS: CInt {
  get {
    return
  }
}
var FPE_FLTINV: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_RESULT: CInt {
  get {
    return
  }
}
var FE_UPWARD: CInt {
  get {
    return
  }
}
var IP_PKTINFO: CInt {
  get {
    return
  }
}
var FF0: CInt {
  get {
    return
  }
}
var IP_PORTRANGE: CInt {
  get {
    return
  }
}
var FF1: CInt {
  get {
    return
  }
}
var IP_PORTRANGE_DEFAULT: CInt {
  get {
    return
  }
}
var FFDLY: CInt {
  get {
    return
  }
}
var IP_PORTRANGE_HIGH: CInt {
  get {
    return
  }
}
var IP_PORTRANGE_LOW: CInt {
  get {
    return
  }
}
var IP_RECVDSTADDR: CInt {
  get {
    return
  }
}
var FILENAME_MAX: CInt {
  get {
    return
  }
}
var IP_RECVIF: CInt {
  get {
    return
  }
}
var IP_RECVOPTS: CInt {
  get {
    return
  }
}
var FILESZ_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var IP_RECVPKTINFO: CInt {
  get {
    return
  }
}
var IP_RECVRETOPTS: CInt {
  get {
    return
  }
}
var IP_RECVTTL: CInt {
  get {
    return
  }
}
var IP_RETOPTS: CInt {
  get {
    return
  }
}
var IP_RSVP_OFF: CInt {
  get {
    return
  }
}
var IP_RSVP_ON: CInt {
  get {
    return
  }
}
var IP_RSVP_VIF_OFF: CInt {
  get {
    return
  }
}
var IP_RSVP_VIF_ON: CInt {
  get {
    return
  }
}
var IP_STRIPHDR: CInt {
  get {
    return
  }
}
var FIRST_EXCEPTION: CInt {
  get {
    return
  }
}
var IP_TOS: CInt {
  get {
    return
  }
}
var FIRST_LINK_XATTR_NAME: CString {
  get {
    return
  }
}
var IP_TRAFFIC_MGT_BACKGROUND: CInt {
  get {
    return
  }
}
var IP_TTL: CInt {
  get {
    return
  }
}
var ISIG: CInt {
  get {
    return
  }
}
var IP_UNBLOCK_SOURCE: CInt {
  get {
    return
  }
}
var FLT_DIG: CInt {
  get {
    return
  }
}
var FLAGS_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var FLT_EPSILON: CFloat {
  get {
    return
  }
}
var ISTRIP: CInt {
  get {
    return
  }
}
var FLT_EVAL_METHOD: CInt {
  get {
    return
  }
}
var ITIMER_REAL: CInt {
  get {
    return
  }
}
var ITIMER_PROF: CInt {
  get {
    return
  }
}
var FLT_MANT_DIG: CInt {
  get {
    return
  }
}
var ITIMER_VIRTUAL: CInt {
  get {
    return
  }
}
var FLT_MAX: CFloat {
  get {
    return
  }
}
var FLT_MAX_EXP: CInt {
  get {
    return
  }
}
var IUTF8: CInt {
  get {
    return
  }
}
var FLT_MAX_10_EXP: CInt {
  get {
    return
  }
}
var FLT_MIN: CFloat {
  get {
    return
  }
}
var IXANY: CInt {
  get {
    return
  }
}
var IXON: CInt {
  get {
    return
  }
}
var FLT_MIN_10_EXP: CInt {
  get {
    return
  }
}
var IXOFF: CInt {
  get {
    return
  }
}
var FLT_MIN_EXP: CInt {
  get {
    return
  }
}
var KAUTH_ACE_ALARM: CInt {
  get {
    return
  }
}
var FLT_RADIX: CInt {
  get {
    return
  }
}
var KAUTH_ACE_AUDIT: CInt {
  get {
    return
  }
}
var FLUSHO: CInt {
  get {
    return
  }
}
var KAUTH_ACE_DENY: CInt {
  get {
    return
  }
}
var FLT_TRUE_MIN: CFloat {
  get {
    return
  }
}
var FNDELAY: CInt {
  get {
    return
  }
}
var KAUTH_ACE_DIRECTORY_INHERIT: CInt {
  get {
    return
  }
}
var FREAD: CInt {
  get {
    return
  }
}
var FP_SUPERNORMAL: CInt {
  get {
    return
  }
}
var FP_ZERO: CInt {
  get {
    return
  }
}
var FP_SUBNORMAL: CInt {
  get {
    return
  }
}
var FP_STATE_BYTES: CInt {
  get {
    return
  }
}
var FSOPT_NOFOLLOW: CInt {
  get {
    return
  }
}
var FSOPT_ATTR_CMN_EXTENDED: CInt {
  get {
    return
  }
}
var FSHIFT: CInt {
  get {
    return
  }
}
var FST_EOF: CInt {
  get {
    return
  }
}
var FSOPT_REPORT_FULLSIZE: CInt {
  get {
    return
  }
}
var FSOPT_PACK_INVAL_ATTRS: CInt {
  get {
    return
  }
}
var FSOPT_NOINMEMUPDATE: CInt {
  get {
    return
  }
}
var FTW_DP: CInt {
  get {
    return
  }
}
var FTW_DNR: CInt {
  get {
    return
  }
}
var FTW_D: CInt {
  get {
    return
  }
}
var FTW_DEPTH: CInt {
  get {
    return
  }
}
var FTW_CHDIR: CInt {
  get {
    return
  }
}
var FTW_SL: CInt {
  get {
    return
  }
}
var FTW_PHYS: CInt {
  get {
    return
  }
}
var FTW_NS: CInt {
  get {
    return
  }
}
var FTW_MOUNT: CInt {
  get {
    return
  }
}
var FTW_F: CInt {
  get {
    return
  }
}
var FWRITE: CInt {
  get {
    return
  }
}
var FUNCTION_WIN32CC: CInt {
  get {
    return
  }
}
var FUNCTION_PASCAL: CInt {
  get {
    return
  }
}
var FUNCTION_DECLSPEC: CInt {
  get {
    return
  }
}
var FTW_SLN: CInt {
  get {
    return
  }
}
var F_ALLOCATECONTIG: CInt {
  get {
    return
  }
}
var F_ALLOCATEALL: CInt {
  get {
    return
  }
}
var F_ADDSIGS: CInt {
  get {
    return
  }
}
var F_ADDFILESIGS: CInt {
  get {
    return
  }
}
var F_FLUSH_DATA: CInt {
  get {
    return
  }
}
var F_FINDSIGS: CInt {
  get {
    return
  }
}
var F_DUPFD_CLOEXEC: CInt {
  get {
    return
  }
}
var F_DUPFD: CInt {
  get {
    return
  }
}
var F_CHKCLEAN: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_GRNAM: CInt {
  get {
    return
  }
}
var FPE_INTDIV: CInt {
  get {
    return
  }
}
var FPE_INTOVF: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_GSID: CInt {
  get {
    return
  }
}
var FPE_FLTRES: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_GGUID: CInt {
  get {
    return
  }
}
var FPE_FLTSUB: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_GID: CInt {
  get {
    return
  }
}
var FPE_FLTUND: CInt {
  get {
    return
  }
}
var FPS_C0: CInt {
  get {
    return
  }
}
var FPS_C1: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_SUPGRPS: CInt {
  get {
    return
  }
}
var FPS_C2: CInt {
  get {
    return
  }
}
var FPE_NOOP: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: CInt {
  get {
    return
  }
}
var FPS_BUSY: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_PWNAM: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_USID: CInt {
  get {
    return
  }
}
var FPS_IE: CInt {
  get {
    return
  }
}
var FPS_OE: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_GGUID: CInt {
  get {
    return
  }
}
var FPS_C3: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_UGUID: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_UID: CInt {
  get {
    return
  }
}
var FPS_DE: CInt {
  get {
    return
  }
}
var FPS_ES: CInt {
  get {
    return
  }
}
var FPS_TOS_SHIFT: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_GSID: CInt {
  get {
    return
  }
}
var FPS_UE: CInt {
  get {
    return
  }
}
var FPS_ZE: CInt {
  get {
    return
  }
}
var FPS_PE: CInt {
  get {
    return
  }
}
var FPS_SF: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_GID: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_GRNAM: CInt {
  get {
    return
  }
}
var FPS_TOS: CInt {
  get {
    return
  }
}
var FP_FXSR: CInt {
  get {
    return
  }
}
var FP_CHOP: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_SUPGRPS: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_UGUID: CInt {
  get {
    return
  }
}
var FP_287: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_PWNAM: CInt {
  get {
    return
  }
}
var FP_387: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WORKER: CInt {
  get {
    return
  }
}
var FP_NAN: CInt {
  get {
    return
  }
}
var FP_NORMAL: CInt {
  get {
    return
  }
}
var FP_NO: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_UID: CInt {
  get {
    return
  }
}
var FP_INFINITE: CInt {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_USID: CInt {
  get {
    return
  }
}
var FP_PREC_64B: CInt {
  get {
    return
  }
}
var FP_QNAN: CInt {
  get {
    return
  }
}
var FP_PREC_24B: CInt {
  get {
    return
  }
}
var FP_PREC_53B: CInt {
  get {
    return
  }
}
var FP_SNAN: CInt {
  get {
    return
  }
}
var FP_SOFT: CInt {
  get {
    return
  }
}
var FP_RND_DOWN: CInt {
  get {
    return
  }
}
var FP_RND_UP: CInt {
  get {
    return
  }
}
var FP_RND_NEAR: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_ACCESS: CInt {
  get {
    return
  }
}
var F_VOLPOSMODE: CInt {
  get {
    return
  }
}
var F_UNLCK: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_ADD_SUBDIRECTORY: CInt {
  get {
    return
  }
}
var F_WRLCK: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_ADD_FILE: CInt {
  get {
    return
  }
}
var F_THAW_FS: CInt {
  get {
    return
  }
}
var KAUTH_NTSID_MAX_AUTHORITIES: CInt {
  get {
    return
  }
}
var KAUTH_NTSID_HDRSIZE: CInt {
  get {
    return
  }
}
var F_TEST: CInt {
  get {
    return
  }
}
var KAUTH_SET_CACHE_SIZES: CInt {
  get {
    return
  }
}
var F_ULOCK: CInt {
  get {
    return
  }
}
var F_TLOCK: CInt {
  get {
    return
  }
}
var F_TRANSCODEKEY: CInt {
  get {
    return
  }
}
var GETALL: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_EXECUTE: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_DELETE_CHILD: CInt {
  get {
    return
  }
}
var GETPID: CInt {
  get {
    return
  }
}
var GETNCNT: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_CHANGE_OWNER: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_APPEND_DATA: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_DELETE: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_CHECKIMMUTABLE: CInt {
  get {
    return
  }
}
var GLOB_ABEND: CInt {
  get {
    return
  }
}
var GID_MAX: CUnsignedInt {
  get {
    return
  }
}
var KAUTH_VNODE_NOIMMUTABLE: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_LIST_DIRECTORY: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_READ_DATA: CInt {
  get {
    return
  }
}
var GLOB_ALTDIRFUNC: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_READ_ATTRIBUTES: CInt {
  get {
    return
  }
}
var GLOB_ABORTED: CInt {
  get {
    return
  }
}
var GETZCNT: CInt {
  get {
    return
  }
}
var GETVAL: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_GENERIC_EXECUTE_BITS: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_LINKTARGET: CInt {
  get {
    return
  }
}
var GLOB_MARK: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_SYNCHRONIZE: CInt {
  get {
    return
  }
}
var GLOB_MAGCHAR: CInt {
  get {
    return
  }
}
var GLOB_NOESCAPE: CInt {
  get {
    return
  }
}
var GLOB_NOCHECK: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_WRITE_ATTRIBUTES: CInt {
  get {
    return
  }
}
var GLOB_MAXPATH: CInt {
  get {
    return
  }
}
var GLOB_DOOFFS: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_READ_SECURITY: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_TAKE_OWNERSHIP: CInt {
  get {
    return
  }
}
var GLOB_BRACE: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_READ_EXTATTRIBUTES: CInt {
  get {
    return
  }
}
var GLOB_APPEND: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_SEARCHBYANYONE: CInt {
  get {
    return
  }
}
var GLOB_LIMIT: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_SEARCH: CInt {
  get {
    return
  }
}
var GLOB_ERR: CInt {
  get {
    return
  }
}
var F_GETLK: CInt {
  get {
    return
  }
}
var F_GETLKPID: CInt {
  get {
    return
  }
}
var F_GETNOSIGPIPE: CInt {
  get {
    return
  }
}
var F_GETOWN: CInt {
  get {
    return
  }
}
var F_FREEZE_FS: CInt {
  get {
    return
  }
}
var F_FULLFSYNC: CInt {
  get {
    return
  }
}
var F_GETCODEDIR: CInt {
  get {
    return
  }
}
var F_GETFD: CInt {
  get {
    return
  }
}
var F_GETFL: CInt {
  get {
    return
  }
}
var F_GLOBAL_NOCACHE: CInt {
  get {
    return
  }
}
var F_LOCK: CInt {
  get {
    return
  }
}
var F_LOG2PHYS: CInt {
  get {
    return
  }
}
var F_LOG2PHYS_EXT: CInt {
  get {
    return
  }
}
var F_NOCACHE: CInt {
  get {
    return
  }
}
var F_GETPATH: CInt {
  get {
    return
  }
}
var F_GETPATH_MTMINFO: CInt {
  get {
    return
  }
}
var F_GETPROTECTIONCLASS: CInt {
  get {
    return
  }
}
var F_GETPROTECTIONLEVEL: CInt {
  get {
    return
  }
}
var F_RDADVISE: CInt {
  get {
    return
  }
}
var KAUTH_FILESEC_MAGIC: CInt {
  get {
    return
  }
}
var F_RDAHEAD: CInt {
  get {
    return
  }
}
var F_RDLCK: CInt {
  get {
    return
  }
}
var F_SETFD: CInt {
  get {
    return
  }
}
var F_SETBACKINGSTORE: CInt {
  get {
    return
  }
}
var KAUTH_FILESEC_NO_INHERIT: CInt {
  get {
    return
  }
}
var F_NODIRECT: CInt {
  get {
    return
  }
}
var F_PATHPKG_CHECK: CInt {
  get {
    return
  }
}
var F_OK: CInt {
  get {
    return
  }
}
var F_PEOFPOSMODE: CInt {
  get {
    return
  }
}
var KAUTH_FILESEC_DEFER_INHERIT: CInt {
  get {
    return
  }
}
var F_PREALLOCATE: CInt {
  get {
    return
  }
}
var KAUTH_FILESEC_FLAGS_PRIVATE: CInt {
  get {
    return
  }
}
var F_SETOWN: CInt {
  get {
    return
  }
}
var KAUTH_GET_CACHE_SIZES: CInt {
  get {
    return
  }
}
var F_SETNOSIGPIPE: CInt {
  get {
    return
  }
}
var F_SETPROTECTIONCLASS: CInt {
  get {
    return
  }
}
var F_SETSIZE: CInt {
  get {
    return
  }
}
var KAUTH_GUID_SIZE: CInt {
  get {
    return
  }
}
var F_SINGLE_WRITER: CInt {
  get {
    return
  }
}
var F_SETFL: CInt {
  get {
    return
  }
}
var F_SETLK: CInt {
  get {
    return
  }
}
var F_SETLKW: CInt {
  get {
    return
  }
}
var KAUTH_FILESEC_XATTR: CString {
  get {
    return
  }
}
var F_SETLKWTIMEOUT: CInt {
  get {
    return
  }
}
var HFS_INODE_PREFIX: CString {
  get {
    return
  }
}
var KERN_INVALID_LEDGER: CInt {
  get {
    return
  }
}
var HFS_GET_JOURNAL_INFO: CInt {
  get {
    return
  }
}
var KERN_INVALID_HOST: CInt {
  get {
    return
  }
}
var HFS_EXTEND_FS: CInt {
  get {
    return
  }
}
var KERN_INVALID_CAPABILITY: CInt {
  get {
    return
  }
}
var HFS_ENCODINGHINT: CInt {
  get {
    return
  }
}
var KERN_INVALID_ARGUMENT: CInt {
  get {
    return
  }
}
var HFS_ENCODINGBIAS: CInt {
  get {
    return
  }
}
var KERN_INVALID_ADDRESS: CInt {
  get {
    return
  }
}
var HFS_ENABLE_RESIZE_DEBUG: CInt {
  get {
    return
  }
}
var KERN_HOSTNAME: CInt {
  get {
    return
  }
}
var HFS_ENABLE_JOURNALING: CInt {
  get {
    return
  }
}
var KERN_HOSTID: CInt {
  get {
    return
  }
}
var HFS_DISABLE_JOURNALING: CInt {
  get {
    return
  }
}
var KERN_FILE: CInt {
  get {
    return
  }
}
var KERN_INVALID_TASK: CInt {
  get {
    return
  }
}
var KERN_INVALID_SECURITY: CInt {
  get {
    return
  }
}
var KERN_INVALID_RIGHT: CInt {
  get {
    return
  }
}
var HISTFRACTION: CInt {
  get {
    return
  }
}
var KERN_INVALID_PROCESSOR_SET: CInt {
  get {
    return
  }
}
var KERN_INVALID_POLICY: CInt {
  get {
    return
  }
}
var HFS_UUID_NAMESPACE_ID: CString {
  get {
    return
  }
}
var KERN_INVALID_OBJECT: CInt {
  get {
    return
  }
}
var HFS_SET_PKG_EXTENSIONS: CInt {
  get {
    return
  }
}
var KERN_INVALID_NAME: CInt {
  get {
    return
  }
}
var HFS_REPLAY_JOURNAL: CInt {
  get {
    return
  }
}
var KERN_INVALID_MEMORY_CONTROL: CInt {
  get {
    return
  }
}
var KERN_KDEFLAGS: CInt {
  get {
    return
  }
}
var KERN_KDEBUG: CInt {
  get {
    return
  }
}
var KERN_KDDISABLE_BG_TRACE: CInt {
  get {
    return
  }
}
var HOST_CPU_LOAD_INFO: CInt {
  get {
    return
  }
}
var KERN_KDDFLAGS: CInt {
  get {
    return
  }
}
var KERN_KDCPUMAP: CInt {
  get {
    return
  }
}
var HOST_CALENDAR_CHANGED_REPLYID: CInt {
  get {
    return
  }
}
var KERN_KDBUFWAIT: CInt {
  get {
    return
  }
}
var KERN_JOB_CONTROL: CInt {
  get {
    return
  }
}
var KERN_IPC: CInt {
  get {
    return
  }
}
var KERN_INVALID_VALUE: CInt {
  get {
    return
  }
}
var HOST_BASIC_INFO: CInt {
  get {
    return
  }
}
var KERN_KDREADCURTHRMAP: CInt {
  get {
    return
  }
}
var HOST_IO_MASTER_PORT: CInt {
  get {
    return
  }
}
var KERN_KDPIDTR: CInt {
  get {
    return
  }
}
var HOST_INFO_MAX: CInt {
  get {
    return
  }
}
var KERN_KDPIDEX: CInt {
  get {
    return
  }
}
var KERN_KDGETREG: CInt {
  get {
    return
  }
}
var KERN_KDGETENTROPY: CInt {
  get {
    return
  }
}
var KERN_KDGETBUF: CInt {
  get {
    return
  }
}
var HOST_EXTMOD_INFO64: CInt {
  get {
    return
  }
}
var KERN_KDENABLE_BG_TRACE: CInt {
  get {
    return
  }
}
var HOST_EXPIRED_TASK_INFO: CInt {
  get {
    return
  }
}
var KERN_KDENABLE: CInt {
  get {
    return
  }
}
var GLOB_TILDE: CInt {
  get {
    return
  }
}
var GMONTYPE_ARCS_ORDERS: CInt {
  get {
    return
  }
}
var KERNEL_VERSION_MAX: CInt {
  get {
    return
  }
}
var GLOB_NOSYS: CInt {
  get {
    return
  }
}
var GLOB_QUOTE: CInt {
  get {
    return
  }
}
var KERNEL_BOOT_INFO_MAX: CInt {
  get {
    return
  }
}
var GLOB_NOSORT: CInt {
  get {
    return
  }
}
var GLOB_NOSPACE: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_WRITE_SECURITY: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_WRITE_DATA: CInt {
  get {
    return
  }
}
var GLOB_NOMAGIC: CInt {
  get {
    return
  }
}
var KAUTH_VNODE_WRITE_EXTATTRIBUTES: CInt {
  get {
    return
  }
}
var GLOB_NOMATCH: CInt {
  get {
    return
  }
}
var KERN_ALREADY_WAITING: CInt {
  get {
    return
  }
}
var GMON_PROF_BUSY: CInt {
  get {
    return
  }
}
var GMON_PROF_ERROR: CInt {
  get {
    return
  }
}
var KERN_ARGMAX: CInt {
  get {
    return
  }
}
var KERN_BOOTFILE: CInt {
  get {
    return
  }
}
var KERN_AIOTHREADS: CInt {
  get {
    return
  }
}
var GMON_MAGIC: CUnsignedInt {
  get {
    return
  }
}
var KERN_ALREADY_IN_SET: CInt {
  get {
    return
  }
}
var GMON_MAGIC_64: CUnsignedInt {
  get {
    return
  }
}
var KERN_AIOMAX: CInt {
  get {
    return
  }
}
var GMONTYPE_RAWARCS: CInt {
  get {
    return
  }
}
var KERN_AIOPROCMAX: CInt {
  get {
    return
  }
}
var GMONTYPE_SAMPLES: CInt {
  get {
    return
  }
}
var GMONVERSION: CInt {
  get {
    return
  }
}
var GMONTYPE_DYLD2_STATE: CInt {
  get {
    return
  }
}
var KERN_ABORTED: CInt {
  get {
    return
  }
}
var GMONTYPE_DYLD_STATE: CInt {
  get {
    return
  }
}
var KERN_AFFINITY: CInt {
  get {
    return
  }
}
var KERN_CODE_SELECTOR: CInt {
  get {
    return
  }
}
var GRPQUOTA: CInt {
  get {
    return
  }
}
var GUARD_TYPE_MACH_PORT: CInt {
  get {
    return
  }
}
var GPROF_STATE: CInt {
  get {
    return
  }
}
var KERN_CLOCKRATE: CInt {
  get {
    return
  }
}
var KERN_COREDUMP: CInt {
  get {
    return
  }
}
var GPROF_TOS: CInt {
  get {
    return
  }
}
var KERN_CODESIGN_ERROR: CInt {
  get {
    return
  }
}
var KERN_CLASSIC: CInt {
  get {
    return
  }
}
var GPROF_FROMS: CInt {
  get {
    return
  }
}
var GPROF_COUNT: CInt {
  get {
    return
  }
}
var KERN_CLASSICHANDLER: CInt {
  get {
    return
  }
}
var GPROF_GMONPARAM: CInt {
  get {
    return
  }
}
var KERN_BOOTTIME: CInt {
  get {
    return
  }
}
var GMON_PROF_OFF: CInt {
  get {
    return
  }
}
var KERN_CHECKOPENEVT: CInt {
  get {
    return
  }
}
var GMON_PROF_ON: CInt {
  get {
    return
  }
}
var KERN_EXEC: CInt {
  get {
    return
  }
}
var HFS_DELETE_PREFIX: CString {
  get {
    return
  }
}
var KERN_EXCEPTION_PROTECTED: CInt {
  get {
    return
  }
}
var KERN_FAILURE: CInt {
  get {
    return
  }
}
var HFS_DIRINODE_PREFIX: CString {
  get {
    return
  }
}
var KERN_DUMPDEV: CInt {
  get {
    return
  }
}
var HFSPLUSMETADATAFOLDER: CString {
  get {
    return
  }
}
var KERN_DUMMY: CInt {
  get {
    return
  }
}
var HFSPLUS_DIR_METADATA_FOLDER: CString {
  get {
    return
  }
}
var HFSFSMNT_NOXONFILES: CInt {
  get {
    return
  }
}
var KERN_DEFAULT_SET: CInt {
  get {
    return
  }
}
var HFSFSMNT_WRAPPER: CInt {
  get {
    return
  }
}
var KERN_DOMAINNAME: CInt {
  get {
    return
  }
}
var HASHFRACTION: CInt {
  get {
    return
  }
}
var KERN_COREFILE: CInt {
  get {
    return
  }
}
var HFSFSMNT_EXTENDED_ARGS: CInt {
  get {
    return
  }
}
var KERN_DATA_SELECTOR: CInt {
  get {
    return
  }
}
var REG_ENHANCED: CInt {
  get {
    return
  }
}
var REG_ENOSYS: CInt {
  get {
    return
  }
}
var REG_EESCAPE: CInt {
  get {
    return
  }
}
var REG_EMPTY: CInt {
  get {
    return
  }
}
var REG_ESUBREG: CInt {
  get {
    return
  }
}
var REG_EXTENDED: CInt {
  get {
    return
  }
}
var REG_ERANGE: CInt {
  get {
    return
  }
}
var REG_EPAREN: CInt {
  get {
    return
  }
}
var REG_ESPACE: CInt {
  get {
    return
  }
}
var ZONE_NAME_MAX_LEN: CInt {
  get {
    return
  }
}
var REG_BADRPT: CInt {
  get {
    return
  }
}
var REG_BASIC: CInt {
  get {
    return
  }
}
var REG_BADBR: CInt {
  get {
    return
  }
}
var YESEXPR: CInt {
  get {
    return
  }
}
var X_TLOSS: CDouble {
  get {
    return
  }
}
var REG_BADPAT: CInt {
  get {
    return
  }
}
var YESSTR: CInt {
  get {
    return
  }
}
var REG_ECOLLATE: CInt {
  get {
    return
  }
}
var _APPEND_OK: CInt {
  get {
    return
  }
}
var REG_ECTYPE: CInt {
  get {
    return
  }
}
var REG_DUMP: CInt {
  get {
    return
  }
}
var REG_EBRACK: CInt {
  get {
    return
  }
}
var REG_EBRACE: CInt {
  get {
    return
  }
}
var RB_UPSDELAY: CInt {
  get {
    return
  }
}
var REALTIME_CLOCK: CInt {
  get {
    return
  }
}
var WUNTRACED: CInt {
  get {
    return
  }
}
var W_OK: CInt {
  get {
    return
  }
}
var RB_UNIPROC: CInt {
  get {
    return
  }
}
var REG_BACKR: CInt {
  get {
    return
  }
}
var XUCRED_VERSION: CInt {
  get {
    return
  }
}
var REG_BACKTRACKING_MATCHER: CInt {
  get {
    return
  }
}
var X_OK: CInt {
  get {
    return
  }
}
var REG_ASSERT: CInt {
  get {
    return
  }
}
var REG_ATOI: CInt {
  get {
    return
  }
}
var WRDE_REUSE: CInt {
  get {
    return
  }
}
var RB_PANIC: CInt {
  get {
    return
  }
}
var WRDE_SHOWERR: CInt {
  get {
    return
  }
}
var RB_QUICK: CInt {
  get {
    return
  }
}
var WRDE_SYNTAX: CInt {
  get {
    return
  }
}
var WRDE_NOSPACE: CInt {
  get {
    return
  }
}
var RB_INITNAME: CInt {
  get {
    return
  }
}
var WRDE_NOSYS: CInt {
  get {
    return
  }
}
var RB_NOSYNC: CInt {
  get {
    return
  }
}
var RB_SAFEBOOT: CInt {
  get {
    return
  }
}
var WRDE_UNDEF: CInt {
  get {
    return
  }
}
var RB_SINGLE: CInt {
  get {
    return
  }
}
var WSTOPPED: CInt {
  get {
    return
  }
}
var RLIMIT_NPROC: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: CInt {
  get {
    return
  }
}
var RLIMIT_NOFILE: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: CInt {
  get {
    return
  }
}
var RLIMIT_MEMLOCK: CInt {
  get {
    return
  }
}
var RLIMIT_FSIZE: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_LP64_OFF64_LIBS: CInt {
  get {
    return
  }
}
var RLIMIT_WAKEUPS_MONITOR: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_LP64_OFF64_LDFLAGS: CInt {
  get {
    return
  }
}
var RLIMIT_THREAD_CPULIMITS: CInt {
  get {
    return
  }
}
var RLIMIT_STACK: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFF32_LIBS: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_LP64_OFF64_CFLAGS: CInt {
  get {
    return
  }
}
var RLIMIT_RSS: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFFBIG_LIBS: CInt {
  get {
    return
  }
}
var RE_DUP_MAX: CInt {
  get {
    return
  }
}
var _CS_DARWIN_USER_DIR: CInt {
  get {
    return
  }
}
var _CS_DARWIN_USER_CACHE_DIR: CInt {
  get {
    return
  }
}
var RETURN: CInt {
  get {
    return
  }
}
var RLIMIT_DATA: CInt {
  get {
    return
  }
}
var RLIMIT_CPU_USAGE_MONITOR: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFF32_CFLAGS: CInt {
  get {
    return
  }
}
var RLIMIT_CPU: CInt {
  get {
    return
  }
}
var _CS_PATH: CInt {
  get {
    return
  }
}
var RLIMIT_AS: CInt {
  get {
    return
  }
}
var RLIMIT_CORE: CInt {
  get {
    return
  }
}
var _CS_DARWIN_USER_TEMP_DIR: CInt {
  get {
    return
  }
}
var REG_PEND: CInt {
  get {
    return
  }
}
var REG_NOTBOL: CInt {
  get {
    return
  }
}
var REG_NOTEOL: CInt {
  get {
    return
  }
}
var REG_NOSUB: CInt {
  get {
    return
  }
}
var REG_NOSPEC: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: CInt {
  get {
    return
  }
}
var REG_UNGREEDY: CInt {
  get {
    return
  }
}
var _CHOWN_OK: CInt {
  get {
    return
  }
}
var REG_TRACE: CInt {
  get {
    return
  }
}
var REG_ITOA: CInt {
  get {
    return
  }
}
var REG_STARTEND: CInt {
  get {
    return
  }
}
var REG_LARGE: CInt {
  get {
    return
  }
}
var REG_INVARG: CInt {
  get {
    return
  }
}
var REG_ILLSEQ: CInt {
  get {
    return
  }
}
var REG_ICASE: CInt {
  get {
    return
  }
}
var _CACHED_RUNES: CInt {
  get {
    return
  }
}
var REG_NOMATCH: CInt {
  get {
    return
  }
}
var REG_NEWLINE: CInt {
  get {
    return
  }
}
var REG_MINIMAL: CInt {
  get {
    return
  }
}
var REG_LITERAL: CInt {
  get {
    return
  }
}
var P_SSTEP: CInt {
  get {
    return
  }
}
var WAKEMON_MAKE_FATAL: CInt {
  get {
    return
  }
}
var P_SUGID: CInt {
  get {
    return
  }
}
var WAKEMON_SET_DEFAULTS: CInt {
  get {
    return
  }
}
var P_THCWD: CInt {
  get {
    return
  }
}
var P_SYSTEM: CInt {
  get {
    return
  }
}
var P_TIMEOUT: CInt {
  get {
    return
  }
}
var P_TRACED: CInt {
  get {
    return
  }
}
var P_TRANSLATED: CInt {
  get {
    return
  }
}
var P_WEXIT: CInt {
  get {
    return
  }
}
var P_tmpdir: CString {
  get {
    return
  }
}
var P_PHYSIO: CInt {
  get {
    return
  }
}
var P_PPWAIT: CInt {
  get {
    return
  }
}
var P_REBOOT: CInt {
  get {
    return
  }
}
var P_PROFIL: CInt {
  get {
    return
  }
}
var VTR_UALARM: CInt {
  get {
    return
  }
}
var P_RESV10: CInt {
  get {
    return
  }
}
var VWERASE: CInt {
  get {
    return
  }
}
var P_RESV11: CInt {
  get {
    return
  }
}
var VTR_STAMP: CInt {
  get {
    return
  }
}
var WAIT_MYPGRP: CInt {
  get {
    return
  }
}
var VTR_VALUE: CInt {
  get {
    return
  }
}
var WAIT_ANY: CInt {
  get {
    return
  }
}
var P_RESV6: CInt {
  get {
    return
  }
}
var WAKEMON_DISABLE: CInt {
  get {
    return
  }
}
var P_RESV9: CInt {
  get {
    return
  }
}
var P_RESV7: CInt {
  get {
    return
  }
}
var WAKEMON_ENABLE: CInt {
  get {
    return
  }
}
var P_SELECT: CInt {
  get {
    return
  }
}
var WAKEMON_GET_PARAMS: CInt {
  get {
    return
  }
}
var VSTOP: CInt {
  get {
    return
  }
}
var P_FSTRACE: CInt {
  get {
    return
  }
}
var VSUSP: CInt {
  get {
    return
  }
}
var P_INMEM: CInt {
  get {
    return
  }
}
var P_LP64: CInt {
  get {
    return
  }
}
var VT0: CInt {
  get {
    return
  }
}
var P_NOCLDSTOP: CInt {
  get {
    return
  }
}
var P_NOCLDWAIT: CInt {
  get {
    return
  }
}
var P_NOREMOTEHANG: CUnsignedInt {
  get {
    return
  }
}
var VTDLY: CInt {
  get {
    return
  }
}
var VT1: CInt {
  get {
    return
  }
}
var VTAB: CInt {
  get {
    return
  }
}
var P_NOSHLIB: CInt {
  get {
    return
  }
}
var P_NOSWAP: CInt {
  get {
    return
  }
}
var P_OWEUPC: CInt {
  get {
    return
  }
}
var VTR_DISABLE: CInt {
  get {
    return
  }
}
var VQ_NOTRESPLOCK: CInt {
  get {
    return
  }
}
var VTIME: CInt {
  get {
    return
  }
}
var VQ_SERVEREVENT: CInt {
  get {
    return
  }
}
var VQ_SYNCEVENT: CInt {
  get {
    return
  }
}
var P_DIRTY_MARKED: CInt {
  get {
    return
  }
}
var VQ_UNMOUNT: CInt {
  get {
    return
  }
}
var P_DIRTY_SHUTDOWN: CInt {
  get {
    return
  }
}
var VQ_UPDATE: CInt {
  get {
    return
  }
}
var P_DIRTY_TERMINATED: CInt {
  get {
    return
  }
}
var P_DIRTY_TRACK: CInt {
  get {
    return
  }
}
var VQ_VERYLOWDISK: CInt {
  get {
    return
  }
}
var P_DISABLE_ASLR: CInt {
  get {
    return
  }
}
var P_EXEC: CInt {
  get {
    return
  }
}
var P_FORCEQUOTA: CInt {
  get {
    return
  }
}
var RB_ALTBOOT: CInt {
  get {
    return
  }
}
var VSTART: CInt {
  get {
    return
  }
}
var RAND_MAX: CInt {
  get {
    return
  }
}
var VREPRINT: CInt {
  get {
    return
  }
}
var WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT: CInt {
  get {
    return
  }
}
var RADIXCHAR: CInt {
  get {
    return
  }
}
var VSTATUS: CInt {
  get {
    return
  }
}
var RB_AUTOBOOT: CInt {
  get {
    return
  }
}
var RB_ASKNAME: CInt {
  get {
    return
  }
}
var WQ_EXCEEDED_TOTAL_THREAD_LIMIT: CInt {
  get {
    return
  }
}
var RB_DFLTROOT: CInt {
  get {
    return
  }
}
var VTR_ENABLE: CInt {
  get {
    return
  }
}
var WRDE_APPEND: CInt {
  get {
    return
  }
}
var RB_BOOT: CInt {
  get {
    return
  }
}
var WRDE_BADCHAR: CInt {
  get {
    return
  }
}
var RB_HALT: CInt {
  get {
    return
  }
}
var RB_DIR_RIGHT: CInt {
  get {
    return
  }
}
var WRDE_DOOFFS: CInt {
  get {
    return
  }
}
var WRDE_BADVAL: CInt {
  get {
    return
  }
}
var RB_DIR_LEFT: CInt {
  get {
    return
  }
}
var WRDE_CMDSUB: CInt {
  get {
    return
  }
}
var QUOTAOPSNAME: CString {
  get {
    return
  }
}
var QUOTAGROUP: CString {
  get {
    return
  }
}
var WINT_MAX: CInt {
  get {
    return
  }
}
var Q_QUOTAON: CInt {
  get {
    return
  }
}
var Q_QUOTAOFF: CInt {
  get {
    return
  }
}
var Q_GETQUOTA: CInt {
  get {
    return
  }
}
var WRDE_NOCMD: CInt {
  get {
    return
  }
}
var Q_SETQUOTA: CInt {
  get {
    return
  }
}
var WMESGLEN: CInt {
  get {
    return
  }
}
var Q_QUOTASTAT: CInt {
  get {
    return
  }
}
var WORD_BIT: CInt {
  get {
    return
  }
}
var Q_SYNC: CInt {
  get {
    return
  }
}
var Q_SETUSE: CInt {
  get {
    return
  }
}
var WNOHANG: CInt {
  get {
    return
  }
}
var WNOWAIT: CInt {
  get {
    return
  }
}
var WCHAR_MAX: CInt {
  get {
    return
  }
}
var WCOREFLAG: CInt {
  get {
    return
  }
}
var WCONTINUED: CInt {
  get {
    return
  }
}
var QUAD_MAX: CLongLong {
  get {
    return
  }
}
var QOS_MIN_RELATIVE_PRIORITY: CInt {
  get {
    return
  }
}
var QUOTAFILENAME: CString {
  get {
    return
  }
}
var WEXITED: CInt {
  get {
    return
  }
}
var QF_GROUPS_PER_GB: CInt {
  get {
    return
  }
}
var QF_MIN_GROUPS: CInt {
  get {
    return
  }
}
var QF_STRING_TAG: CString {
  get {
    return
  }
}
var QF_MIN_USERS: CInt {
  get {
    return
  }
}
var QF_VERSION: CInt {
  get {
    return
  }
}
var QF_USERS_PER_GB: CInt {
  get {
    return
  }
}
var SA_RESETHAND: CInt {
  get {
    return
  }
}
var SA_ONSTACK: CInt {
  get {
    return
  }
}
var SA_RESTART: CInt {
  get {
    return
  }
}
var SA_NOCLDWAIT: CInt {
  get {
    return
  }
}
var SA_NODEFER: CInt {
  get {
    return
  }
}
var SA_64REGSET: CInt {
  get {
    return
  }
}
var SA_NOCLDSTOP: CInt {
  get {
    return
  }
}
var RUSAGE_SELF: CInt {
  get {
    return
  }
}
var RUSAGE_INFO_V3: CInt {
  get {
    return
  }
}
var R_OK: CInt {
  get {
    return
  }
}
var RUSAGE_INFO_V1: CInt {
  get {
    return
  }
}
var RUSAGE_INFO_V2: CInt {
  get {
    return
  }
}
var RUSAGE_INFO_CURRENT: CInt {
  get {
    return
  }
}
var RUSAGE_INFO_V0: CInt {
  get {
    return
  }
}
var RUN_LVL: CInt {
  get {
    return
  }
}
var RUSAGE_CHILDREN: CInt {
  get {
    return
  }
}
var RTV_RTTVAR: CInt {
  get {
    return
  }
}
var RTV_SSTHRESH: CInt {
  get {
    return
  }
}
var RTV_SPIPE: CInt {
  get {
    return
  }
}
var RTV_RPIPE: CInt {
  get {
    return
  }
}
var RTV_RTT: CInt {
  get {
    return
  }
}
var RTV_EXPIRE: CInt {
  get {
    return
  }
}
var RTV_HOPCOUNT: CInt {
  get {
    return
  }
}
var RTV_MTU: CInt {
  get {
    return
  }
}
var RTM_RTTUNIT: CInt {
  get {
    return
  }
}
var RTM_VERSION: CInt {
  get {
    return
  }
}
var RTM_REDIRECT: CInt {
  get {
    return
  }
}
var RTM_RESOLVE: CInt {
  get {
    return
  }
}
var _GLOB_ERR_BLOCK: CUnsignedInt {
  get {
    return
  }
}
var RTM_OLDADD: CInt {
  get {
    return
  }
}
var RTM_OLDDEL: CInt {
  get {
    return
  }
}
var RTM_NEWADDR: CInt {
  get {
    return
  }
}
var RTM_NEWMADDR: CInt {
  get {
    return
  }
}
var RTM_NEWMADDR2: CInt {
  get {
    return
  }
}
var RTM_LOSING: CInt {
  get {
    return
  }
}
var RTM_MISS: CInt {
  get {
    return
  }
}
var RTM_IFINFO2: CInt {
  get {
    return
  }
}
var RTM_LOCK: CInt {
  get {
    return
  }
}
var SCNi32: CString {
  get {
    return
  }
}
var SCNi16: CString {
  get {
    return
  }
}
var SCNdPTR: CString {
  get {
    return
  }
}
var SCNdLEAST32: CString {
  get {
    return
  }
}
var SCNdLEAST16: CString {
  get {
    return
  }
}
var SCNdFAST32: CString {
  get {
    return
  }
}
var SCNdFAST16: CString {
  get {
    return
  }
}
var SCNd32: CString {
  get {
    return
  }
}
var SCNd16: CString {
  get {
    return
  }
}
var SCM_TIMESTAMP_MONOTONIC: CInt {
  get {
    return
  }
}
var _LIBICONV_VERSION: CInt {
  get {
    return
  }
}
var _LC_LAST: CInt {
  get {
    return
  }
}
var SCM_TIMESTAMP: CInt {
  get {
    return
  }
}
var SCM_RIGHTS: CInt {
  get {
    return
  }
}
var SCHED_RR: CInt {
  get {
    return
  }
}
var SCM_CREDS: CInt {
  get {
    return
  }
}
var SCHED_OTHER: CInt {
  get {
    return
  }
}
var SCHED_FIFO: CInt {
  get {
    return
  }
}
var SCHAR_MIN: CInt {
  get {
    return
  }
}
var SCHAR_MAX: CInt {
  get {
    return
  }
}
var SBUF_USRFLAGMSK: CInt {
  get {
    return
  }
}
var SBUF_OVERFLOWED: CInt {
  get {
    return
  }
}
var SBUF_FINISHED: CInt {
  get {
    return
  }
}
var SBUF_FIXEDLEN: CInt {
  get {
    return
  }
}
var SBUF_DYNSTRUCT: CInt {
  get {
    return
  }
}
var SBUF_DYNAMIC: CInt {
  get {
    return
  }
}
var SBUF_AUTOEXTEND: CInt {
  get {
    return
  }
}
var SA_USERTRAMP: CInt {
  get {
    return
  }
}
var _IOFBF: CInt {
  get {
    return
  }
}
var _IOLBF: CInt {
  get {
    return
  }
}
var _IONBF: CInt {
  get {
    return
  }
}
var SA_SIGINFO: CInt {
  get {
    return
  }
}
var _CTYPE_I: CLong {
  get {
    return
  }
}
var RTF_DONE: CInt {
  get {
    return
  }
}
var RTF_DYNAMIC: CInt {
  get {
    return
  }
}
var RTF_HOST: CInt {
  get {
    return
  }
}
var _CTYPE_P: CLong {
  get {
    return
  }
}
var RTF_GATEWAY: CInt {
  get {
    return
  }
}
var RTF_IFREF: CInt {
  get {
    return
  }
}
var _CTYPE_Q: CLong {
  get {
    return
  }
}
var RTF_BROADCAST: CInt {
  get {
    return
  }
}
var _CTYPE_B: CLong {
  get {
    return
  }
}
var RTF_CLONING: CInt {
  get {
    return
  }
}
var _CTYPE_C: CLong {
  get {
    return
  }
}
var _CTYPE_G: CLong {
  get {
    return
  }
}
var RTF_CONDEMNED: CInt {
  get {
    return
  }
}
var _CTYPE_D: CLong {
  get {
    return
  }
}
var RTF_DELCLONE: CInt {
  get {
    return
  }
}
var RTA_IFA: CInt {
  get {
    return
  }
}
var _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: CInt {
  get {
    return
  }
}
var RTA_IFP: CInt {
  get {
    return
  }
}
var _CS_XBS5_LPBIG_OFFBIG_LIBS: CInt {
  get {
    return
  }
}
var RTA_NETMASK: CInt {
  get {
    return
  }
}
var _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: CInt {
  get {
    return
  }
}
var _CTYPE_A: CLong {
  get {
    return
  }
}
var RTA_AUTHOR: CInt {
  get {
    return
  }
}
var _CS_XBS5_LP64_OFF64_LIBS: CInt {
  get {
    return
  }
}
var RTF_BLACKHOLE: CInt {
  get {
    return
  }
}
var _CS_XBS5_LP64_OFF64_LINTFLAGS: CInt {
  get {
    return
  }
}
var RTA_BRD: CInt {
  get {
    return
  }
}
var RTA_GATEWAY: CInt {
  get {
    return
  }
}
var RTA_DST: CInt {
  get {
    return
  }
}
var RTA_GENMASK: CInt {
  get {
    return
  }
}
var _CS_XBS5_LPBIG_OFFBIG_CFLAGS: CInt {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFFBIG_LIBS: CInt {
  get {
    return
  }
}
var RTAX_GENMASK: CInt {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: CInt {
  get {
    return
  }
}
var RTAX_IFA: CInt {
  get {
    return
  }
}
var RTAX_IFP: CInt {
  get {
    return
  }
}
var RTAX_MAX: CInt {
  get {
    return
  }
}
var _CS_XBS5_LP64_OFF64_CFLAGS: CInt {
  get {
    return
  }
}
var RTAX_NETMASK: CInt {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFF32_LINTFLAGS: CInt {
  get {
    return
  }
}
var RTAX_AUTHOR: CInt {
  get {
    return
  }
}
var _CTYPE_L: CLong {
  get {
    return
  }
}
var _CS_XBS5_LP64_OFF64_LDFLAGS: CInt {
  get {
    return
  }
}
var RTAX_BRD: CInt {
  get {
    return
  }
}
var RTAX_DST: CInt {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFFBIG_CFLAGS: CInt {
  get {
    return
  }
}
var RTAX_GATEWAY: CInt {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFFBIG_LDFLAGS: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: CInt {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFF32_CFLAGS: CInt {
  get {
    return
  }
}
var RPC_SIGBUF_SIZE: CInt {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFF32_LDFLAGS: CInt {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFF32_LIBS: CInt {
  get {
    return
  }
}
var RLIM_NLIMITS: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: CInt {
  get {
    return
  }
}
var _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: CInt {
  get {
    return
  }
}
var RTM_DELMADDR: CInt {
  get {
    return
  }
}
var RTM_DELETE: CInt {
  get {
    return
  }
}
var RTM_IFINFO: CInt {
  get {
    return
  }
}
var RTM_GET2: CInt {
  get {
    return
  }
}
var RTM_GET: CInt {
  get {
    return
  }
}
var RTLD_NOW: CInt {
  get {
    return
  }
}
var RTM_DELADDR: CInt {
  get {
    return
  }
}
var RTM_ADD: CInt {
  get {
    return
  }
}
var RTM_CHANGE: CInt {
  get {
    return
  }
}
var RTLD_NOLOAD: CInt {
  get {
    return
  }
}
var RTLD_FIRST: CInt {
  get {
    return
  }
}
var RTLD_NODELETE: CInt {
  get {
    return
  }
}
var _DELETE_OK: CInt {
  get {
    return
  }
}
var RTLD_LOCAL: CInt {
  get {
    return
  }
}
var RTLD_GLOBAL: CInt {
  get {
    return
  }
}
var RTLD_LAZY: CInt {
  get {
    return
  }
}
var _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: CInt {
  get {
    return
  }
}
var RTF_UP: CInt {
  get {
    return
  }
}
var _EXECUTE_OK: CInt {
  get {
    return
  }
}
var RTF_ROUTER: CInt {
  get {
    return
  }
}
var RTF_STATIC: CInt {
  get {
    return
  }
}
var RTF_XRESOLVE: CInt {
  get {
    return
  }
}
var RTF_WASCLONED: CInt {
  get {
    return
  }
}
var RTF_PROTO3: CInt {
  get {
    return
  }
}
var _DARWIN_FEATURE_UNIX_CONFORMANCE: CInt {
  get {
    return
  }
}
var _FILESEC_UNSET_PROPERTY: NilType {
  get {
    return
  }
}
var _CTYPE_U: CLong {
  get {
    return
  }
}
var RTF_PROTO2: CInt {
  get {
    return
  }
}
var RTF_REJECT: CInt {
  get {
    return
  }
}
var _DARWIN_FEATURE_64_BIT_INODE: CInt {
  get {
    return
  }
}
var RTF_PROXY: CInt {
  get {
    return
  }
}
var RTF_NOIFREF: CInt {
  get {
    return
  }
}
var _CTYPE_SWM: CLong {
  get {
    return
  }
}
var RTF_MULTICAST: CInt {
  get {
    return
  }
}
var _CTYPE_SW3: CLong {
  get {
    return
  }
}
var RTF_PINNED: CInt {
  get {
    return
  }
}
var _CTYPE_T: CLong {
  get {
    return
  }
}
var RTF_PROTO1: CInt {
  get {
    return
  }
}
var _FORTIFY_SOURCE: CInt {
  get {
    return
  }
}
var _CTYPE_X: CLong {
  get {
    return
  }
}
var RTF_PRCLONING: CInt {
  get {
    return
  }
}
var RTF_LLINFO: CInt {
  get {
    return
  }
}
var _CTYPE_SW0: CLong {
  get {
    return
  }
}
var _CTYPE_R: CLong {
  get {
    return
  }
}
var RTF_IFSCOPE: CInt {
  get {
    return
  }
}
var _CTYPE_S: CLong {
  get {
    return
  }
}
var RTF_MODIFIED: CInt {
  get {
    return
  }
}
var _CTYPE_SW2: CLong {
  get {
    return
  }
}
var _CTYPE_SW1: CLong {
  get {
    return
  }
}
var RTF_LOCAL: CInt {
  get {
    return
  }
}
var PROC_FLAG_IOS_APPLICATION: CInt {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_HUGE: CInt {
  get {
    return
  }
}
var PROC_FLAG_IOS_IMPPROMOTION: CInt {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_LARGE: CInt {
  get {
    return
  }
}
var PROC_FLAG_INEXIT: CInt {
  get {
    return
  }
}
var VM_MEMORY_MACH_MSG: CInt {
  get {
    return
  }
}
var PROC_FLAG_IOS_APPLEDAEMON: CInt {
  get {
    return
  }
}
var VM_MEMORY_MALLOC: CInt {
  get {
    return
  }
}
var PROC_FLAG_PA_THROTTLE: CInt {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_NANO: CInt {
  get {
    return
  }
}
var PROC_FLAG_PC_KILL: CInt {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_SMALL: CInt {
  get {
    return
  }
}
var PROC_FLAG_LP64: CInt {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_LARGE_REUSABLE: CInt {
  get {
    return
  }
}
var PROC_FLAG_PA_SUSP: CInt {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_LARGE_REUSED: CInt {
  get {
    return
  }
}
var PROC_FLAG_PC_THROTTLE: CInt {
  get {
    return
  }
}
var VM_MEMORY_OPENCL: CInt {
  get {
    return
  }
}
var _CTYPE_SWS: CInt {
  get {
    return
  }
}
var PROC_FLAG_PPWAIT: CInt {
  get {
    return
  }
}
var VM_MEMORY_OS_ALLOC_ONCE: CInt {
  get {
    return
  }
}
var PROC_FLAG_PC_MASK: CInt {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_TINY: CInt {
  get {
    return
  }
}
var PROC_FLAG_PC_SUSP: CInt {
  get {
    return
  }
}
var VM_MEMORY_OBJC_DISPATCHERS: CInt {
  get {
    return
  }
}
var PROC_FLAG_SUPPRESSED: CInt {
  get {
    return
  }
}
var VM_MEMORY_SHARED_PMAP: CInt {
  get {
    return
  }
}
var PROC_FLAG_SYSTEM: CInt {
  get {
    return
  }
}
var VM_MEMORY_SQLITE: CInt {
  get {
    return
  }
}
var PROC_FLAG_PSUGID: CInt {
  get {
    return
  }
}
var VM_MEMORY_REALLOC: CInt {
  get {
    return
  }
}
var PROC_FLAG_SLEADER: CInt {
  get {
    return
  }
}
var VM_MEMORY_SBRK: CInt {
  get {
    return
  }
}
var VM_MEMORY_DYLD_MALLOC: CInt {
  get {
    return
  }
}
var PROC_DIRTY_TRACKED: CInt {
  get {
    return
  }
}
var VM_MEMORY_DYLIB: CInt {
  get {
    return
  }
}
var PROC_FI_GUARD_CLOSE: CUnsignedInt {
  get {
    return
  }
}
var VM_MEMORY_COREUIFILE: CInt {
  get {
    return
  }
}
var PROC_DIRTY_IS_DIRTY: CInt {
  get {
    return
  }
}
var VM_MEMORY_FOUNDATION: CInt {
  get {
    return
  }
}
var VM_MEMORY_DYLD: CInt {
  get {
    return
  }
}
var PROC_DIRTY_TRACK: CInt {
  get {
    return
  }
}
var PROC_FI_GUARD_SOCKET_IPC: CUnsignedInt {
  get {
    return
  }
}
var VM_MEMORY_GUARD: CInt {
  get {
    return
  }
}
var PROC_FLAG_ADAPTIVE: CInt {
  get {
    return
  }
}
var PROC_FI_GUARD_DUP: CUnsignedInt {
  get {
    return
  }
}
var VM_MEMORY_GENEALOGY: CInt {
  get {
    return
  }
}
var PROC_FI_GUARD_FILEPORT: CUnsignedInt {
  get {
    return
  }
}
var VM_MEMORY_GLSL: CInt {
  get {
    return
  }
}
var PROC_FLAG_CONTROLT: CInt {
  get {
    return
  }
}
var VM_MEMORY_IMAGEIO: CInt {
  get {
    return
  }
}
var VM_MEMORY_JAVASCRIPT_CORE: CInt {
  get {
    return
  }
}
var PROC_FLAG_CTTY: CInt {
  get {
    return
  }
}
var VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: CInt {
  get {
    return
  }
}
var PROC_FLAG_ADAPTIVE_IMPORTANT: CInt {
  get {
    return
  }
}
var VM_MEMORY_JAVA: CInt {
  get {
    return
  }
}
var VM_MEMORY_IOKIT: CInt {
  get {
    return
  }
}
var PROC_FLAG_APPLICATION: CInt {
  get {
    return
  }
}
var PROC_FLAG_EXT_DARWINBG: CInt {
  get {
    return
  }
}
var VM_MEMORY_LAYERKIT: CInt {
  get {
    return
  }
}
var NSEC_PER_SEC: CUnsignedLongLong {
  get {
    return
  }
}
var VM_MEMORY_LIBDISPATCH: CInt {
  get {
    return
  }
}
var NSEC_PER_MSEC: CUnsignedLongLong {
  get {
    return
  }
}
var PROC_FLAG_IMPORTANCE_DONOR: CInt {
  get {
    return
  }
}
var PROC_FLAG_DARWINBG: CInt {
  get {
    return
  }
}
var USEC_PER_SEC: CUnsignedLongLong {
  get {
    return
  }
}
var VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: CInt {
  get {
    return
  }
}
var NSEC_PER_USEC: CUnsignedLongLong {
  get {
    return
  }
}
var PROC_FLAG_EXEC: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_PRESENT: CInt {
  get {
    return
  }
}
var PROC_PIDFDSOCKETINFO: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_PAGED_OUT: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_FICTITIOUS: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_EXTERNAL: CInt {
  get {
    return
  }
}
var PROC_PIDFDPSHMINFO: CInt {
  get {
    return
  }
}
var PROC_PIDFDVNODEPATHINFO: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_SPECULATIVE: CInt {
  get {
    return
  }
}
var PROC_PIDFDVNODEINFO: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_REF: CInt {
  get {
    return
  }
}
var PROC_PIDFILEPORTPSHMINFO: CInt {
  get {
    return
  }
}
var PROC_PIDFILEPORTPIPEINFO: CInt {
  get {
    return
  }
}
var VM_PROT_COW: CInt {
  get {
    return
  }
}
var PROC_PIDFILEPORTVNODEPATHINFO: CInt {
  get {
    return
  }
}
var VM_PROT_SLIDE: CInt {
  get {
    return
  }
}
var PROC_PIDFILEPORTSOCKETINFO: CInt {
  get {
    return
  }
}
var PROC_FP_GUARDED: CInt {
  get {
    return
  }
}
var VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: CInt {
  get {
    return
  }
}
var VM_MEMORY_UNSHARED_PMAP: CInt {
  get {
    return
  }
}
var PROC_FP_CLEXEC: CInt {
  get {
    return
  }
}
var VM_MEMORY_TCMALLOC: CInt {
  get {
    return
  }
}
var PROC_FLAG_TRACED: CInt {
  get {
    return
  }
}
var VM_MEMORY_STACK: CInt {
  get {
    return
  }
}
var PROC_FLAG_THCWD: CInt {
  get {
    return
  }
}
var PROC_PGRP_ONLY: CInt {
  get {
    return
  }
}
var PROC_KQUEUE_SLEEP: CInt {
  get {
    return
  }
}
var PROC_KQUEUE_SELECT: CInt {
  get {
    return
  }
}
var PROC_FP_SHARED: CInt {
  get {
    return
  }
}
var VM_METER: CInt {
  get {
    return
  }
}
var PROC_PIDFDKQUEUEINFO: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_COPIED: CInt {
  get {
    return
  }
}
var VM_PAGE_INFO_BASIC: CInt {
  get {
    return
  }
}
var PROC_PIDFDATALKINFO: CInt {
  get {
    return
  }
}
var PROC_PIDFDPSEMINFO: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_DIRTY: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_CS_VALIDATED: CInt {
  get {
    return
  }
}
var PROC_PIDFDPIPEINFO: CInt {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_CS_TAINTED: CInt {
  get {
    return
  }
}
var VM_FLAGS_SUPERPAGE_MASK: CInt {
  get {
    return
  }
}
var PRIoPTR: CString {
  get {
    return
  }
}
var PRIu16: CString {
  get {
    return
  }
}
var VM_FLAGS_SUPERPAGE_SHIFT: CInt {
  get {
    return
  }
}
var PRIu32: CString {
  get {
    return
  }
}
var PRIuFAST16: CString {
  get {
    return
  }
}
var PRIuFAST32: CString {
  get {
    return
  }
}
var PRIuLEAST16: CString {
  get {
    return
  }
}
var PRIuLEAST32: CString {
  get {
    return
  }
}
var PRIuPTR: CString {
  get {
    return
  }
}
var PRIx32: CString {
  get {
    return
  }
}
var PRIx16: CString {
  get {
    return
  }
}
var PRIiFAST32: CString {
  get {
    return
  }
}
var PRIiLEAST16: CString {
  get {
    return
  }
}
var PRIiLEAST32: CString {
  get {
    return
  }
}
var PRIiPTR: CString {
  get {
    return
  }
}
var PRIo16: CString {
  get {
    return
  }
}
var PRIo32: CString {
  get {
    return
  }
}
var VM_FLAGS_ALIAS_MASK: CUnsignedInt {
  get {
    return
  }
}
var VM_FLAGS_ANYWHERE: CInt {
  get {
    return
  }
}
var PRIoFAST16: CString {
  get {
    return
  }
}
var VM_FLAGS_FIXED: CInt {
  get {
    return
  }
}
var PRIoFAST32: CString {
  get {
    return
  }
}
var VM_FLAGS_NO_CACHE: CInt {
  get {
    return
  }
}
var VM_FLAGS_OVERWRITE: CInt {
  get {
    return
  }
}
var PRIoLEAST16: CString {
  get {
    return
  }
}
var VM_FLAGS_PURGABLE: CInt {
  get {
    return
  }
}
var PRIoLEAST32: CString {
  get {
    return
  }
}
var VM_FLAGS_RETURN_DATA_ADDR: CInt {
  get {
    return
  }
}
var PROCESSOR_PM_REGS_INFO: CInt {
  get {
    return
  }
}
var VM_MEMORY_ATS: CInt {
  get {
    return
  }
}
var VM_MEMORY_CARBON: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREDATA: CInt {
  get {
    return
  }
}
var PROCESSOR_SET_BASIC_INFO: CInt {
  get {
    return
  }
}
var VM_MEMORY_CGIMAGE: CInt {
  get {
    return
  }
}
var PROCESSOR_SET_LOAD_INFO: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS: CInt {
  get {
    return
  }
}
var PROCESSOR_SET_INFO_MAX: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREDATA_OBJECTIDS: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_DATA: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_BACKINGSTORES: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: CInt {
  get {
    return
  }
}
var PROCESSOR_TEMPERATURE: CInt {
  get {
    return
  }
}
var PROC_DIRTYCONTROL_SET: CInt {
  get {
    return
  }
}
var PROC_ALL_PIDS: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_SHARED: CInt {
  get {
    return
  }
}
var PROC_DIRTYCONTROL_GET: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_MISC: CInt {
  get {
    return
  }
}
var PROC_DIRTY_ALLOWS_IDLE_EXIT: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREPROFILE: CInt {
  get {
    return
  }
}
var PROC_DIRTYCONTROL_TRACK: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREIMAGE: CInt {
  get {
    return
  }
}
var PROC_DIRTY_DEFER: CInt {
  get {
    return
  }
}
var VM_MEMORY_COREUI: CInt {
  get {
    return
  }
}
var PROC_DIRTY_ALLOW_IDLE_EXIT: CInt {
  get {
    return
  }
}
var VM_MEMORY_CORESERVICES: CInt {
  get {
    return
  }
}
var VM_LOADAVG: CInt {
  get {
    return
  }
}
var PRIxFAST32: CString {
  get {
    return
  }
}
var PRIxFAST16: CString {
  get {
    return
  }
}
var VM_MACHFACTOR: CInt {
  get {
    return
  }
}
var PRIxLEAST16: CString {
  get {
    return
  }
}
var VM_MAP_ENTRY_MAX: CInt {
  get {
    return
  }
}
var VM_MAXID: CInt {
  get {
    return
  }
}
var PRIxLEAST32: CString {
  get {
    return
  }
}
var PRIxPTR: CString {
  get {
    return
  }
}
var VM_MEMORY_ACCELERATE: CInt {
  get {
    return
  }
}
var VM_MEMORY_APPKIT: CInt {
  get {
    return
  }
}
var PROCESSOR_BASIC_INFO: CInt {
  get {
    return
  }
}
var VM_MEMORY_ANALYSIS_TOOL: CInt {
  get {
    return
  }
}
var VM_MEMORY_APPLICATION_SPECIFIC_1: CInt {
  get {
    return
  }
}
var PROCESSOR_CPU_LOAD_INFO: CInt {
  get {
    return
  }
}
var VM_MEMORY_ASSETSD: CInt {
  get {
    return
  }
}
var PROCESSOR_INFO_MAX: CInt {
  get {
    return
  }
}
var VM_MEMORY_APPLICATION_SPECIFIC_16: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_HIDDEN_FILES: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_JOURNAL: CInt {
  get {
    return
  }
}
var PTHREAD_DESTRUCTOR_ITERATIONS: CInt {
  get {
    return
  }
}
var PTHREAD_CREATE_DETACHED: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_FAST_STATFS: CInt {
  get {
    return
  }
}
var PTHREAD_CREATE_JOINABLE: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_HARDLINKS: CInt {
  get {
    return
  }
}
var PTHREAD_CANCEL_ENABLE: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_CASE_SENSITIVE: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_DECMPFS_COMPRESSION: CInt {
  get {
    return
  }
}
var PTHREAD_CANCEL_DEFERRED: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_64BIT_OBJECT_IDS: CInt {
  get {
    return
  }
}
var PTHREAD_CANCEL_DISABLE: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_CASE_PRESERVING: CInt {
  get {
    return
  }
}
var PTHREAD_MUTEX_ERRORCHECK: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_PERSISTENTOBJECTIDS: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_SPARSE_FILES: CInt {
  get {
    return
  }
}
var PTHREAD_KEYS_MAX: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_OPENDENYMODES: CInt {
  get {
    return
  }
}
var PTHREAD_MUTEX_DEFAULT: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_PATH_FROM_ID: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_NO_VOLUME_SIZES: CInt {
  get {
    return
  }
}
var PTHREAD_INHERIT_SCHED: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_JOURNAL_ACTIVE: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_NO_ROOT_TIMES: CInt {
  get {
    return
  }
}
var PTHREAD_EXPLICIT_SCHED: CInt {
  get {
    return
  }
}
var PSHM_DEFINED: CInt {
  get {
    return
  }
}
var PSHM_INCREATE: CInt {
  get {
    return
  }
}
var PSHM_INDELETE: CInt {
  get {
    return
  }
}
var PSHMNAMLEN: CInt {
  get {
    return
  }
}
var VM_VOLATILE_GROUP_SHIFT: CInt {
  get {
    return
  }
}
var PSHM_ALLOCATED: CInt {
  get {
    return
  }
}
var PSEM_REMOVED: CInt {
  get {
    return
  }
}
var PSEM_INUSE: CInt {
  get {
    return
  }
}
var PSEM_MAPPED: CInt {
  get {
    return
  }
}
var PSEM_NONE: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_2TB_FILESIZE: CInt {
  get {
    return
  }
}
var PTHREAD_CANCEL_ASYNCHRONOUS: CInt {
  get {
    return
  }
}
var PSOCK: CInt {
  get {
    return
  }
}
var PSPIN: CInt {
  get {
    return
  }
}
var VOL_CAPABILITIES_RESERVED1: CInt {
  get {
    return
  }
}
var VOL_CAPABILITIES_RESERVED2: CInt {
  get {
    return
  }
}
var PSWP: CInt {
  get {
    return
  }
}
var VOL_CAPABILITIES_FORMAT: CInt {
  get {
    return
  }
}
var PSHM_NONE: CInt {
  get {
    return
  }
}
var PSHM_REMOVED: CInt {
  get {
    return
  }
}
var VOL_CAPABILITIES_INTERFACES: CInt {
  get {
    return
  }
}
var PSHM_INUSE: CInt {
  get {
    return
  }
}
var VM_VOLATILE_ORDER_SHIFT: CInt {
  get {
    return
  }
}
var PSHM_MAPPED: CInt {
  get {
    return
  }
}
var P_CONTINUED: CInt {
  get {
    return
  }
}
var P_CLASSIC: CInt {
  get {
    return
  }
}
var VQ_ASSIST: CInt {
  get {
    return
  }
}
var VQUIT: CInt {
  get {
    return
  }
}
var P_CHECKOPENEVT: CInt {
  get {
    return
  }
}
var VPRINTPLOT: CInt {
  get {
    return
  }
}
var P_AFFINITY: CInt {
  get {
    return
  }
}
var VPRINT: CInt {
  get {
    return
  }
}
var VPLOT: CInt {
  get {
    return
  }
}
var P_ADVLOCK: CInt {
  get {
    return
  }
}
var PZERO: CInt {
  get {
    return
  }
}
var PVM: CInt {
  get {
    return
  }
}
var VOUCHER_MACH_MSG_API_VERSION: CInt {
  get {
    return
  }
}
var PWAIT: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_VOL_RENAME: CInt {
  get {
    return
  }
}
var PVFS: CInt {
  get {
    return
  }
}
var PUSER: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_USERACCESS: CInt {
  get {
    return
  }
}
var P_DIRTY_DEFER_IN_PROGRESS: CInt {
  get {
    return
  }
}
var VQ_NOTRESP: CInt {
  get {
    return
  }
}
var P_DIRTY_DEFER: CInt {
  get {
    return
  }
}
var VQ_NEEDAUTH: CInt {
  get {
    return
  }
}
var P_DIRTY_BUSY: CInt {
  get {
    return
  }
}
var VQ_MOUNT: CInt {
  get {
    return
  }
}
var P_DIRTY_ALLOW_IDLE_EXIT: CInt {
  get {
    return
  }
}
var VQ_LOWDISK: CInt {
  get {
    return
  }
}
var P_DIRTY: CInt {
  get {
    return
  }
}
var VQ_FLAG8000: CInt {
  get {
    return
  }
}
var P_DEPENDENCY_CAPABLE: CInt {
  get {
    return
  }
}
var VQ_FLAG4000: CInt {
  get {
    return
  }
}
var P_DELAYIDLESLEEP: CInt {
  get {
    return
  }
}
var VQ_FLAG2000: CInt {
  get {
    return
  }
}
var VQ_FLAG1000: CInt {
  get {
    return
  }
}
var P_CONTROLT: CInt {
  get {
    return
  }
}
var VQ_DEAD: CInt {
  get {
    return
  }
}
var PTHREAD_PROCESS_SHARED: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_EXTENDED_ATTR: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_EXCHANGEDATA: CInt {
  get {
    return
  }
}
var PTHREAD_PROCESS_PRIVATE: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_COPYFILE: CInt {
  get {
    return
  }
}
var PTHREAD_PRIO_PROTECT: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_ATTRLIST: CInt {
  get {
    return
  }
}
var PTHREAD_PRIO_NONE: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_ALLOCATE: CInt {
  get {
    return
  }
}
var PTHREAD_PRIO_INHERIT: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_ADVLOCK: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_ZERO_RUNS: CInt {
  get {
    return
  }
}
var PTHREAD_MUTEX_RECURSIVE: CInt {
  get {
    return
  }
}
var VOL_CAP_FMT_SYMBOLICLINKS: CInt {
  get {
    return
  }
}
var PTHREAD_MUTEX_NORMAL: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_SEARCHFS: CInt {
  get {
    return
  }
}
var PTTYBLOCK: CInt {
  get {
    return
  }
}
var PTRDIFF_MAX: CLongLong {
  get {
    return
  }
}
var VOL_CAP_INT_READDIRATTR: CInt {
  get {
    return
  }
}
var PTHREAD_STACK_MIN: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_NFSEXPORT: CInt {
  get {
    return
  }
}
var PTHREAD_SCOPE_SYSTEM: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_NAMEDSTREAMS: CInt {
  get {
    return
  }
}
var PTHREAD_SCOPE_PROCESS: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_MANLOCK: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_FLOCK: CInt {
  get {
    return
  }
}
var VOL_CAP_INT_EXTENDED_SECURITY: CInt {
  get {
    return
  }
}
var PROC_PIDTBSDINFO: CInt {
  get {
    return
  }
}
var PROC_PIDTHREADID64INFO: CInt {
  get {
    return
  }
}
var VM_PURGABLE_ORDERING_SHIFT: CInt {
  get {
    return
  }
}
var VM_PURGABLE_NO_AGING_SHIFT: CInt {
  get {
    return
  }
}
var PROC_PIDTASKINFO: CInt {
  get {
    return
  }
}
var PROC_PIDT_SHORTBSDINFO: CInt {
  get {
    return
  }
}
var VM_PURGABLE_VOLATILE: CInt {
  get {
    return
  }
}
var VM_REGION_BASIC_INFO: CInt {
  get {
    return
  }
}
var PROC_PIDVNODEPATHINFO: CInt {
  get {
    return
  }
}
var VM_REGION_BASIC_INFO_64: CInt {
  get {
    return
  }
}
var PROC_PIDTHREADINFO: CInt {
  get {
    return
  }
}
var VM_PURGABLE_STATE_MASK: CInt {
  get {
    return
  }
}
var VM_PURGABLE_STATE_MAX: CInt {
  get {
    return
  }
}
var PROC_PIDTHREADPATHINFO: CInt {
  get {
    return
  }
}
var VM_PURGABLE_STATE_MIN: CInt {
  get {
    return
  }
}
var PROC_PIDLISTTHREADS: CInt {
  get {
    return
  }
}
var VM_PURGABLE_BEHAVIOR_SHIFT: CInt {
  get {
    return
  }
}
var VM_PROT_ZF: CInt {
  get {
    return
  }
}
var PROC_PIDLISTFDS: CInt {
  get {
    return
  }
}
var PROC_PIDLISTFILEPORTS: CInt {
  get {
    return
  }
}
var VM_PURGABLE_EMPTY: CInt {
  get {
    return
  }
}
var PROC_PIDREGIONPATHINFO: CInt {
  get {
    return
  }
}
var VM_PURGABLE_NONVOLATILE: CInt {
  get {
    return
  }
}
var PROC_PIDTASKALLINFO: CInt {
  get {
    return
  }
}
var PROC_PIDPATHINFO: CInt {
  get {
    return
  }
}
var PROC_PIDPATHINFO_SIZE: CInt {
  get {
    return
  }
}
var VM_PURGABLE_DEBUG_SHIFT: CInt {
  get {
    return
  }
}
var PROC_PIDREGIONINFO: CInt {
  get {
    return
  }
}
var VM_PURGABLE_DENY: CInt {
  get {
    return
  }
}
var PROX_FDTYPE_PIPE: CInt {
  get {
    return
  }
}
var PROX_FDTYPE_KQUEUE: CInt {
  get {
    return
  }
}
var PROX_FDTYPE_PSHM: CInt {
  get {
    return
  }
}
var PROX_FDTYPE_PSEM: CInt {
  get {
    return
  }
}
var PROT_WRITE: CInt {
  get {
    return
  }
}
var PROT_READ: CInt {
  get {
    return
  }
}
var VM_SWAPUSAGE: CInt {
  get {
    return
  }
}
var PROT_NONE: CInt {
  get {
    return
  }
}
var PROX_FDTYPE_FSEVENTS: CInt {
  get {
    return
  }
}
var PROX_FDTYPE_ATALK: CInt {
  get {
    return
  }
}
var PSEM_DEFINED: CInt {
  get {
    return
  }
}
var PSEM_ALLOCATED: CInt {
  get {
    return
  }
}
var PSEM_INDELETE: CInt {
  get {
    return
  }
}
var PSEM_INCREATE: CInt {
  get {
    return
  }
}
var PROX_FDTYPE_VNODE: CInt {
  get {
    return
  }
}
var PROX_FDTYPE_SOCKET: CInt {
  get {
    return
  }
}
var PSEMNAMLEN: CInt {
  get {
    return
  }
}
var PROC_REGION_SHARED: CInt {
  get {
    return
  }
}
var PROC_PPID_ONLY: CInt {
  get {
    return
  }
}
var PROC_RUID_ONLY: CInt {
  get {
    return
  }
}
var PROC_REGION_SUBMAP: CInt {
  get {
    return
  }
}
var VM_REGION_EXTENDED_INFO: CInt {
  get {
    return
  }
}
var PROC_PIDWORKQUEUEINFO: CInt {
  get {
    return
  }
}
var PROC_PID_RUSAGE_SIZE: CInt {
  get {
    return
  }
}
var VM_REGION_INFO_MAX: CInt {
  get {
    return
  }
}
var PROC_PID_RUSAGE: CInt {
  get {
    return
  }
}
var VM_REGION_TOP_INFO: CInt {
  get {
    return
  }
}
var PROC_TTY_ONLY: CInt {
  get {
    return
  }
}
var PROC_SELFSET_VMRSRCOWNER: CInt {
  get {
    return
  }
}
var PROT_EXEC: CInt {
  get {
    return
  }
}
var PROC_UID_ONLY: CInt {
  get {
    return
  }
}
var PROC_SELFSET_PCONTROL: CInt {
  get {
    return
  }
}
var PROC_SELFSET_DELAYIDLESLEEP: CInt {
  get {
    return
  }
}
var PROC_SELFSET_THREADNAME: CInt {
  get {
    return
  }
}
var TR_BREALLOC: CInt {
  get {
    return
  }
}
var O_EVTONLY: CInt {
  get {
    return
  }
}
var O_EXCL: CInt {
  get {
    return
  }
}
var TR_BRELSE: CInt {
  get {
    return
  }
}
var O_EXLOCK: CInt {
  get {
    return
  }
}
var O_DP_GETRAWENCRYPTED: CInt {
  get {
    return
  }
}
var TR_BREADMISS: CInt {
  get {
    return
  }
}
var TR_BREADMISSRA: CInt {
  get {
    return
  }
}
var O_NOCTTY: CInt {
  get {
    return
  }
}
var TR_EWAITMEM: CInt {
  get {
    return
  }
}
var O_NOFOLLOW: CInt {
  get {
    return
  }
}
var O_NONBLOCK: CInt {
  get {
    return
  }
}
var TR_EXFOD: CInt {
  get {
    return
  }
}
var TR_BWRITE: CInt {
  get {
    return
  }
}
var O_NDELAY: CInt {
  get {
    return
  }
}
var TR_CACHEFOD: CInt {
  get {
    return
  }
}
var TR_EINTRANS: CInt {
  get {
    return
  }
}
var O_ACCMODE: CInt {
  get {
    return
  }
}
var TRAP_BRKPT: CInt {
  get {
    return
  }
}
var O_ALERT: CInt {
  get {
    return
  }
}
var TRAP_TRACE: CInt {
  get {
    return
  }
}
var OVERRIDE_UNKNOWN_PERMISSIONS: CInt {
  get {
    return
  }
}
var OXTABS: CInt {
  get {
    return
  }
}
var TRY_AGAIN: CInt {
  get {
    return
  }
}
var O_CREAT: CInt {
  get {
    return
  }
}
var TR_BREADHIT: CInt {
  get {
    return
  }
}
var O_DIRECTORY: CInt {
  get {
    return
  }
}
var TR_BREADHITRA: CInt {
  get {
    return
  }
}
var O_APPEND: CInt {
  get {
    return
  }
}
var O_ASYNC: CInt {
  get {
    return
  }
}
var TRCSIZ: CInt {
  get {
    return
  }
}
var O_CLOEXEC: CInt {
  get {
    return
  }
}
var PAGE_MAX_SHIFT: CInt {
  get {
    return
  }
}
var TR_XFODHIT: CInt {
  get {
    return
  }
}
var TR_WAITMEM: CInt {
  get {
    return
  }
}
var TR_XFODMISS: CInt {
  get {
    return
  }
}
var PAGE_MAX_SIZE: CInt {
  get {
    return
  }
}
var TR_VADVISE: CInt {
  get {
    return
  }
}
var PAD_NOTATTR: CInt {
  get {
    return
  }
}
var TR_VRFOD: CInt {
  get {
    return
  }
}
var PAGE_MIN_SIZE: CInt {
  get {
    return
  }
}
var TR_ZFOD: CInt {
  get {
    return
  }
}
var TSI_S_CLOSED: CInt {
  get {
    return
  }
}
var PAGE_SHIFT: CInt {
  get {
    return
  }
}
var TSGID: CInt {
  get {
    return
  }
}
var TR_XIFREC: CInt {
  get {
    return
  }
}
var TR_XSFREC: CInt {
  get {
    return
  }
}
var PAGE_MIN_SHIFT: CInt {
  get {
    return
  }
}
var TR_MALL: CInt {
  get {
    return
  }
}
var O_RDWR: CInt {
  get {
    return
  }
}
var TR_PGINDONE: CInt {
  get {
    return
  }
}
var O_SHLOCK: CInt {
  get {
    return
  }
}
var TR_NFLAGS: CInt {
  get {
    return
  }
}
var O_POPUP: CUnsignedInt {
  get {
    return
  }
}
var TR_FRECLAIM: CInt {
  get {
    return
  }
}
var O_RDONLY: CInt {
  get {
    return
  }
}
var TR_INTRANS: CInt {
  get {
    return
  }
}
var TR_SWAPIN: CInt {
  get {
    return
  }
}
var O_WRONLY: CInt {
  get {
    return
  }
}
var PAD_FAILURE: CInt {
  get {
    return
  }
}
var TR_SWAPIO: CInt {
  get {
    return
  }
}
var O_SYMLINK: CInt {
  get {
    return
  }
}
var O_TRUNC: CInt {
  get {
    return
  }
}
var TR_STAMP: CInt {
  get {
    return
  }
}
var TR_RECLAIM: CInt {
  get {
    return
  }
}
var PF_CHAOS: CInt {
  get {
    return
  }
}
var TSI_T_2MSL: CInt {
  get {
    return
  }
}
var TSI_T_KEEP: CInt {
  get {
    return
  }
}
var TSI_S__CLOSE_WAIT: CInt {
  get {
    return
  }
}
var PF_CCITT: CInt {
  get {
    return
  }
}
var TSI_S_TIME_WAIT: CInt {
  get {
    return
  }
}
var TSI_S_SYN_SENT: CInt {
  get {
    return
  }
}
var PERSIST_TIMEOUT: CInt {
  get {
    return
  }
}
var PF_APPLETALK: CInt {
  get {
    return
  }
}
var PF_DLI: CInt {
  get {
    return
  }
}
var TSUID: CInt {
  get {
    return
  }
}
var PF_DECnet: CInt {
  get {
    return
  }
}
var TSI_T_REXMT: CInt {
  get {
    return
  }
}
var PF_DATAKIT: CInt {
  get {
    return
  }
}
var TSI_T_PERSIST: CInt {
  get {
    return
  }
}
var PF_CNT: CInt {
  get {
    return
  }
}
var PF_COIP: CInt {
  get {
    return
  }
}
var TSI_T_NTIMERS: CInt {
  get {
    return
  }
}
var PASS_MAX: CInt {
  get {
    return
  }
}
var TSI_S_FIN_WAIT_2: CInt {
  get {
    return
  }
}
var PARODD: CInt {
  get {
    return
  }
}
var TSI_S_FIN_WAIT_1: CInt {
  get {
    return
  }
}
var PARMRK: CInt {
  get {
    return
  }
}
var TSI_S_ESTABLISHED: CInt {
  get {
    return
  }
}
var PAGE_SIZE: CInt {
  get {
    return
  }
}
var PARENB: CInt {
  get {
    return
  }
}
var PENDIN: CInt {
  get {
    return
  }
}
var TSI_S_SYN_RECEIVED: CInt {
  get {
    return
  }
}
var TSI_S_CLOSING: CInt {
  get {
    return
  }
}
var PDROP: CInt {
  get {
    return
  }
}
var TSI_S_RESERVED: CInt {
  get {
    return
  }
}
var PDP_ENDIAN: CInt {
  get {
    return
  }
}
var TSI_S_LISTEN: CInt {
  get {
    return
  }
}
var PATH_MAX: CInt {
  get {
    return
  }
}
var TSI_S_LAST_ACK: CInt {
  get {
    return
  }
}
var PCATCH: CInt {
  get {
    return
  }
}
var PF_NDRV: CInt {
  get {
    return
  }
}
var TS_LNCH: CInt {
  get {
    return
  }
}
var PF_NATM: CInt {
  get {
    return
  }
}
var TS_ISOPEN: CInt {
  get {
    return
  }
}
var PF_MAX: CInt {
  get {
    return
  }
}
var TS_IOCTL_NOT_OK: CInt {
  get {
    return
  }
}
var PF_LOCAL: CInt {
  get {
    return
  }
}
var TS_FLUSH: CInt {
  get {
    return
  }
}
var PF_LINK: CInt {
  get {
    return
  }
}
var PF_PUP: CInt {
  get {
    return
  }
}
var TS_TBLOCK: CInt {
  get {
    return
  }
}
var PF_PPP: CInt {
  get {
    return
  }
}
var TS_SO_OLOWAT: CInt {
  get {
    return
  }
}
var PF_PIP: CInt {
  get {
    return
  }
}
var TS_SO_OCOMPLETE: CInt {
  get {
    return
  }
}
var PF_OSI: CInt {
  get {
    return
  }
}
var PF_NS: CInt {
  get {
    return
  }
}
var TS_SNOOP: CInt {
  get {
    return
  }
}
var PF_NETBIOS: CInt {
  get {
    return
  }
}
var PF_INET6: CInt {
  get {
    return
  }
}
var TS_CAN_BYPASS_L_RINT: CInt {
  get {
    return
  }
}
var PF_INET: CInt {
  get {
    return
  }
}
var TS_BUSY: CInt {
  get {
    return
  }
}
var TS_BKSL: CInt {
  get {
    return
  }
}
var PF_IMPLINK: CInt {
  get {
    return
  }
}
var PF_HYLINK: CInt {
  get {
    return
  }
}
var TS_ASYNC: CInt {
  get {
    return
  }
}
var PF_ECMA: CInt {
  get {
    return
  }
}
var TSVTX: CInt {
  get {
    return
  }
}
var TS_ERASE: CInt {
  get {
    return
  }
}
var PF_LAT: CInt {
  get {
    return
  }
}
var PF_KEY: CInt {
  get {
    return
  }
}
var TS_CONNECTED: CInt {
  get {
    return
  }
}
var TS_CNTTB: CInt {
  get {
    return
  }
}
var PF_ISO: CInt {
  get {
    return
  }
}
var PF_ISDN: CInt {
  get {
    return
  }
}
var TS_CAR_OFLOW: CInt {
  get {
    return
  }
}
var PF_IPX: CInt {
  get {
    return
  }
}
var TIOCM_DTR: CInt {
  get {
    return
  }
}
var OPEN_MAX: CInt {
  get {
    return
  }
}
var OPOST: CInt {
  get {
    return
  }
}
var TIOCM_LE: CInt {
  get {
    return
  }
}
var TS_CARR_ON: CInt {
  get {
    return
  }
}
var ORDINARY: CInt {
  get {
    return
  }
}
var TIOCM_RI: CInt {
  get {
    return
  }
}
var TIOCM_RNG: CInt {
  get {
    return
  }
}
var TIOCM_RTS: CInt {
  get {
    return
  }
}
var TIOCM_SR: CInt {
  get {
    return
  }
}
var TIOCM_ST: CInt {
  get {
    return
  }
}
var OLDROUTINENAMES: CInt {
  get {
    return
  }
}
var OLD_TIME: CInt {
  get {
    return
  }
}
var ONLCR: CInt {
  get {
    return
  }
}
var ONLRET: CInt {
  get {
    return
  }
}
var ONOCR: CInt {
  get {
    return
  }
}
var TIOCM_CAR: CInt {
  get {
    return
  }
}
var ONOEOT: CInt {
  get {
    return
  }
}
var TIOCM_CD: CInt {
  get {
    return
  }
}
var OPAQUE_TOOLBOX_STRUCTS: CInt {
  get {
    return
  }
}
var TIOCM_CTS: CInt {
  get {
    return
  }
}
var OPAQUE_UPP_TYPES: CInt {
  get {
    return
  }
}
var TIOCM_DSR: CInt {
  get {
    return
  }
}
var TIOCPKT_STOP: CInt {
  get {
    return
  }
}
var TIOCPKT_DATA: CInt {
  get {
    return
  }
}
var TIOCPKT_DOSTOP: CInt {
  get {
    return
  }
}
var TIOCPKT_FLUSHREAD: CInt {
  get {
    return
  }
}
var TIOCPKT_FLUSHWRITE: CInt {
  get {
    return
  }
}
var TIOCPKT_IOCTL: CInt {
  get {
    return
  }
}
var TIOCPKT_NOSTOP: CInt {
  get {
    return
  }
}
var TIOCPKT_START: CInt {
  get {
    return
  }
}
var TMAGIC: CString {
  get {
    return
  }
}
var TLOSS: CInt {
  get {
    return
  }
}
var TMP_MAX: CInt {
  get {
    return
  }
}
var TOEXEC: CInt {
  get {
    return
  }
}
var TMAGLEN: CInt {
  get {
    return
  }
}
var OVERFLOW: CInt {
  get {
    return
  }
}
var OS_SPINLOCK_INIT: CInt {
  get {
    return
  }
}
var TOREAD: CInt {
  get {
    return
  }
}
var TOSTOP: CInt {
  get {
    return
  }
}
var TOWRITE: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_SETSIGMASK: CInt {
  get {
    return
  }
}
var USER_LINE_MAX: CInt {
  get {
    return
  }
}
var USER_MAXID: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_START_SUSPENDED: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_SETPGROUP: CInt {
  get {
    return
  }
}
var USER_DATA_SELECTOR: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_SETSIGDEF: CInt {
  get {
    return
  }
}
var USER_EXPR_NEST_MAX: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_RESETIDS: CInt {
  get {
    return
  }
}
var USER_COLL_WEIGHTS_MAX: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_SETEXEC: CInt {
  get {
    return
  }
}
var USER_CS_PATH: CInt {
  get {
    return
  }
}
var USER_BC_STRING_MAX: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_PCONTROL_SUSPEND: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_PCONTROL_THROTTLE: CInt {
  get {
    return
  }
}
var USER_CODE_SELECTOR: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_PCONTROL_KILL: CInt {
  get {
    return
  }
}
var USER_BC_DIM_MAX: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_PCONTROL_NONE: CInt {
  get {
    return
  }
}
var USER_BC_SCALE_MAX: CInt {
  get {
    return
  }
}
var POSIX_MADV_WILLNEED: CInt {
  get {
    return
  }
}
var POSIX_SPAWN_CLOEXEC_DEFAULT: CInt {
  get {
    return
  }
}
var USER_BC_BASE_MAX: CInt {
  get {
    return
  }
}
var POSIX_MADV_RANDOM: CInt {
  get {
    return
  }
}
var POSIX_MADV_SEQUENTIAL: CInt {
  get {
    return
  }
}
var UQUAD_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var POSIX_MADV_DONTNEED: CInt {
  get {
    return
  }
}
var POSIX_MADV_NORMAL: CInt {
  get {
    return
  }
}
var PRIO_DARWIN_NONUI: CInt {
  get {
    return
  }
}
var PRIO_DARWIN_PROCESS: CInt {
  get {
    return
  }
}
var PRIMASK: CInt {
  get {
    return
  }
}
var USHRT_MAX: CInt {
  get {
    return
  }
}
var USRQUOTA: CInt {
  get {
    return
  }
}
var PRIO_DARWIN_BG: CInt {
  get {
    return
  }
}
var USER_STREAM_MAX: CInt {
  get {
    return
  }
}
var PRAGMA_STRUCT_PACK: CInt {
  get {
    return
  }
}
var PRIBIO: CInt {
  get {
    return
  }
}
var USER_TZNAME_MAX: CInt {
  get {
    return
  }
}
var USER_RE_DUP_MAX: CInt {
  get {
    return
  }
}
var PRAGMA_STRUCT_PACKPUSH: CInt {
  get {
    return
  }
}
var USER_POSIX2_VERSION: CInt {
  get {
    return
  }
}
var PRAGMA_ONCE: CInt {
  get {
    return
  }
}
var PRAGMA_STRUCT_ALIGN: CInt {
  get {
    return
  }
}
var USER_PROCESS: CInt {
  get {
    return
  }
}
var PRAGMA_ENUM_PACK: CInt {
  get {
    return
  }
}
var USER_POSIX2_SW_DEV: CInt {
  get {
    return
  }
}
var PRAGMA_IMPORT: CInt {
  get {
    return
  }
}
var USER_POSIX2_UPE: CInt {
  get {
    return
  }
}
var PRAGMA_ENUM_ALWAYSINT: CInt {
  get {
    return
  }
}
var USER_POSIX2_FORT_RUN: CInt {
  get {
    return
  }
}
var PRAGMA_ENUM_OPTIONS: CInt {
  get {
    return
  }
}
var USER_POSIX2_LOCALEDEF: CInt {
  get {
    return
  }
}
var PPPDISC: CInt {
  get {
    return
  }
}
var USER_POSIX2_C_DEV: CInt {
  get {
    return
  }
}
var PPAUSE: CInt {
  get {
    return
  }
}
var USER_POSIX2_FORT_DEV: CInt {
  get {
    return
  }
}
var USER_POSIX2_CHAR_TERM: CInt {
  get {
    return
  }
}
var PPNUM_MAX: CUnsignedInt {
  get {
    return
  }
}
var USER_POSIX2_C_BIND: CInt {
  get {
    return
  }
}
var VFS_CTL_QUERY: CInt {
  get {
    return
  }
}
var VFS_CTL_NSTATUS: CInt {
  get {
    return
  }
}
var PRIXLEAST32: CString {
  get {
    return
  }
}
var VFS_CTL_NOLOCKS: CInt {
  get {
    return
  }
}
var PRIXLEAST16: CString {
  get {
    return
  }
}
var VFS_CTL_NEWADDR: CInt {
  get {
    return
  }
}
var VFS_CONF: CInt {
  get {
    return
  }
}
var VFS_CTL_DISC: CInt {
  get {
    return
  }
}
var VERASE: CInt {
  get {
    return
  }
}
var VEOL2: CInt {
  get {
    return
  }
}
var PRIXFAST32: CString {
  get {
    return
  }
}
var PRIXFAST16: CString {
  get {
    return
  }
}
var VDSUSP: CInt {
  get {
    return
  }
}
var VEOL: CInt {
  get {
    return
  }
}
var VEOF: CInt {
  get {
    return
  }
}
var PRIX32: CString {
  get {
    return
  }
}
var VDISCARD: CInt {
  get {
    return
  }
}
var PRIX16: CString {
  get {
    return
  }
}
var PRIO_USER: CInt {
  get {
    return
  }
}
var PRIO_PGRP: CInt {
  get {
    return
  }
}
var UTMPX_FILE: CString {
  get {
    return
  }
}
var PRIO_PROCESS: CInt {
  get {
    return
  }
}
var PRIO_MIN: CInt {
  get {
    return
  }
}
var UTMPX_DEAD_IF_CORRESPONDING_MASK: CInt {
  get {
    return
  }
}
var PRIO_MAX: CInt {
  get {
    return
  }
}
var UTMPX_CHANGE_NOTIFICATION: CString {
  get {
    return
  }
}
var PRIO_DARWIN_THREAD: CInt {
  get {
    return
  }
}
var UTMPX_AUTOFILL_MASK: CInt {
  get {
    return
  }
}
var PRIiFAST16: CString {
  get {
    return
  }
}
var PRIi32: CString {
  get {
    return
  }
}
var PRIi16: CString {
  get {
    return
  }
}
var PRIdPTR: CString {
  get {
    return
  }
}
var VMIN: CInt {
  get {
    return
  }
}
var VLNEXT: CInt {
  get {
    return
  }
}
var VKILL: CInt {
  get {
    return
  }
}
var VINTR: CInt {
  get {
    return
  }
}
var PRIdLEAST32: CString {
  get {
    return
  }
}
var PRIdLEAST16: CString {
  get {
    return
  }
}
var VFS_NUMMNTOPS: CInt {
  get {
    return
  }
}
var VFS_MAXTYPENUM: CInt {
  get {
    return
  }
}
var VFS_GENERIC: CInt {
  get {
    return
  }
}
var PRIdFAST32: CString {
  get {
    return
  }
}
var VFS_CTL_VERS1: CInt {
  get {
    return
  }
}
var PRIdFAST16: CString {
  get {
    return
  }
}
var VFS_CTL_UMOUNT: CInt {
  get {
    return
  }
}
var VFS_CTL_TIMEO: CInt {
  get {
    return
  }
}
var VFS_CTL_STATFS: CInt {
  get {
    return
  }
}
var PRId32: CString {
  get {
    return
  }
}
var PRId16: CString {
  get {
    return
  }
}
var VFS_CTL_SERVERINFO: CInt {
  get {
    return
  }
}
var PRIXPTR: CString {
  get {
    return
  }
}
var VFS_CTL_SADDR: CInt {
  get {
    return
  }
}
var PIPE_ASYNC: CInt {
  get {
    return
  }
}
var PIPE_BUF: CInt {
  get {
    return
  }
}
var TTY_FE: CInt {
  get {
    return
  }
}
var TTY_ERRORMASK: CUnsignedInt {
  get {
    return
  }
}
var PIPE_DEAD: CInt {
  get {
    return
  }
}
var TTY_OE: CInt {
  get {
    return
  }
}
var TTY_PE: CInt {
  get {
    return
  }
}
var PIPE_DIRECTOK: CInt {
  get {
    return
  }
}
var TTY_QUOTE: CInt {
  get {
    return
  }
}
var PF_XTP: CInt {
  get {
    return
  }
}
var TTYDEF_SPEED: CInt {
  get {
    return
  }
}
var PGSHIFT: CInt {
  get {
    return
  }
}
var PINOD: CInt {
  get {
    return
  }
}
var TTY_BI: CInt {
  get {
    return
  }
}
var TTYDISC: CInt {
  get {
    return
  }
}
var TTY_CHARMASK: CInt {
  get {
    return
  }
}
var PF_SYSTEM: CInt {
  get {
    return
  }
}
var TTCP_CLIENT_SND_WND: CInt {
  get {
    return
  }
}
var PF_UNIX: CInt {
  get {
    return
  }
}
var PF_UNSPEC: CInt {
  get {
    return
  }
}
var PF_UTUN: CInt {
  get {
    return
  }
}
var TS_TIMEOUT: CInt {
  get {
    return
  }
}
var PF_RESERVED_36: CInt {
  get {
    return
  }
}
var TS_TTSTOP: CInt {
  get {
    return
  }
}
var PF_ROUTE: CInt {
  get {
    return
  }
}
var TS_TYPEN: CInt {
  get {
    return
  }
}
var PF_RTIP: CInt {
  get {
    return
  }
}
var PF_SIP: CInt {
  get {
    return
  }
}
var TS_XCLUDE: CInt {
  get {
    return
  }
}
var PF_SNA: CInt {
  get {
    return
  }
}
var PLOSS: CInt {
  get {
    return
  }
}
var UF_APPEND: CInt {
  get {
    return
  }
}
var TS_ZOMBIE: CInt {
  get {
    return
  }
}
var PLOCK: CInt {
  get {
    return
  }
}
var PM_STR: CInt {
  get {
    return
  }
}
var UF_COMPRESSED: CInt {
  get {
    return
  }
}
var UF_HIDDEN: CInt {
  get {
    return
  }
}
var POLICY_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var UF_IMMUTABLE: CInt {
  get {
    return
  }
}
var PIPE_WANT: CInt {
  get {
    return
  }
}
var TYPE_LONGDOUBLE_IS_DOUBLE: CInt {
  get {
    return
  }
}
var PIPE_WANTR: CInt {
  get {
    return
  }
}
var TYPE_LONGLONG: CInt {
  get {
    return
  }
}
var T_FMT_AMPM: CInt {
  get {
    return
  }
}
var PIPE_WANTW: CInt {
  get {
    return
  }
}
var T_FMT: CInt {
  get {
    return
  }
}
var UCHAR_MAX: CInt {
  get {
    return
  }
}
var PIPE_WSELECT: CInt {
  get {
    return
  }
}
var PIPE_LOCKFL: CInt {
  get {
    return
  }
}
var PIPE_LWANT: CInt {
  get {
    return
  }
}
var PIPE_MINDIRECT: CInt {
  get {
    return
  }
}
var TYPE_BOOL: CInt {
  get {
    return
  }
}
var PIPE_SIZE: CInt {
  get {
    return
  }
}
var PIPE_SEL: CInt {
  get {
    return
  }
}
var TYPE_EXTENDED: CInt {
  get {
    return
  }
}
var PIPE_DRAIN: CInt {
  get {
    return
  }
}
var PIPE_DIRECTW: CInt {
  get {
    return
  }
}
var TUEXEC: CInt {
  get {
    return
  }
}
var PIPE_EOF: CInt {
  get {
    return
  }
}
var TUREAD: CInt {
  get {
    return
  }
}
var PIPE_KNOTE: CInt {
  get {
    return
  }
}
var TVERSION: CString {
  get {
    return
  }
}
var TUWRITE: CInt {
  get {
    return
  }
}
var TVERSLEN: CInt {
  get {
    return
  }
}
var UINTPTR_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var POLLATTRIB: CInt {
  get {
    return
  }
}
var UINTMAX_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var POLLEXTEND: CInt {
  get {
    return
  }
}
var POLLHUP: CInt {
  get {
    return
  }
}
var POLLERR: CInt {
  get {
    return
  }
}
var UINT_FAST16_MAX: CInt {
  get {
    return
  }
}
var UINT_FAST32_MAX: CUnsignedInt {
  get {
    return
  }
}
var POLICY_TIMESHARE: CInt {
  get {
    return
  }
}
var UINT64_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var UINT8_MAX: CInt {
  get {
    return
  }
}
var POLICY_RR: CInt {
  get {
    return
  }
}
var UINT16_MAX: CInt {
  get {
    return
  }
}
var POLICY_NULL: CInt {
  get {
    return
  }
}
var UINT32_MAX: CUnsignedInt {
  get {
    return
  }
}
var UF_OPAQUE: CInt {
  get {
    return
  }
}
var UF_SETTABLE: CInt {
  get {
    return
  }
}
var UF_NODUMP: CInt {
  get {
    return
  }
}
var POLICY_FIFO: CInt {
  get {
    return
  }
}
var UID_MAX: CUnsignedInt {
  get {
    return
  }
}
var UF_TRACKED: CInt {
  get {
    return
  }
}
var POLL_OUT: CInt {
  get {
    return
  }
}
var POLL_MSG: CInt {
  get {
    return
  }
}
var UNDERFLOW: CInt {
  get {
    return
  }
}
var UNIVERSAL_INTERFACES_VERSION: CInt {
  get {
    return
  }
}
var POLL_PRI: CInt {
  get {
    return
  }
}
var UL_GETFSIZE: CInt {
  get {
    return
  }
}
var POLLWRNORM: CInt {
  get {
    return
  }
}
var ULONG_MAX: CUnsignedLong {
  get {
    return
  }
}
var POLLWRITE: CInt {
  get {
    return
  }
}
var POLL_IN: CInt {
  get {
    return
  }
}
var POLL_HUP: CInt {
  get {
    return
  }
}
var UL_SETFSIZE: CInt {
  get {
    return
  }
}
var POLL_ERR: CInt {
  get {
    return
  }
}
var POLLRDNORM: CInt {
  get {
    return
  }
}
var UINT_MAX: CUnsignedInt {
  get {
    return
  }
}
var POLLRDBAND: CInt {
  get {
    return
  }
}
var UINT_LEAST8_MAX: CInt {
  get {
    return
  }
}
var POLLWRBAND: CInt {
  get {
    return
  }
}
var ULLONG_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var POLLNLINK: CInt {
  get {
    return
  }
}
var UINT_LEAST16_MAX: CInt {
  get {
    return
  }
}
var POLLIN: CInt {
  get {
    return
  }
}
var UINT_FAST8_MAX: CInt {
  get {
    return
  }
}
var UINT_FAST64_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var POLLPRI: CInt {
  get {
    return
  }
}
var POLLOUT: CInt {
  get {
    return
  }
}
var UINT_LEAST64_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var UINT_LEAST32_MAX: CUnsignedInt {
  get {
    return
  }
}
var POLLNVAL: CInt {
  get {
    return
  }
}
var MSG_DONTROUTE: CInt {
  get {
    return
  }
}
var TASK_AFFINITY_TAG_INFO: CInt {
  get {
    return
  }
}
var MSG_DONTWAIT: CInt {
  get {
    return
  }
}
var MPO_STRICT: CInt {
  get {
    return
  }
}
var MPO_TEMPOWNER: CInt {
  get {
    return
  }
}
var MSG_CTRUNC: CInt {
  get {
    return
  }
}
var MSG_FLUSH: CInt {
  get {
    return
  }
}
var TASK_ACCESS_PORT: CInt {
  get {
    return
  }
}
var MSG_HAVEMORE: CInt {
  get {
    return
  }
}
var TASK_BASE_LATENCY_QOS_POLICY: CInt {
  get {
    return
  }
}
var MSG_HOLD: CInt {
  get {
    return
  }
}
var MSG_EOF: CInt {
  get {
    return
  }
}
var MSG_EOR: CInt {
  get {
    return
  }
}
var TASK_AUDIT_TOKEN: CInt {
  get {
    return
  }
}
var MSG_NOERROR: CInt {
  get {
    return
  }
}
var TASK_BASIC2_INFO_32: CInt {
  get {
    return
  }
}
var MSG_OOB: CInt {
  get {
    return
  }
}
var TASK_BASIC_INFO: CInt {
  get {
    return
  }
}
var TASK_BASE_QOS_POLICY: CInt {
  get {
    return
  }
}
var TASK_BASE_THROUGHPUT_QOS_POLICY: CInt {
  get {
    return
  }
}
var MSG_MAGIC: CInt {
  get {
    return
  }
}
var MSG_NEEDSA: CInt {
  get {
    return
  }
}
var TASK_BASIC_INFO_64: CInt {
  get {
    return
  }
}
var MSG_TRUNC: CInt {
  get {
    return
  }
}
var MSG_WAITALL: CInt {
  get {
    return
  }
}
var MSG_PEEK: CInt {
  get {
    return
  }
}
var MSG_RCVMORE: CInt {
  get {
    return
  }
}
var TASK_BASIC_INFO_32: CInt {
  get {
    return
  }
}
var MSG_SEND: CInt {
  get {
    return
  }
}
var MSIZESHIFT: CInt {
  get {
    return
  }
}
var TASK_CATEGORY_POLICY: CInt {
  get {
    return
  }
}
var MS_ASYNC: CInt {
  get {
    return
  }
}
var MS_DEACTIVATE: CInt {
  get {
    return
  }
}
var MSG_WAITSTREAM: CInt {
  get {
    return
  }
}
var TASK_BOOTSTRAP_PORT: CInt {
  get {
    return
  }
}
var TASK_DYLD_ALL_IMAGE_INFO_64: CInt {
  get {
    return
  }
}
var MS_SYNC: CInt {
  get {
    return
  }
}
var TASK_DYLD_INFO: CInt {
  get {
    return
  }
}
var MT_ATABLE: CInt {
  get {
    return
  }
}
var MS_INVALIDATE: CInt {
  get {
    return
  }
}
var TASK_DEBUG_CONTROL_PORT: CInt {
  get {
    return
  }
}
var MS_KILLPAGES: CInt {
  get {
    return
  }
}
var TASK_DYLD_ALL_IMAGE_INFO_32: CInt {
  get {
    return
  }
}
var MT_FTABLE: CInt {
  get {
    return
  }
}
var TASK_EXTMOD_INFO: CInt {
  get {
    return
  }
}
var MT_HEADER: CInt {
  get {
    return
  }
}
var MT_DATA: CInt {
  get {
    return
  }
}
var MT_CONTROL: CInt {
  get {
    return
  }
}
var MT_FREE: CInt {
  get {
    return
  }
}
var TASK_EVENTS_INFO: CInt {
  get {
    return
  }
}
var MT_OOBDATA: CInt {
  get {
    return
  }
}
var TASK_INFO_MAX: CInt {
  get {
    return
  }
}
var MT_PCB: CInt {
  get {
    return
  }
}
var MT_HTABLE: CInt {
  get {
    return
  }
}
var MT_MAX: CInt {
  get {
    return
  }
}
var MT_IFADDR: CInt {
  get {
    return
  }
}
var TASK_KERNELMEMORY_INFO: CInt {
  get {
    return
  }
}
var MT_SOOPTS: CInt {
  get {
    return
  }
}
var MT_SOCKET: CInt {
  get {
    return
  }
}
var MT_SONAME: CInt {
  get {
    return
  }
}
var MT_RTABLE: CInt {
  get {
    return
  }
}
var TASK_KERNEL_PORT: CInt {
  get {
    return
  }
}
var MT_RIGHTS: CInt {
  get {
    return
  }
}
var TASK_NAME_PORT: CInt {
  get {
    return
  }
}
var M_E: CDouble {
  get {
    return
  }
}
var TASK_HOST_PORT: CInt {
  get {
    return
  }
}
var M_2_PI: CDouble {
  get {
    return
  }
}
var TASK_PORT_REGISTER_MAX: CInt {
  get {
    return
  }
}
var M_2_SQRTPI: CDouble {
  get {
    return
  }
}
var TASK_OVERRIDE_QOS_POLICY: CInt {
  get {
    return
  }
}
var M_1_PI: CDouble {
  get {
    return
  }
}
var MT_TAG: CInt {
  get {
    return
  }
}
var M_PI: CDouble {
  get {
    return
  }
}
var M_LOG10E: CDouble {
  get {
    return
  }
}
var M_LOG2E: CDouble {
  get {
    return
  }
}
var M_LN2: CDouble {
  get {
    return
  }
}
var TASK_POWER_INFO_V2: CInt {
  get {
    return
  }
}
var M_LN10: CDouble {
  get {
    return
  }
}
var TASK_POWER_INFO: CInt {
  get {
    return
  }
}
var TASK_POLICY_STATE: CInt {
  get {
    return
  }
}
var TASK_SCHED_RR_INFO: CInt {
  get {
    return
  }
}
var TASK_SCHED_INFO: CInt {
  get {
    return
  }
}
var NAME_MAX: CInt {
  get {
    return
  }
}
var M_SQRT2: CDouble {
  get {
    return
  }
}
var M_PI_4: CDouble {
  get {
    return
  }
}
var M_SQRT1_2: CDouble {
  get {
    return
  }
}
var M_PI_2: CDouble {
  get {
    return
  }
}
var NBPG: CInt {
  get {
    return
  }
}
var NBBY: CInt {
  get {
    return
  }
}
var NA_CONTROL_ENTRY: CString {
  get {
    return
  }
}
var TASK_SEATBELT_PORT: CInt {
  get {
    return
  }
}
var NAME_SERVER_SLOT: CInt {
  get {
    return
  }
}
var TASK_SCHED_FIFO_INFO: CInt {
  get {
    return
  }
}
var TASK_TRACE_MEMORY_INFO: CInt {
  get {
    return
  }
}
var NCCS: CInt {
  get {
    return
  }
}
var TASK_SCHED_TIMESHARE_INFO: CInt {
  get {
    return
  }
}
var TASK_THREAD_TIMES_INFO: CInt {
  get {
    return
  }
}
var TASK_SECURITY_TOKEN: CInt {
  get {
    return
  }
}
var TASK_SUPPRESSION_POLICY: CInt {
  get {
    return
  }
}
var TASK_VM_INFO_PURGEABLE: CInt {
  get {
    return
  }
}
var TASK_VM_INFO: CInt {
  get {
    return
  }
}
var TCIFLUSH: CInt {
  get {
    return
  }
}
var TASK_WAIT_STATE_INFO: CInt {
  get {
    return
  }
}
var MM_APPL: CInt {
  get {
    return
  }
}
var TCIOFF: CInt {
  get {
    return
  }
}
var MM_CONSOLE: CInt {
  get {
    return
  }
}
var MM_ERROR: CInt {
  get {
    return
  }
}
var MM_FIRM: CInt {
  get {
    return
  }
}
var S_ISTXT: CInt {
  get {
    return
  }
}
var MM_HALT: CInt {
  get {
    return
  }
}
var S_ISUID: CInt {
  get {
    return
  }
}
var MM_HARD: CInt {
  get {
    return
  }
}
var S_ISVTX: CInt {
  get {
    return
  }
}
var MM_INFO: CInt {
  get {
    return
  }
}
var MM_NOCON: CInt {
  get {
    return
  }
}
var MM_NOMSG: CInt {
  get {
    return
  }
}
var S_IWGRP: CInt {
  get {
    return
  }
}
var MM_NOSEV: CInt {
  get {
    return
  }
}
var MM_NOTOK: CInt {
  get {
    return
  }
}
var S_IWUSR: CInt {
  get {
    return
  }
}
var S_IWRITE: CInt {
  get {
    return
  }
}
var MM_NRECOV: CInt {
  get {
    return
  }
}
var S_IXGRP: CInt {
  get {
    return
  }
}
var S_IXOTH: CInt {
  get {
    return
  }
}
var S_IXUSR: CInt {
  get {
    return
  }
}
var MM_NULLMC: CLong {
  get {
    return
  }
}
var MM_NULLSEV: CInt {
  get {
    return
  }
}
var MM_OK: CInt {
  get {
    return
  }
}
var TAB: CInt {
  get {
    return
  }
}
var MM_OPSYS: CInt {
  get {
    return
  }
}
var TAB0: CInt {
  get {
    return
  }
}
var MM_RECOVER: CInt {
  get {
    return
  }
}
var MM_PRINT: CInt {
  get {
    return
  }
}
var MM_SOFT: CInt {
  get {
    return
  }
}
var TAB2: CInt {
  get {
    return
  }
}
var TAB1: CInt {
  get {
    return
  }
}
var TAB3: CInt {
  get {
    return
  }
}
var MM_UTIL: CInt {
  get {
    return
  }
}
var TABDLY: CInt {
  get {
    return
  }
}
var S_IWOTH: CInt {
  get {
    return
  }
}
var TABLDISC: CInt {
  get {
    return
  }
}
var MM_WARNING: CInt {
  get {
    return
  }
}
var MNAMELEN: CInt {
  get {
    return
  }
}
var MNT_AUTOMOUNTED: CInt {
  get {
    return
  }
}
var MNT_ASYNC: CInt {
  get {
    return
  }
}
var MNT_CPROTECT: CInt {
  get {
    return
  }
}
var MNT_DEFWRITE: CInt {
  get {
    return
  }
}
var MNT_DONTBROWSE: CInt {
  get {
    return
  }
}
var MNT_DOVOLFS: CInt {
  get {
    return
  }
}
var MNT_DWAIT: CInt {
  get {
    return
  }
}
var MNT_FORCE: CInt {
  get {
    return
  }
}
var MNT_EXPORTED: CInt {
  get {
    return
  }
}
var MNT_IGNORE_OWNERSHIP: CInt {
  get {
    return
  }
}
var MNT_JOURNALED: CInt {
  get {
    return
  }
}
var MNT_MULTILABEL: CInt {
  get {
    return
  }
}
var MNT_LOCAL: CInt {
  get {
    return
  }
}
var MNT_NOBLOCK: CInt {
  get {
    return
  }
}
var MNT_NOATIME: CInt {
  get {
    return
  }
}
var MNT_NOEXEC: CInt {
  get {
    return
  }
}
var MNT_NOSUID: CInt {
  get {
    return
  }
}
var MNT_NODEV: CInt {
  get {
    return
  }
}
var MNT_NOWAIT: CInt {
  get {
    return
  }
}
var TARGET_API_MAC_CARBON: CInt {
  get {
    return
  }
}
var MNT_NOUSERXATTR: CInt {
  get {
    return
  }
}
var MNT_QUOTA: CInt {
  get {
    return
  }
}
var TARGET_API_MAC_OSX: CInt {
  get {
    return
  }
}
var TARGET_API_MAC_OS8: CInt {
  get {
    return
  }
}
var MNT_QUARANTINE: CInt {
  get {
    return
  }
}
var MNT_RELOAD: CInt {
  get {
    return
  }
}
var TARGET_CPU_68K: CInt {
  get {
    return
  }
}
var MNT_RDONLY: CInt {
  get {
    return
  }
}
var TARGET_CARBON: CInt {
  get {
    return
  }
}
var TARGET_CPU_ARM: CInt {
  get {
    return
  }
}
var MNT_UNION: CInt {
  get {
    return
  }
}
var MNT_ROOTFS: CInt {
  get {
    return
  }
}
var MNT_SYNCHRONOUS: CInt {
  get {
    return
  }
}
var TARGET_CPU_ALPHA: CInt {
  get {
    return
  }
}
var TARGET_CPU_MIPS: CInt {
  get {
    return
  }
}
var TARGET_CPU_ARM64: CInt {
  get {
    return
  }
}
var MNT_UNKNOWNPERMISSIONS: CInt {
  get {
    return
  }
}
var MNT_UPDATE: CInt {
  get {
    return
  }
}
var TARGET_CPU_PPC64: CInt {
  get {
    return
  }
}
var MNT_WAIT: CInt {
  get {
    return
  }
}
var TARGET_CPU_PPC: CInt {
  get {
    return
  }
}
var MON_11: CInt {
  get {
    return
  }
}
var TARGET_CPU_X86: CInt {
  get {
    return
  }
}
var MON_1: CInt {
  get {
    return
  }
}
var TARGET_CPU_SPARC: CInt {
  get {
    return
  }
}
var MON_3: CInt {
  get {
    return
  }
}
var MON_2: CInt {
  get {
    return
  }
}
var MON_10: CInt {
  get {
    return
  }
}
var TARGET_IPHONE_SIMULATOR: CInt {
  get {
    return
  }
}
var TARGET_CPU_X86_64: CInt {
  get {
    return
  }
}
var MON_12: CInt {
  get {
    return
  }
}
var TARGET_OS_MAC: CInt {
  get {
    return
  }
}
var TARGET_OS_IPHONE: CInt {
  get {
    return
  }
}
var MON_4: CInt {
  get {
    return
  }
}
var TARGET_OS_EMBEDDED: CInt {
  get {
    return
  }
}
var MON_5: CInt {
  get {
    return
  }
}
var MON_8: CInt {
  get {
    return
  }
}
var MON_7: CInt {
  get {
    return
  }
}
var MON_6: CInt {
  get {
    return
  }
}
var TARGET_RT_BIG_ENDIAN: CInt {
  get {
    return
  }
}
var MPO_CONTEXT_AS_GUARD: CInt {
  get {
    return
  }
}
var TARGET_OS_WIN32: CInt {
  get {
    return
  }
}
var MON_9: CInt {
  get {
    return
  }
}
var TARGET_RT_64_BIT: CInt {
  get {
    return
  }
}
var TARGET_RT_MAC_CFM: CInt {
  get {
    return
  }
}
var MPO_IMPORTANCE_RECEIVER: CInt {
  get {
    return
  }
}
var MPO_DENAP_RECEIVER: CInt {
  get {
    return
  }
}
var TARGET_RT_LITTLE_ENDIAN: CInt {
  get {
    return
  }
}
var MPO_QLIMIT: CInt {
  get {
    return
  }
}
var TASK_ABSOLUTETIME_INFO: CInt {
  get {
    return
  }
}
var MPO_INSERT_SEND_RIGHT: CInt {
  get {
    return
  }
}
var TARGET_OS_UNIX: CInt {
  get {
    return
  }
}
var TARGET_RT_MAC_MACHO: CInt {
  get {
    return
  }
}
var NOFILE: CInt {
  get {
    return
  }
}
var THREAD_MACHINE_STATE_MAX: CInt {
  get {
    return
  }
}
var NL_TEXTMAX: CInt {
  get {
    return
  }
}
var NOFLSH: CUnsignedInt {
  get {
    return
  }
}
var NOEXPR: CInt {
  get {
    return
  }
}
var NL_NMAX: CInt {
  get {
    return
  }
}
var THREAD_LATENCY_QOS_POLICY: CInt {
  get {
    return
  }
}
var NL_SETD: CInt {
  get {
    return
  }
}
var THREAD_KERNEL_PORT: CInt {
  get {
    return
  }
}
var NL_SETMAX: CInt {
  get {
    return
  }
}
var NOTE_DELETE: CInt {
  get {
    return
  }
}
var NOTE_EXEC: CInt {
  get {
    return
  }
}
var NOTE_BACKGROUND: CInt {
  get {
    return
  }
}
var NOTE_CRITICAL: CInt {
  get {
    return
  }
}
var NOTE_ABSOLUTE: CInt {
  get {
    return
  }
}
var NOGROUP: CInt {
  get {
    return
  }
}
var NOTE_ATTRIB: CInt {
  get {
    return
  }
}
var NOTE_CHILD: CInt {
  get {
    return
  }
}
var THREAD_PRECEDENCE_POLICY: CInt {
  get {
    return
  }
}
var NOKERNINFO: CInt {
  get {
    return
  }
}
var THREAD_INFO_MAX: CInt {
  get {
    return
  }
}
var THREAD_SCHED_FIFO_INFO: CInt {
  get {
    return
  }
}
var NOSTR: CInt {
  get {
    return
  }
}
var THREAD_STANDARD_POLICY: CInt {
  get {
    return
  }
}
var NOTE_EXIT_MEMORY: CInt {
  get {
    return
  }
}
var THREAD_SCHED_RR_INFO: CInt {
  get {
    return
  }
}
var NOTE_EXIT_DETAIL: CInt {
  get {
    return
  }
}
var THREAD_STANDARD_POLICY_COUNT: CInt {
  get {
    return
  }
}
var NOTE_EXIT_DETAIL_MASK: CInt {
  get {
    return
  }
}
var NOTE_EXIT_CSERROR: CInt {
  get {
    return
  }
}
var NOTE_EXIT_DECRYPTFAIL: CInt {
  get {
    return
  }
}
var NOTE_EXIT: CUnsignedInt {
  get {
    return
  }
}
var THREAD_STATE_FLAVOR_LIST: CInt {
  get {
    return
  }
}
var THREAD_STATE_FLAVOR_LIST_10_9: CInt {
  get {
    return
  }
}
var NOTE_EXITSTATUS: CInt {
  get {
    return
  }
}
var THREAD_SCHED_TIMESHARE_INFO: CInt {
  get {
    return
  }
}
var THREAD_STATE_MAX: CInt {
  get {
    return
  }
}
var NOTE_FORK: CInt {
  get {
    return
  }
}
var THREAD_STATE_FLAVOR_LIST_NEW: CInt {
  get {
    return
  }
}
var NOTE_LEEWAY: CInt {
  get {
    return
  }
}
var THREAD_TIME_CONSTRAINT_POLICY: CInt {
  get {
    return
  }
}
var NOTE_FFNOP: CInt {
  get {
    return
  }
}
var THREAD_THROUGHPUT_QOS_POLICY: CInt {
  get {
    return
  }
}
var NOTE_FFOR: CUnsignedInt {
  get {
    return
  }
}
var THREAD_STATE_NONE: CInt {
  get {
    return
  }
}
var NOTE_FFCTRLMASK: CUnsignedInt {
  get {
    return
  }
}
var TH_ACK: CInt {
  get {
    return
  }
}
var TH_FIN: CInt {
  get {
    return
  }
}
var NOTE_FFCOPY: CUnsignedInt {
  get {
    return
  }
}
var NOTE_FFLAGSMASK: CInt {
  get {
    return
  }
}
var TH_CWR: CInt {
  get {
    return
  }
}
var NOTE_EXTEND: CInt {
  get {
    return
  }
}
var NOTE_FFAND: CInt {
  get {
    return
  }
}
var NOTE_REVOKE: CInt {
  get {
    return
  }
}
var TH_URG: CInt {
  get {
    return
  }
}
var NOTE_RENAME: CInt {
  get {
    return
  }
}
var TH_ECE: CInt {
  get {
    return
  }
}
var TH_STATE_UNINTERRUPTIBLE: CInt {
  get {
    return
  }
}
var TH_STATE_STOPPED: CInt {
  get {
    return
  }
}
var TH_SYN: CInt {
  get {
    return
  }
}
var NOTE_PDATAMASK: CInt {
  get {
    return
  }
}
var TH_STATE_RUNNING: CInt {
  get {
    return
  }
}
var TH_STATE_HALTED: CInt {
  get {
    return
  }
}
var NOTE_LOWAT: CInt {
  get {
    return
  }
}
var TH_RST: CInt {
  get {
    return
  }
}
var NOTE_NSECONDS: CInt {
  get {
    return
  }
}
var NOTE_LINK: CInt {
  get {
    return
  }
}
var TH_PUSH: CInt {
  get {
    return
  }
}
var NOTE_NONE: CInt {
  get {
    return
  }
}
var NOTE_VM_PRESSURE_SUDDEN_TERMINATE: CInt {
  get {
    return
  }
}
var NOTE_VM_PRESSURE: CUnsignedInt {
  get {
    return
  }
}
var NOTE_VM_ERROR: CInt {
  get {
    return
  }
}
var TIME_MICROS_MAX: CInt {
  get {
    return
  }
}
var TIME_RELATIVE: CInt {
  get {
    return
  }
}
var NOTE_USECONDS: CInt {
  get {
    return
  }
}
var TH_FLAGS_IDLE: CInt {
  get {
    return
  }
}
var TH_STATE_WAITING: CInt {
  get {
    return
  }
}
var TIME_ABSOLUTE: CInt {
  get {
    return
  }
}
var NOTE_TRIGGER: CInt {
  get {
    return
  }
}
var NOTE_TRACKERR: CInt {
  get {
    return
  }
}
var NOTE_TRACK: CInt {
  get {
    return
  }
}
var NOTE_SECONDS: CInt {
  get {
    return
  }
}
var NOTE_SIGNAL: CInt {
  get {
    return
  }
}
var NZERO: CInt {
  get {
    return
  }
}
var TH_USAGE_SCALE: CInt {
  get {
    return
  }
}
var NSIG: CInt {
  get {
    return
  }
}
var NO_RECOVERY: CInt {
  get {
    return
  }
}
var NO_DATA: CInt {
  get {
    return
  }
}
var NO_ADDRESS: CInt {
  get {
    return
  }
}
var NOTE_WRITE: CInt {
  get {
    return
  }
}
var NOTE_VM_PRESSURE_TERMINATE: CInt {
  get {
    return
  }
}
var OID_AUTO_START: CInt {
  get {
    return
  }
}
var OID_AUTO: CInt {
  get {
    return
  }
}
var OFILL: CInt {
  get {
    return
  }
}
var TH_FLAGS_SWAPPED: CInt {
  get {
    return
  }
}
var OFF_MAX: CLongLong {
  get {
    return
  }
}
var OFDEL: CInt {
  get {
    return
  }
}
var OCRNL: CInt {
  get {
    return
  }
}
var NeXTBSD4_0: CInt {
  get {
    return
  }
}
var NeXTBSD: CInt {
  get {
    return
  }
}
var TCP6_MSS: CInt {
  get {
    return
  }
}
var TCPOLEN_CC: CInt {
  get {
    return
  }
}
var TCPOLEN_MAXSEG: CInt {
  get {
    return
  }
}
var TCPOLEN_SACK: CInt {
  get {
    return
  }
}
var TCIOFLUSH: CInt {
  get {
    return
  }
}
var TCION: CInt {
  get {
    return
  }
}
var TCOFLUSH: CInt {
  get {
    return
  }
}
var TCOOFF: CInt {
  get {
    return
  }
}
var TCOON: CInt {
  get {
    return
  }
}
var TCPOLEN_WINDOW: CInt {
  get {
    return
  }
}
var TCPOPT_CC: CInt {
  get {
    return
  }
}
var TCPOPT_CCECHO: CInt {
  get {
    return
  }
}
var TCPOPT_CCNEW: CInt {
  get {
    return
  }
}
var TCPOLEN_SACK_PERMITTED: CInt {
  get {
    return
  }
}
var TCPOLEN_SIGNATURE: CInt {
  get {
    return
  }
}
var TCPOLEN_TIMESTAMP: CInt {
  get {
    return
  }
}
var NDEXTENT: CInt {
  get {
    return
  }
}
var TCPOPT_SACK_PERMITTED: CInt {
  get {
    return
  }
}
var NDFILE: CInt {
  get {
    return
  }
}
var NDR_CHAR_ASCII: CInt {
  get {
    return
  }
}
var TCPOPT_EOL: CInt {
  get {
    return
  }
}
var TCPOPT_SIGNATURE: CInt {
  get {
    return
  }
}
var TCPOPT_MAXSEG: CInt {
  get {
    return
  }
}
var TCPOPT_NOP: CInt {
  get {
    return
  }
}
var TCPOPT_SACK: CInt {
  get {
    return
  }
}
var NDR_INT_BIG_ENDIAN: CInt {
  get {
    return
  }
}
var TCP_ENABLE_ECN: CInt {
  get {
    return
  }
}
var TCP_KEEPCNT: CInt {
  get {
    return
  }
}
var NDR_INT_LITTLE_ENDIAN: CInt {
  get {
    return
  }
}
var NDR_PROTOCOL_2_0: CInt {
  get {
    return
  }
}
var TCP_KEEPALIVE: CInt {
  get {
    return
  }
}
var NETDB_INTERNAL: CInt {
  get {
    return
  }
}
var TCP_MAXHLEN: CInt {
  get {
    return
  }
}
var TCP_KEEPINTVL: CInt {
  get {
    return
  }
}
var TCPOPT_TIMESTAMP: CInt {
  get {
    return
  }
}
var NDR_FLOAT_IBM: CInt {
  get {
    return
  }
}
var NDR_CHAR_EBCDIC: CInt {
  get {
    return
  }
}
var NDR_FLOAT_CRAY: CInt {
  get {
    return
  }
}
var NDR_FLOAT_IEEE: CInt {
  get {
    return
  }
}
var TCPOPT_WINDOW: CInt {
  get {
    return
  }
}
var NDR_FLOAT_VAX: CInt {
  get {
    return
  }
}
var TCP_CONNECTIONTIMEOUT: CInt {
  get {
    return
  }
}
var NET_RT_IFLIST2: CInt {
  get {
    return
  }
}
var TCP_MSS: CInt {
  get {
    return
  }
}
var TCP_MAX_WINSHIFT: CInt {
  get {
    return
  }
}
var NET_RT_IFLIST: CInt {
  get {
    return
  }
}
var NET_RT_STAT: CInt {
  get {
    return
  }
}
var TCP_MINMSS: CInt {
  get {
    return
  }
}
var NET_RT_MAXID: CInt {
  get {
    return
  }
}
var TCP_NODELAY: CInt {
  get {
    return
  }
}
var NET_MAXID: CInt {
  get {
    return
  }
}
var TCP_NOOPT: CInt {
  get {
    return
  }
}
var TCP_MAXSEG: CInt {
  get {
    return
  }
}
var NETDB_SUCCESS: CInt {
  get {
    return
  }
}
var NET_RT_DUMP2: CInt {
  get {
    return
  }
}
var TCP_MAX_SACK: CInt {
  get {
    return
  }
}
var NET_RT_DUMP: CInt {
  get {
    return
  }
}
var TCP_MAXWIN: CInt {
  get {
    return
  }
}
var NET_RT_FLAGS: CInt {
  get {
    return
  }
}
var TCSADRAIN: CInt {
  get {
    return
  }
}
var NFSV4_MAX_FH_SIZE: CInt {
  get {
    return
  }
}
var TCP_SENDMOREACKS: CInt {
  get {
    return
  }
}
var NFSV3_MAX_FH_SIZE: CInt {
  get {
    return
  }
}
var NGROUPS: CInt {
  get {
    return
  }
}
var TCSASOFT: CInt {
  get {
    return
  }
}
var NFS_MAX_FH_SIZE: CInt {
  get {
    return
  }
}
var NEWLINE: CInt {
  get {
    return
  }
}
var NEW_TIME: CInt {
  get {
    return
  }
}
var NET_RT_TRASH: CInt {
  get {
    return
  }
}
var TCP_NOTSENT_LOWAT: CInt {
  get {
    return
  }
}
var TCP_RXT_FINDROP: CInt {
  get {
    return
  }
}
var NFSV2_MAX_FH_SIZE: CInt {
  get {
    return
  }
}
var TCP_RXT_CONNDROPTIME: CInt {
  get {
    return
  }
}
var NI_NOFQDN: CInt {
  get {
    return
  }
}
var NI_NAMEREQD: CInt {
  get {
    return
  }
}
var THREAD_AFFINITY_POLICY: CInt {
  get {
    return
  }
}
var TCP_NOPUSH: CInt {
  get {
    return
  }
}
var NI_NUMERICSERV: CInt {
  get {
    return
  }
}
var THREAD_AFFINITY_TAG_NULL: CInt {
  get {
    return
  }
}
var NI_DGRAM: CInt {
  get {
    return
  }
}
var TCSANOW: CInt {
  get {
    return
  }
}
var NI_NUMERICHOST: CInt {
  get {
    return
  }
}
var NGROUPS_MAX: CInt {
  get {
    return
  }
}
var NI_MAXSERV: CInt {
  get {
    return
  }
}
var TGREAD: CInt {
  get {
    return
  }
}
var TGEXEC: CInt {
  get {
    return
  }
}
var NI_MAXHOST: CInt {
  get {
    return
  }
}
var TGWRITE: CInt {
  get {
    return
  }
}
var NL_CAT_LOCALE: CInt {
  get {
    return
  }
}
var NL_ARGMAX: CInt {
  get {
    return
  }
}
var NL_MSGMAX: CInt {
  get {
    return
  }
}
var THREAD_BACKGROUND_POLICY: CInt {
  get {
    return
  }
}
var NL_LANGMAX: CInt {
  get {
    return
  }
}
var TCSAFLUSH: CInt {
  get {
    return
  }
}
var THREAD_BASIC_INFO: CInt {
  get {
    return
  }
}
var NL0: CInt {
  get {
    return
  }
}
var NI_WITHSCOPEID: CInt {
  get {
    return
  }
}
var NLDLY: CInt {
  get {
    return
  }
}
var NL1: CInt {
  get {
    return
  }
}
var NL3: CInt {
  get {
    return
  }
}
var NL2: CInt {
  get {
    return
  }
}
var THOUSEP: CInt {
  get {
    return
  }
}
var THREAD_IDENTIFIER_INFO: CInt {
  get {
    return
  }
}
var __AVAILABILITY_MACROS_USES_AVAILABILITY: CInt {
  get {
    return
  }
}
var THREAD_EXTENDED_POLICY: CInt {
  get {
    return
  }
}
var __BSM_INTERNAL_NOTIFY_KEY: CString {
  get {
    return
  }
}
var x86_THREAD_STATE64: CInt {
  get {
    return
  }
}
var x86_FLOAT_STATE64: CInt {
  get {
    return
  }
}
var x86_FLOAT_STATE32: CInt {
  get {
    return
  }
}
var x86_THREAD_STATE32: CInt {
  get {
    return
  }
}
var x86_THREAD_STATE: CInt {
  get {
    return
  }
}
var x86_EXCEPTION_STATE32: CInt {
  get {
    return
  }
}
var x86_EXCEPTION_STATE: CInt {
  get {
    return
  }
}
var x86_FLOAT_STATE: CInt {
  get {
    return
  }
}
var x86_EXCEPTION_STATE64: CInt {
  get {
    return
  }
}
var x86_DEBUG_STATE: CInt {
  get {
    return
  }
}
var x86_AVX_STATE64: CInt {
  get {
    return
  }
}
var x86_DEBUG_STATE64: CInt {
  get {
    return
  }
}
var x86_DEBUG_STATE32: CInt {
  get {
    return
  }
}
var vm_map_MSG_COUNT: CInt {
  get {
    return
  }
}
var x86_AVX_STATE: CInt {
  get {
    return
  }
}
var x86_AVX_STATE32: CInt {
  get {
    return
  }
}
var thread_act_MSG_COUNT: CInt {
  get {
    return
  }
}
var task_MSG_COUNT: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_SEARCH: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_READ_SECURITY: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_WRITE_ATTRIBUTES: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_SYNCHRONIZE: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_READ_DATA: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_READ_EXTATTRIBUTES: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_READ_ATTRIBUTES: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_EXTENDED_ALLOW: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_EXTENDED_DENY: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_FLAG_NO_INHERIT: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_LIST_DIRECTORY: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_LIMIT_INHERIT: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_ONLY_INHERIT: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_EXECUTE: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_DELETE_CHILD: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_FILE_INHERIT: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_INHERITED: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_ADD_SUBDIRECTORY: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_APPEND_DATA: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_CHANGE_OWNER: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_DELETE: CInt {
  get {
    return
  }
}
var __DARWIN_64_BIT_INO_T: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_ADD_FILE: CInt {
  get {
    return
  }
}
var __CTERMID_DEFINED: CInt {
  get {
    return
  }
}
var _XOPEN_STREAMS: CInt {
  get {
    return
  }
}
var _XOPEN_SHM: CInt {
  get {
    return
  }
}
var host_security_MSG_COUNT: CInt {
  get {
    return
  }
}
var _XOPEN_REALTIME_THREADS: CInt {
  get {
    return
  }
}
var host_priv_MSG_COUNT: CInt {
  get {
    return
  }
}
var _XOPEN_REALTIME: CInt {
  get {
    return
  }
}
var _XOPEN_PATH_MAX: CInt {
  get {
    return
  }
}
var _XOPEN_XCU_VERSION: CInt {
  get {
    return
  }
}
var _XOPEN_VERSION: CInt {
  get {
    return
  }
}
var _XOPEN_UNIX: CInt {
  get {
    return
  }
}
var __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES: CInt {
  get {
    return
  }
}
var _WPERM_OK: CInt {
  get {
    return
  }
}
var _WEXT_OK: CInt {
  get {
    return
  }
}
var _XBS5_ILP32_OFF32: CInt {
  get {
    return
  }
}
var _WSTOPPED: CInt {
  get {
    return
  }
}
var _WRITE_OK: CInt {
  get {
    return
  }
}
var _XOPEN_CRYPT: CInt {
  get {
    return
  }
}
var _XBS5_LPBIG_OFFBIG: CInt {
  get {
    return
  }
}
var _XBS5_LP64_OFF64: CInt {
  get {
    return
  }
}
var _XBS5_ILP32_OFFBIG: CInt {
  get {
    return
  }
}
var _XOPEN_NAME_MAX: CInt {
  get {
    return
  }
}
var _XOPEN_LEGACY: CInt {
  get {
    return
  }
}
var _XOPEN_IOV_MAX: CInt {
  get {
    return
  }
}
var _XOPEN_ENH_I18N: CInt {
  get {
    return
  }
}
var _UTX_USERSIZE: CInt {
  get {
    return
  }
}
var _V6_LP64_OFF64: CInt {
  get {
    return
  }
}
var _V6_LPBIG_OFFBIG: CInt {
  get {
    return
  }
}
var _V6_ILP32_OFF32: CInt {
  get {
    return
  }
}
var _V6_ILP32_OFFBIG: CInt {
  get {
    return
  }
}
var _WATTR_OK: CInt {
  get {
    return
  }
}
var exc_MSG_COUNT: CInt {
  get {
    return
  }
}
var _UTX_IDSIZE: CInt {
  get {
    return
  }
}
var _UTX_LINESIZE: CInt {
  get {
    return
  }
}
var _UTX_HOSTSIZE: CInt {
  get {
    return
  }
}
var err_max_system: CInt {
  get {
    return
  }
}
var clock_priv_MSG_COUNT: CInt {
  get {
    return
  }
}
var clock_MSG_COUNT: CInt {
  get {
    return
  }
}
var clock_reply_MSG_COUNT: CInt {
  get {
    return
  }
}
var code_emask: CInt {
  get {
    return
  }
}
var _SYS_NAMELEN: CInt {
  get {
    return
  }
}
var required_argument: CInt {
  get {
    return
  }
}
var processor_MSG_COUNT: CInt {
  get {
    return
  }
}
var processor_set_MSG_COUNT: CInt {
  get {
    return
  }
}
var pseudo_AF_RTIP: CInt {
  get {
    return
  }
}
var pseudo_AF_XTP: CInt {
  get {
    return
  }
}
var pseudo_AF_HDRCMPLT: CInt {
  get {
    return
  }
}
var pseudo_AF_PIP: CInt {
  get {
    return
  }
}
var pseudo_AF_KEY: CInt {
  get {
    return
  }
}
var optional_argument: CInt {
  get {
    return
  }
}
var mach_vm_MSG_COUNT: CInt {
  get {
    return
  }
}
var mach_host_MSG_COUNT: CInt {
  get {
    return
  }
}
var mach_port_MSG_COUNT: CInt {
  get {
    return
  }
}
var no_argument: CInt {
  get {
    return
  }
}
var _USE_FORTIFY_LEVEL: CInt {
  get {
    return
  }
}
var __DARWIN_NULL: NilType {
  get {
    return
  }
}
var lock_set_MSG_COUNT: CInt {
  get {
    return
  }
}
var kInvalidID: CInt {
  get {
    return
  }
}
var i386_EXCEPTION_STATE: CInt {
  get {
    return
  }
}
var i386_FLOAT_STATE: CInt {
  get {
    return
  }
}
var i386_THREAD_STATE: CInt {
  get {
    return
  }
}
var _SC_MONOTONIC_CLOCK: CInt {
  get {
    return
  }
}
var _SC_MQ_OPEN_MAX: CInt {
  get {
    return
  }
}
var _SC_MESSAGE_PASSING: CInt {
  get {
    return
  }
}
var _SC_MEMORY_PROTECTION: CInt {
  get {
    return
  }
}
var _SC_MEMLOCK_RANGE: CInt {
  get {
    return
  }
}
var _SC_NPROCESSORS_ONLN: CInt {
  get {
    return
  }
}
var _SC_NPROCESSORS_CONF: CInt {
  get {
    return
  }
}
var _SC_NGROUPS_MAX: CInt {
  get {
    return
  }
}
var _SC_MQ_PRIO_MAX: CInt {
  get {
    return
  }
}
var _SC_JOB_CONTROL: CInt {
  get {
    return
  }
}
var _SC_IPV6: CInt {
  get {
    return
  }
}
var _SC_IOV_MAX: CInt {
  get {
    return
  }
}
var _SC_HOST_NAME_MAX: CInt {
  get {
    return
  }
}
var _SC_MEMLOCK: CInt {
  get {
    return
  }
}
var _SC_MAPPED_FILES: CInt {
  get {
    return
  }
}
var _SC_LOGIN_NAME_MAX: CInt {
  get {
    return
  }
}
var _SC_LINE_MAX: CInt {
  get {
    return
  }
}
var _SC_SAVED_IDS: CInt {
  get {
    return
  }
}
var _SC_RTSIG_MAX: CInt {
  get {
    return
  }
}
var _SC_RE_DUP_MAX: CInt {
  get {
    return
  }
}
var _SC_REGEXP: CInt {
  get {
    return
  }
}
var _SC_REALTIME_SIGNALS: CInt {
  get {
    return
  }
}
var _SC_SHARED_MEMORY_OBJECTS: CInt {
  get {
    return
  }
}
var _SC_SEM_VALUE_MAX: CInt {
  get {
    return
  }
}
var _SC_SEM_NSEMS_MAX: CInt {
  get {
    return
  }
}
var _SC_SEMAPHORES: CInt {
  get {
    return
  }
}
var _SC_PASS_MAX: CInt {
  get {
    return
  }
}
var _SC_PAGE_SIZE: CInt {
  get {
    return
  }
}
var _SC_PAGESIZE: CInt {
  get {
    return
  }
}
var _SC_OPEN_MAX: CInt {
  get {
    return
  }
}
var _SC_READER_WRITER_LOCKS: CInt {
  get {
    return
  }
}
var _SC_RAW_SOCKETS: CInt {
  get {
    return
  }
}
var _SC_PRIORITY_SCHEDULING: CInt {
  get {
    return
  }
}
var _SC_PRIORITIZED_IO: CInt {
  get {
    return
  }
}
var _SC_ADVISORY_INFO: CInt {
  get {
    return
  }
}
var __PRI_64_LENGTH_MODIFIER__: CString {
  get {
    return
  }
}
var _SC_AIO_LISTIO_MAX: CInt {
  get {
    return
  }
}
var _SC_2_SW_DEV: CInt {
  get {
    return
  }
}
var _SC_2_UPE: CInt {
  get {
    return
  }
}
var _SC_2_VERSION: CInt {
  get {
    return
  }
}
var _SC_ARG_MAX: CInt {
  get {
    return
  }
}
var _SC_ASYNCHRONOUS_IO: CInt {
  get {
    return
  }
}
var __PTHREAD_ATTR_SIZE__: CInt {
  get {
    return
  }
}
var _SC_AIO_MAX: CInt {
  get {
    return
  }
}
var __PRI_8_LENGTH_MODIFIER__: CString {
  get {
    return
  }
}
var _SC_AIO_PRIO_DELTA_MAX: CInt {
  get {
    return
  }
}
var __PRI_MAX_LENGTH_MODIFIER__: CString {
  get {
    return
  }
}
var _SC_2_PBS: CInt {
  get {
    return
  }
}
var _SC_2_PBS_ACCOUNTING: CInt {
  get {
    return
  }
}
var _SC_2_FORT_RUN: CInt {
  get {
    return
  }
}
var _SC_2_LOCALEDEF: CInt {
  get {
    return
  }
}
var _SC_2_PBS_MESSAGE: CInt {
  get {
    return
  }
}
var _SC_2_PBS_TRACK: CInt {
  get {
    return
  }
}
var _SC_2_PBS_CHECKPOINT: CInt {
  get {
    return
  }
}
var _SC_2_PBS_LOCATE: CInt {
  get {
    return
  }
}
var _SC_DELAYTIMER_MAX: CInt {
  get {
    return
  }
}
var _SC_EXPR_NEST_MAX: CInt {
  get {
    return
  }
}
var _SC_COLL_WEIGHTS_MAX: CInt {
  get {
    return
  }
}
var __PTHREAD_SIZE__: CInt {
  get {
    return
  }
}
var _SC_CPUTIME: CInt {
  get {
    return
  }
}
var _SC_GETGR_R_SIZE_MAX: CInt {
  get {
    return
  }
}
var _SC_GETPW_R_SIZE_MAX: CInt {
  get {
    return
  }
}
var _SC_FILE_LOCKING: CInt {
  get {
    return
  }
}
var _SC_FSYNC: CInt {
  get {
    return
  }
}
var __PTHREAD_MUTEXATTR_SIZE__: CInt {
  get {
    return
  }
}
var _SC_BC_BASE_MAX: CInt {
  get {
    return
  }
}
var __PTHREAD_MUTEX_SIZE__: CInt {
  get {
    return
  }
}
var _SC_BC_DIM_MAX: CInt {
  get {
    return
  }
}
var _SC_ATEXIT_MAX: CInt {
  get {
    return
  }
}
var __PTHREAD_CONDATTR_SIZE__: CInt {
  get {
    return
  }
}
var __PTHREAD_COND_SIZE__: CInt {
  get {
    return
  }
}
var _SC_BARRIERS: CInt {
  get {
    return
  }
}
var _SC_CLK_TCK: CInt {
  get {
    return
  }
}
var _SC_CHILD_MAX: CInt {
  get {
    return
  }
}
var __PTHREAD_RWLOCKATTR_SIZE__: CInt {
  get {
    return
  }
}
var __PTHREAD_RWLOCK_SIZE__: CInt {
  get {
    return
  }
}
var _SC_CLOCK_SELECTION: CInt {
  get {
    return
  }
}
var __PTHREAD_ONCE_SIZE__: CInt {
  get {
    return
  }
}
var _SC_BC_SCALE_MAX: CInt {
  get {
    return
  }
}
var _SC_BC_STRING_MAX: CInt {
  get {
    return
  }
}
var __MAC_10_10: CInt {
  get {
    return
  }
}
var __MAC_10_1: CInt {
  get {
    return
  }
}
var __MAC_10_3: CInt {
  get {
    return
  }
}
var __MAC_10_4: CInt {
  get {
    return
  }
}
var __MAC_10_2: CInt {
  get {
    return
  }
}
var __MAC_10_6: CInt {
  get {
    return
  }
}
var __MAC_10_5: CInt {
  get {
    return
  }
}
var __MAC_10_8: CInt {
  get {
    return
  }
}
var _QUAD_HIGHWORD: CInt {
  get {
    return
  }
}
var __MAC_10_7: CInt {
  get {
    return
  }
}
var __KAME_VERSION: CString {
  get {
    return
  }
}
var _PTHREAD_MUTEX_SIG_init: CInt {
  get {
    return
  }
}
var _PTHREAD_ONCE_SIG_init: CInt {
  get {
    return
  }
}
var _PTHREAD_RECURSIVE_MUTEX_SIG_init: CInt {
  get {
    return
  }
}
var __LP64_OFF64: CInt {
  get {
    return
  }
}
var __LPBIG_OFFBIG: CInt {
  get {
    return
  }
}
var _PTHREAD_RWLOCK_SIG_init: CInt {
  get {
    return
  }
}
var __MAC_10_0: CInt {
  get {
    return
  }
}
var __MigTypeCheck: CInt {
  get {
    return
  }
}
var _RUNE_MAGIC_A: CString {
  get {
    return
  }
}
var __MigPackStructs: CInt {
  get {
    return
  }
}
var __NDR_convert__: CInt {
  get {
    return
  }
}
var _SC_2_CHAR_TERM: CInt {
  get {
    return
  }
}
var __NDR_convert__float_rep__: CInt {
  get {
    return
  }
}
var __NDR_convert__char_rep__: CInt {
  get {
    return
  }
}
var _SC_2_FORT_DEV: CInt {
  get {
    return
  }
}
var _SC_2_C_DEV: CInt {
  get {
    return
  }
}
var __NDR_convert__int_rep__: CInt {
  get {
    return
  }
}
var _SC_2_C_BIND: CInt {
  get {
    return
  }
}
var _READ_OK: CInt {
  get {
    return
  }
}
var __MAC_OS_X_VERSION_MAX_ALLOWED: CInt {
  get {
    return
  }
}
var _RATTR_OK: CInt {
  get {
    return
  }
}
var _QUAD_LOWWORD: CInt {
  get {
    return
  }
}
var __MAC_10_9: CInt {
  get {
    return
  }
}
var _REXT_OK: CInt {
  get {
    return
  }
}
var __MAC_OS_X_VERSION_MIN_REQUIRED: CInt {
  get {
    return
  }
}
var _RMFILE_OK: CInt {
  get {
    return
  }
}
var _RLIMIT_POSIX_FLAG: CInt {
  get {
    return
  }
}
var _RPERM_OK: CInt {
  get {
    return
  }
}
var _POSIX_TZNAME_MAX: CInt {
  get {
    return
  }
}
var __IPHONE_2_0: CInt {
  get {
    return
  }
}
var _POSIX_V6_ILP32_OFF32: CInt {
  get {
    return
  }
}
var __IPHONE_2_1: CInt {
  get {
    return
  }
}
var _POSIX_V6_ILP32_OFFBIG: CInt {
  get {
    return
  }
}
var __IPHONE_2_2: CInt {
  get {
    return
  }
}
var __IPHONE_3_0: CInt {
  get {
    return
  }
}
var _POSIX_V6_LP64_OFF64: CInt {
  get {
    return
  }
}
var __IPHONE_3_1: CInt {
  get {
    return
  }
}
var _POSIX_V6_LPBIG_OFFBIG: CInt {
  get {
    return
  }
}
var _POSIX_V7_ILP32_OFF32: CInt {
  get {
    return
  }
}
var __IPHONE_3_2: CInt {
  get {
    return
  }
}
var _POSIX_V7_ILP32_OFFBIG: CInt {
  get {
    return
  }
}
var __IPHONE_4_0: CInt {
  get {
    return
  }
}
var __IPHONE_4_1: CInt {
  get {
    return
  }
}
var _POSIX_V7_LP64_OFF64: CInt {
  get {
    return
  }
}
var __IPHONE_4_2: CInt {
  get {
    return
  }
}
var __GNUC_VA_LIST: CInt {
  get {
    return
  }
}
var _POSIX_TRACE_INHERIT: CInt {
  get {
    return
  }
}
var _POSIX_TRACE_LOG: CInt {
  get {
    return
  }
}
var _POSIX_TRACE_NAME_MAX: CInt {
  get {
    return
  }
}
var _POSIX_TRACE_SYS_MAX: CInt {
  get {
    return
  }
}
var _POSIX_TRACE_USER_EVENT_MAX: CInt {
  get {
    return
  }
}
var _POSIX_TTY_NAME_MAX: CInt {
  get {
    return
  }
}
var __ILP32_OFF32: CInt {
  get {
    return
  }
}
var __ILP32_OFFBIG: CInt {
  get {
    return
  }
}
var _POSIX_TYPED_MEMORY_OBJECTS: CInt {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_GLOBAL: CInt {
  get {
    return
  }
}
var _PTHREAD_FIRSTFIT_MUTEX_SIG_init: CInt {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_INTFACELOCAL: CInt {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_LINKLOCAL: CInt {
  get {
    return
  }
}
var _PTHREAD_MUTEX_POLICY_FAIRSHARE: CInt {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_NODELOCAL: CInt {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_ORGLOCAL: CInt {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_SITELOCAL: CInt {
  get {
    return
  }
}
var _PTHREAD_MUTEX_POLICY_FIRSTFIT: CInt {
  get {
    return
  }
}
var _PTHREAD_MUTEX_POLICY_NONE: CInt {
  get {
    return
  }
}
var __IPHONE_4_3: CInt {
  get {
    return
  }
}
var _POSIX_V7_LPBIG_OFFBIG: CInt {
  get {
    return
  }
}
var __IPHONE_5_0: CInt {
  get {
    return
  }
}
var _POSIX_VERSION: CLong {
  get {
    return
  }
}
var __IPHONE_5_1: CInt {
  get {
    return
  }
}
var __IPHONE_6_0: CInt {
  get {
    return
  }
}
var _PTHREAD_COND_SIG_init: CInt {
  get {
    return
  }
}
var __IPHONE_6_1: CInt {
  get {
    return
  }
}
var __IPHONE_7_1: CInt {
  get {
    return
  }
}
var __IPHONE_7_0: CInt {
  get {
    return
  }
}
var _PTHREAD_ERRORCHECK_MUTEX_SIG_init: CInt {
  get {
    return
  }
}
var __IPHONE_8_0: CInt {
  get {
    return
  }
}
var __bool_true_false_are_defined: CInt {
  get {
    return
  }
}
var __SWR: CInt {
  get {
    return
  }
}
var __SRW: CInt {
  get {
    return
  }
}
var __STDC_WANT_LIB_EXT1__: CInt {
  get {
    return
  }
}
var __SSTR: CInt {
  get {
    return
  }
}
var __SOFF: CInt {
  get {
    return
  }
}
var _SS_MAXSIZE: CInt {
  get {
    return
  }
}
var __SOPT: CInt {
  get {
    return
  }
}
var __SRD: CInt {
  get {
    return
  }
}
var __SNBF: CInt {
  get {
    return
  }
}
var __SNPT: CInt {
  get {
    return
  }
}
var __WORDSIZE: CInt {
  get {
    return
  }
}
var _SC_XBS5_LPBIG_OFFBIG: CInt {
  get {
    return
  }
}
var _SC_XBS5_LP64_OFF64: CInt {
  get {
    return
  }
}
var _SC_XOPEN_ENH_I18N: CInt {
  get {
    return
  }
}
var _SC_XOPEN_CRYPT: CInt {
  get {
    return
  }
}
var _SC_VERSION: CInt {
  get {
    return
  }
}
var _SC_V6_LPBIG_OFFBIG: CInt {
  get {
    return
  }
}
var _SC_XBS5_ILP32_OFFBIG: CInt {
  get {
    return
  }
}
var _SC_XBS5_ILP32_OFF32: CInt {
  get {
    return
  }
}
var _SC_V6_ILP32_OFF32: CInt {
  get {
    return
  }
}
var _SC_TZNAME_MAX: CInt {
  get {
    return
  }
}
var _SC_V6_LP64_OFF64: CInt {
  get {
    return
  }
}
var _SC_V6_ILP32_OFFBIG: CInt {
  get {
    return
  }
}
var _SC_TRACE_USER_EVENT_MAX: CInt {
  get {
    return
  }
}
var _SC_TRACE_SYS_MAX: CInt {
  get {
    return
  }
}
var _SC_TYPED_MEMORY_OBJECTS: CInt {
  get {
    return
  }
}
var _SC_TTY_NAME_MAX: CInt {
  get {
    return
  }
}
var __SIGN: CInt {
  get {
    return
  }
}
var __SERR: CInt {
  get {
    return
  }
}
var __SEOF: CInt {
  get {
    return
  }
}
var __SMBF: CInt {
  get {
    return
  }
}
var _SMP_DB: CString {
  get {
    return
  }
}
var __SLBF: CInt {
  get {
    return
  }
}
var __SCHED_PARAM_SIZE__: CInt {
  get {
    return
  }
}
var __SCN_MAX_LENGTH_MODIFIER__: CString {
  get {
    return
  }
}
var __SMOD: CInt {
  get {
    return
  }
}
var _SC_XOPEN_UNIX: CInt {
  get {
    return
  }
}
var __SCN_64_LENGTH_MODIFIER__: CString {
  get {
    return
  }
}
var _SC_XOPEN_STREAMS: CInt {
  get {
    return
  }
}
var _SC_XOPEN_XCU_VERSION: CInt {
  get {
    return
  }
}
var __SAPP: CInt {
  get {
    return
  }
}
var _SC_XOPEN_VERSION: CInt {
  get {
    return
  }
}
var __SALC: CInt {
  get {
    return
  }
}
var _SC_XOPEN_REALTIME: CInt {
  get {
    return
  }
}
var _SC_XOPEN_LEGACY: CInt {
  get {
    return
  }
}
var _SC_XOPEN_SHM: CInt {
  get {
    return
  }
}
var _SC_XOPEN_REALTIME_THREADS: CInt {
  get {
    return
  }
}
var _SC_THREAD_DESTRUCTOR_ITERATIONS: CInt {
  get {
    return
  }
}
var _SC_THREAD_KEYS_MAX: CInt {
  get {
    return
  }
}
var _SC_THREAD_PRIORITY_SCHEDULING: CInt {
  get {
    return
  }
}
var _SC_THREADS: CInt {
  get {
    return
  }
}
var _SC_THREAD_ATTR_STACKADDR: CInt {
  get {
    return
  }
}
var _SC_THREAD_ATTR_STACKSIZE: CInt {
  get {
    return
  }
}
var _SC_THREAD_CPUTIME: CInt {
  get {
    return
  }
}
var _SC_SPORADIC_SERVER: CInt {
  get {
    return
  }
}
var _SC_SS_REPL_MAX: CInt {
  get {
    return
  }
}
var _SC_STREAM_MAX: CInt {
  get {
    return
  }
}
var _SC_SYMLOOP_MAX: CInt {
  get {
    return
  }
}
var _SC_SYNCHRONIZED_IO: CInt {
  get {
    return
  }
}
var _SC_SHELL: CInt {
  get {
    return
  }
}
var _SC_SIGQUEUE_MAX: CInt {
  get {
    return
  }
}
var _SC_SPAWN: CInt {
  get {
    return
  }
}
var _SC_SPIN_LOCKS: CInt {
  get {
    return
  }
}
var _SC_TRACE_EVENT_NAME_MAX: CInt {
  get {
    return
  }
}
var _SC_TRACE_INHERIT: CInt {
  get {
    return
  }
}
var _SC_TRACE_LOG: CInt {
  get {
    return
  }
}
var _SC_TRACE_NAME_MAX: CInt {
  get {
    return
  }
}
var _SC_TIMERS: CInt {
  get {
    return
  }
}
var _SC_TIMER_MAX: CInt {
  get {
    return
  }
}
var _SC_TRACE: CInt {
  get {
    return
  }
}
var _SC_TRACE_EVENT_FILTER: CInt {
  get {
    return
  }
}
var _SC_THREAD_SPORADIC_SERVER: CInt {
  get {
    return
  }
}
var _SC_THREAD_STACK_MIN: CInt {
  get {
    return
  }
}
var _SC_THREAD_THREADS_MAX: CInt {
  get {
    return
  }
}
var _SC_TIMEOUTS: CInt {
  get {
    return
  }
}
var _SC_THREAD_PRIO_INHERIT: CInt {
  get {
    return
  }
}
var _SC_THREAD_PRIO_PROTECT: CInt {
  get {
    return
  }
}
var _SC_THREAD_PROCESS_SHARED: CInt {
  get {
    return
  }
}
var _SC_THREAD_SAFE_FUNCTIONS: CInt {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_ARM: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_ARM64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN_X86_64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_PPC64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_PPC: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_I386: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_SIZE_ARM64: CUnsignedLongLong {
  get {
    return
  }
}
var _PASSWORD_CHGNOW: CInt {
  get {
    return
  }
}
var SHARED_REGION_SIZE_ARM: CUnsignedLongLong {
  get {
    return
  }
}
var _PASSWD: CString {
  get {
    return
  }
}
var SHARED_REGION_SIZE: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_X86_64: CUnsignedLongLong {
  get {
    return
  }
}
var _PASSWORD_NOGID: CInt {
  get {
    return
  }
}
var SHARED_REGION_SIZE_X86_64: CUnsignedLongLong {
  get {
    return
  }
}
var _PASSWORD_NOEXP: CInt {
  get {
    return
  }
}
var SHARED_REGION_SIZE_PPC64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_SIZE_PPC: CUnsignedLongLong {
  get {
    return
  }
}
var _PASSWORD_NOCHG: CInt {
  get {
    return
  }
}
var SHARED_REGION_SIZE_I386: CUnsignedLongLong {
  get {
    return
  }
}
var _PASSWORD_LEN: CInt {
  get {
    return
  }
}
var SHM_W: CInt {
  get {
    return
  }
}
var SHM_RND: CInt {
  get {
    return
  }
}
var _PATH_GROUP: CString {
  get {
    return
  }
}
var _PATH_FORKSPECIFIER: CString {
  get {
    return
  }
}
var SHM_RDONLY: CInt {
  get {
    return
  }
}
var _PASSWORD_WARNDAYS: CInt {
  get {
    return
  }
}
var SHM_R: CInt {
  get {
    return
  }
}
var SHMLBA: CInt {
  get {
    return
  }
}
var _PASSWORD_NOUID: CInt {
  get {
    return
  }
}
var _PATH_MASTERPASSWD: CString {
  get {
    return
  }
}
var SHUT_RD: CInt {
  get {
    return
  }
}
var _PATH_LOG: CString {
  get {
    return
  }
}
var _PATH_DATANAME: CString {
  get {
    return
  }
}
var SHUTDOWN_TIME: CInt {
  get {
    return
  }
}
var SHRT_MIN: CInt {
  get {
    return
  }
}
var _PATH_HOSTS: CString {
  get {
    return
  }
}
var SHRT_MAX: CInt {
  get {
    return
  }
}
var _PATH_HEQUIV: CString {
  get {
    return
  }
}
var SIGBUS: CInt {
  get {
    return
  }
}
var SIGALRM: CInt {
  get {
    return
  }
}
var _PATH_PASSWD: CString {
  get {
    return
  }
}
var SIGABRT: CInt {
  get {
    return
  }
}
var SIDL: CInt {
  get {
    return
  }
}
var _PATH_MP_DB: CString {
  get {
    return
  }
}
var SHUT_WR: CInt {
  get {
    return
  }
}
var _PATH_MASTERPASSWD_LOCK: CString {
  get {
    return
  }
}
var SHUT_RDWR: CInt {
  get {
    return
  }
}
var SIGEV_SIGNAL: CInt {
  get {
    return
  }
}
var _PATH_RSRCNAME: CString {
  get {
    return
  }
}
var SIGEV_NONE: CInt {
  get {
    return
  }
}
var SIGEMT: CInt {
  get {
    return
  }
}
var _PATH_PWD_MKDB: CString {
  get {
    return
  }
}
var SIGCONT: CInt {
  get {
    return
  }
}
var _PATH_PWD: CString {
  get {
    return
  }
}
var SIGCHLD: CInt {
  get {
    return
  }
}
var _PATH_RSRCFORKSPEC: CString {
  get {
    return
  }
}
var _PATH_PROTOCOLS: CString {
  get {
    return
  }
}
var SHARED_REGION_BASE_ARM: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_BASE_ARM64: CUnsignedLongLong {
  get {
    return
  }
}
var SF_SETTABLE: CUnsignedInt {
  get {
    return
  }
}
var SHARED_REGION_BASE: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_BASE_PPC64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_BASE_I386: CUnsignedLongLong {
  get {
    return
  }
}
var _PATH_NETWORKS: CString {
  get {
    return
  }
}
var SHARED_REGION_BASE_PPC: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_ARM: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_ARM64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_BASE_X86_64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_PPC64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_I386: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_PPC: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_X86_64: CUnsignedLongLong {
  get {
    return
  }
}
var _MASTERPASSWD: CString {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX_PPC64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX_I386: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX_PPC: CUnsignedLongLong {
  get {
    return
  }
}
var _MP_DB: CString {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX_X86_64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN_PPC64: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN_I386: CUnsignedLongLong {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN_PPC: CUnsignedLongLong {
  get {
    return
  }
}
var SCNx32: CString {
  get {
    return
  }
}
var SCNxFAST32: CString {
  get {
    return
  }
}
var SCNxFAST16: CString {
  get {
    return
  }
}
var SCNxLEAST16: CString {
  get {
    return
  }
}
var SCNxLEAST32: CString {
  get {
    return
  }
}
var SCNxPTR: CString {
  get {
    return
  }
}
var SEEK_END: CInt {
  get {
    return
  }
}
var SEARCHFS_MAX_SEARCHPARMS: CInt {
  get {
    return
  }
}
var SEEK_CUR: CInt {
  get {
    return
  }
}
var SEGV_ACCERR: CInt {
  get {
    return
  }
}
var SEEK_SET: CInt {
  get {
    return
  }
}
var SEGV_NOOP: CInt {
  get {
    return
  }
}
var SEGV_MAPERR: CInt {
  get {
    return
  }
}
var SEM_A: CInt {
  get {
    return
  }
}
var SEM_UNDO: CInt {
  get {
    return
  }
}
var SEM_R: CInt {
  get {
    return
  }
}
var SERVICE_SLOT: CInt {
  get {
    return
  }
}
var SEM_VALUE_MAX: CInt {
  get {
    return
  }
}
var SETVAL: CInt {
  get {
    return
  }
}
var SETALL: CInt {
  get {
    return
  }
}
var SF_APPEND: CInt {
  get {
    return
  }
}
var SF_RESTRICTED: CInt {
  get {
    return
  }
}
var SF_IMMUTABLE: CInt {
  get {
    return
  }
}
var SF_ARCHIVED: CInt {
  get {
    return
  }
}
var SCNiFAST16: CString {
  get {
    return
  }
}
var SCNiFAST32: CString {
  get {
    return
  }
}
var SCNiLEAST16: CString {
  get {
    return
  }
}
var SCNiLEAST32: CString {
  get {
    return
  }
}
var SCNiPTR: CString {
  get {
    return
  }
}
var SCNo16: CString {
  get {
    return
  }
}
var SCNo32: CString {
  get {
    return
  }
}
var SCNoFAST16: CString {
  get {
    return
  }
}
var SCNoFAST32: CString {
  get {
    return
  }
}
var SCNoLEAST16: CString {
  get {
    return
  }
}
var SCNoLEAST32: CString {
  get {
    return
  }
}
var SCNu16: CString {
  get {
    return
  }
}
var SCNoPTR: CString {
  get {
    return
  }
}
var SCNu32: CString {
  get {
    return
  }
}
var SCNuFAST32: CString {
  get {
    return
  }
}
var SCNuFAST16: CString {
  get {
    return
  }
}
var SCNuLEAST16: CString {
  get {
    return
  }
}
var SCNuLEAST32: CString {
  get {
    return
  }
}
var SCNuPTR: CString {
  get {
    return
  }
}
var SCNx16: CString {
  get {
    return
  }
}
var __DARWIN_PDP_ENDIAN: CInt {
  get {
    return
  }
}
var _POSIX_SSIZE_MAX: CInt {
  get {
    return
  }
}
var _POSIX_SPORADIC_SERVER: CInt {
  get {
    return
  }
}
var _POSIX_SPIN_LOCKS: CInt {
  get {
    return
  }
}
var _POSIX_SPAWN: CInt {
  get {
    return
  }
}
var _POSIX_SS_REPL_MAX: CInt {
  get {
    return
  }
}
var _POSIX_SIGQUEUE_MAX: CInt {
  get {
    return
  }
}
var _POSIX_SHARED_MEMORY_OBJECTS: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_ATTR_STACKSIZE: CLong {
  get {
    return
  }
}
var __DARWIN_SUF_EXTSN: CString {
  get {
    return
  }
}
var _POSIX_THREADS: CLong {
  get {
    return
  }
}
var _POSIX_THREAD_ATTR_STACKADDR: CLong {
  get {
    return
  }
}
var __DARWIN_SUF_64_BIT_INO_T: CString {
  get {
    return
  }
}
var __DARWIN_SUF_1050: CString {
  get {
    return
  }
}
var _POSIX_SYNCHRONIZED_IO: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_SAFE_FUNCTIONS: CLong {
  get {
    return
  }
}
var _POSIX_SYMLOOP_MAX: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_PROCESS_SHARED: CLong {
  get {
    return
  }
}
var _POSIX_THREAD_PRIO_PROTECT: CInt {
  get {
    return
  }
}
var _POSIX_STREAM_MAX: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_PRIO_INHERIT: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_PRIORITY_SCHEDULING: CInt {
  get {
    return
  }
}
var __DARWIN_WCHAR_MAX: CInt {
  get {
    return
  }
}
var _POSIX_SYMLINK_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_VERS_1050: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_KEYS_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_UNIX03: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_DESTRUCTOR_ITERATIONS: CInt {
  get {
    return
  }
}
var _POSIX_TRACE_EVENT_NAME_MAX: CInt {
  get {
    return
  }
}
var _POSIX_TRACE_EVENT_FILTER: CInt {
  get {
    return
  }
}
var _POSIX_TIMER_MAX: CInt {
  get {
    return
  }
}
var _POSIX_TIMERS: CInt {
  get {
    return
  }
}
var __DTF_READALL: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_SPORADIC_SERVER: CInt {
  get {
    return
  }
}
var __DARWIN_C_ANSI: CLong {
  get {
    return
  }
}
var _POSIX_MAX_CANON: CInt {
  get {
    return
  }
}
var _POSIX_SHELL: CLong {
  get {
    return
  }
}
var __DARWIN_C_FULL: CLong {
  get {
    return
  }
}
var _POSIX_MAX_INPUT: CInt {
  get {
    return
  }
}
var _POSIX_LOGIN_NAME_MAX: CInt {
  get {
    return
  }
}
var _POSIX_MAPPED_FILES: CLong {
  get {
    return
  }
}
var __DARWIN_BYTE_ORDER: CInt {
  get {
    return
  }
}
var _POSIX_JOB_CONTROL: CLong {
  get {
    return
  }
}
var _POSIX_THREAD_THREADS_MAX: CInt {
  get {
    return
  }
}
var _POSIX_LINK_MAX: CInt {
  get {
    return
  }
}
var _POSIX_TRACE: CInt {
  get {
    return
  }
}
var _POSIX_HOST_NAME_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_CLK_TCK: CInt {
  get {
    return
  }
}
var __DARWIN_BIG_ENDIAN: CInt {
  get {
    return
  }
}
var _POSIX_IPV6: CLong {
  get {
    return
  }
}
var _POSIX_MQ_PRIO_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_FD_SETSIZE: CInt {
  get {
    return
  }
}
var _POSIX_NAME_MAX: CInt {
  get {
    return
  }
}
var _POSIX_MONOTONIC_CLOCK: CInt {
  get {
    return
  }
}
var _POSIX_THREAD_CPUTIME: CInt {
  get {
    return
  }
}
var _POSIX_MQ_OPEN_MAX: CInt {
  get {
    return
  }
}
var _POSIX_MEMORY_PROTECTION: CLong {
  get {
    return
  }
}
var _POSIX_MESSAGE_PASSING: CInt {
  get {
    return
  }
}
var __DARWIN_C_LEVEL: CLong {
  get {
    return
  }
}
var _POSIX_MEMLOCK: CInt {
  get {
    return
  }
}
var _POSIX_MEMLOCK_RANGE: CInt {
  get {
    return
  }
}
var _POSIX_TIMEOUTS: CInt {
  get {
    return
  }
}
var _POSIX_RAW_SOCKETS: CInt {
  get {
    return
  }
}
var _POSIX_READER_WRITER_LOCKS: CLong {
  get {
    return
  }
}
var __DARWIN_MAXPATHLEN: CInt {
  get {
    return
  }
}
var _POSIX_PRIORITIZED_IO: CInt {
  get {
    return
  }
}
var __DARWIN_NBBY: CInt {
  get {
    return
  }
}
var _POSIX_PRIORITY_SCHEDULING: CInt {
  get {
    return
  }
}
var _POSIX_PATH_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_LITTLE_ENDIAN: CInt {
  get {
    return
  }
}
var _POSIX_PIPE_BUF: CInt {
  get {
    return
  }
}
var __DARWIN_MAXNAMLEN: CInt {
  get {
    return
  }
}
var _POSIX_NO_TRUNC: CLong {
  get {
    return
  }
}
var _POSIX_NGROUPS_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_IPPORT_RESERVED: CInt {
  get {
    return
  }
}
var _POSIX_SEM_NSEMS_MAX: CInt {
  get {
    return
  }
}
var _POSIX_OPEN_MAX: CInt {
  get {
    return
  }
}
var _POSIX_SEM_VALUE_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_ONLY_UNIX_CONFORMANCE: CInt {
  get {
    return
  }
}
var _POSIX_SAVED_IDS: CLong {
  get {
    return
  }
}
var __DARWIN_ONLY_VERS_1050: CInt {
  get {
    return
  }
}
var _POSIX_SEMAPHORES: CInt {
  get {
    return
  }
}
var __DARWIN_NSIG: CInt {
  get {
    return
  }
}
var _POSIX_RE_DUP_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_ONLY_64_BIT_INO_T: CInt {
  get {
    return
  }
}
var _POSIX_RTSIG_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_NON_CANCELABLE: CInt {
  get {
    return
  }
}
var _POSIX_REALTIME_SIGNALS: CInt {
  get {
    return
  }
}
var _POSIX_REGEXP: CLong {
  get {
    return
  }
}
var _POSIX2_EQUIV_CLASS_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_C_DEV: CLong {
  get {
    return
  }
}
var _POSIX2_FORT_DEV: CInt {
  get {
    return
  }
}
var _POSIX2_EXPR_NEST_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_CHAR_TERM: CLong {
  get {
    return
  }
}
var _POSIX2_CHARCLASS_NAME_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_C_BIND: CLong {
  get {
    return
  }
}
var _POSIX2_COLL_WEIGHTS_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_PBS_CHECKPOINT: CInt {
  get {
    return
  }
}
var _POSIX2_PBS_ACCOUNTING: CInt {
  get {
    return
  }
}
var _POSIX2_PBS_MESSAGE: CInt {
  get {
    return
  }
}
var _POSIX2_PBS_LOCATE: CInt {
  get {
    return
  }
}
var _POSIX2_LINE_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_FORT_RUN: CLong {
  get {
    return
  }
}
var _POSIX2_PBS: CInt {
  get {
    return
  }
}
var _POSIX2_LOCALEDEF: CLong {
  get {
    return
  }
}
var _POSIX_ADVISORY_INFO: CInt {
  get {
    return
  }
}
var _POSIX2_VERSION: CLong {
  get {
    return
  }
}
var _POSIX_ARG_MAX: CInt {
  get {
    return
  }
}
var _POSIX_AIO_MAX: CInt {
  get {
    return
  }
}
var _POSIX_AIO_LISTIO_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_RE_DUP_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_PBS_TRACK: CInt {
  get {
    return
  }
}
var _POSIX2_UPE: CLong {
  get {
    return
  }
}
var _POSIX2_SW_DEV: CLong {
  get {
    return
  }
}
var _POSIX_CPUTIME: CInt {
  get {
    return
  }
}
var _POSIX_CLOCK_SELECTION: CInt {
  get {
    return
  }
}
var _POSIX_FSYNC: CLong {
  get {
    return
  }
}
var _POSIX_DELAYTIMER_MAX: CInt {
  get {
    return
  }
}
var _POSIX_BARRIERS: CInt {
  get {
    return
  }
}
var _POSIX_ASYNCHRONOUS_IO: CInt {
  get {
    return
  }
}
var _POSIX_CHOWN_RESTRICTED: CLong {
  get {
    return
  }
}
var _POSIX_CHILD_MAX: CInt {
  get {
    return
  }
}
var _PC_ALLOC_SIZE_MIN: CInt {
  get {
    return
  }
}
var SIGINT: CInt {
  get {
    return
  }
}
var SIGIO: CInt {
  get {
    return
  }
}
var _PC_ASYNC_IO: CInt {
  get {
    return
  }
}
var SIGIOT: CInt {
  get {
    return
  }
}
var SIGKILL: CInt {
  get {
    return
  }
}
var _PC_AUTH_OPAQUE_NP: CInt {
  get {
    return
  }
}
var _PC_CASE_PRESERVING: CInt {
  get {
    return
  }
}
var SIGNATURE: CInt {
  get {
    return
  }
}
var SIGEV_THREAD: CInt {
  get {
    return
  }
}
var _PATH_SERVICES: CString {
  get {
    return
  }
}
var SIGFPE: CInt {
  get {
    return
  }
}
var SIGHUP: CInt {
  get {
    return
  }
}
var _PATH_UTMPX: CString {
  get {
    return
  }
}
var _PC_2_SYMLINKS: CInt {
  get {
    return
  }
}
var SIGILL: CInt {
  get {
    return
  }
}
var SIGINFO: CInt {
  get {
    return
  }
}
var SIGSTOP: CInt {
  get {
    return
  }
}
var SIGSYS: CInt {
  get {
    return
  }
}
var _PATH_SMP_DB: CString {
  get {
    return
  }
}
var _PC_MAX_CANON: CInt {
  get {
    return
  }
}
var _PC_MAX_INPUT: CInt {
  get {
    return
  }
}
var FALSE: CInt {
  get {
    return
  }
}
var SIGTERM: CInt {
  get {
    return
  }
}
var SIGTRAP: CInt {
  get {
    return
  }
}
var TRUE: CInt {
  get {
    return
  }
}
var SIGTSTP: CInt {
  get {
    return
  }
}
var _PC_NAME_MAX: CInt {
  get {
    return
  }
}
var SIGPIPE: CInt {
  get {
    return
  }
}
var _PC_CASE_SENSITIVE: CInt {
  get {
    return
  }
}
var _PC_NAME_CHARS_MAX: CInt {
  get {
    return
  }
}
var SIGQUIT: CInt {
  get {
    return
  }
}
var SIGPROF: CInt {
  get {
    return
  }
}
var _PC_EXTENDED_SECURITY_NP: CInt {
  get {
    return
  }
}
var SIGSEGV: CInt {
  get {
    return
  }
}
var SIGSTKSZ: CInt {
  get {
    return
  }
}
var _PC_FILESIZEBITS: CInt {
  get {
    return
  }
}
var _PC_CHOWN_RESTRICTED: CInt {
  get {
    return
  }
}
var _PC_REC_INCR_XFER_SIZE: CInt {
  get {
    return
  }
}
var _PC_REC_MAX_XFER_SIZE: CInt {
  get {
    return
  }
}
var _PC_REC_MIN_XFER_SIZE: CInt {
  get {
    return
  }
}
var _PC_LINK_MAX: CInt {
  get {
    return
  }
}
var _PC_REC_XFER_ALIGN: CInt {
  get {
    return
  }
}
var _PC_NO_TRUNC: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_WRITE_DATA: CInt {
  get {
    return
  }
}
var _PC_PATH_MAX: CInt {
  get {
    return
  }
}
var _PC_PIPE_BUF: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_WRITE_EXTATTRIBUTES: CInt {
  get {
    return
  }
}
var _PC_PRIO_IO: CInt {
  get {
    return
  }
}
var _POSIX2_BC_BASE_MAX: CInt {
  get {
    return
  }
}
var __DARWIN_ACL_WRITE_SECURITY: CInt {
  get {
    return
  }
}
var _POSIX2_BC_DIM_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_BC_SCALE_MAX: CInt {
  get {
    return
  }
}
var _POSIX2_BC_STRING_MAX: CInt {
  get {
    return
  }
}
var _PC_SYNC_IO: CInt {
  get {
    return
  }
}
var _PC_SYMLINK_MAX: CInt {
  get {
    return
  }
}
var _PC_VDISABLE: CInt {
  get {
    return
  }
}
var _PC_XATTR_SIZE_BITS: CInt {
  get {
    return
  }
}
var AU_USER_NAME_MAX: CInt {
  get {
    return
  }
}
var AU_TO_WRITE: CInt {
  get {
    return
  }
}
var AU_TO_NO_WRITE: CInt {
  get {
    return
  }
}
var AU_PRS_USECACHE: CInt {
  get {
    return
  }
}
var AU_PRS_SUCCESS: CInt {
  get {
    return
  }
}
var AU_PRS_REREAD: CInt {
  get {
    return
  }
}
var AU_PRS_FAILURE: CInt {
  get {
    return
  }
}
var AU_OFLAG_XML: CInt {
  get {
    return
  }
}
var AU_OFLAG_SHORT: CInt {
  get {
    return
  }
}
var AU_OFLAG_RAW: CInt {
  get {
    return
  }
}
var AU_OFLAG_NORESOLVE: CInt {
  get {
    return
  }
}
var AU_OFLAG_NONE: CInt {
  get {
    return
  }
}
var AU_LINE_MAX: CInt {
  get {
    return
  }
}
var AU_IPv4: CInt {
  get {
    return
  }
}
var AU_FS_MINFREE: CInt {
  get {
    return
  }
}
var AU_IPv6: CInt {
  get {
    return
  }
}
var AU_EVENT_DESC_MAX: CInt {
  get {
    return
  }
}
var AU_EVENT_NAME_MAX: CInt {
  get {
    return
  }
}
var AU_DEFAUDITSID: CInt {
  get {
    return
  }
}
var AU_CLASS_DESC_MAX: CInt {
  get {
    return
  }
}
var AU_CLASS_NAME_MAX: CInt {
  get {
    return
  }
}
var AUT_ZONENAME: CInt {
  get {
    return
  }
}
var AU_ASSIGN_ASID: CInt {
  get {
    return
  }
}
var AUT_XSELECT: CInt {
  get {
    return
  }
}
var AUT_XPROTO: CInt {
  get {
    return
  }
}
var AUT_XWINDOW: CInt {
  get {
    return
  }
}
var AUT_XPIXMAP: CInt {
  get {
    return
  }
}
var AUT_XPROPERTY: CInt {
  get {
    return
  }
}
var AUT_XGC: CInt {
  get {
    return
  }
}
var AUT_XOBJ: CInt {
  get {
    return
  }
}
var AUT_XCOLORMAP: CInt {
  get {
    return
  }
}
var AUT_XCURSOR: CInt {
  get {
    return
  }
}
var AUT_XFONT: CInt {
  get {
    return
  }
}
var AUT_XATPATH: CInt {
  get {
    return
  }
}
var AUT_XCLIENT: CInt {
  get {
    return
  }
}
var AUT_XATOM: CInt {
  get {
    return
  }
}
var AUT_UPRIV: CInt {
  get {
    return
  }
}
var AUT_TRAILER_MAGIC: CInt {
  get {
    return
  }
}
var AUT_SUBJECT64_EX: CInt {
  get {
    return
  }
}
var AUT_UNAUTH: CInt {
  get {
    return
  }
}
var AUT_TEXT: CInt {
  get {
    return
  }
}
var AUT_TRAILER: CInt {
  get {
    return
  }
}
var AUT_SUBJECT32_EX: CInt {
  get {
    return
  }
}
var AUT_SUBJECT64: CInt {
  get {
    return
  }
}
var AUT_SUBJECT: CInt {
  get {
    return
  }
}
var AUT_SUBJECT32: CInt {
  get {
    return
  }
}
var AUT_SOCKINET32: CInt {
  get {
    return
  }
}
var AUT_SOCKUNIX: CInt {
  get {
    return
  }
}
var AUT_SOCKET: CInt {
  get {
    return
  }
}
var AUT_SEQ: CInt {
  get {
    return
  }
}
var AUT_RETURN64: CInt {
  get {
    return
  }
}
var AUT_SOCKINET128: CInt {
  get {
    return
  }
}
var AUT_SOCKET_EX: CInt {
  get {
    return
  }
}
var AUT_PROCESS64_EX: CInt {
  get {
    return
  }
}
var AUT_PROCESS64: CInt {
  get {
    return
  }
}
var AUT_RETURN32: CInt {
  get {
    return
  }
}
var AUT_RETURN: CInt {
  get {
    return
  }
}
var AUT_PROCESS: CInt {
  get {
    return
  }
}
var AUT_PRIV: CInt {
  get {
    return
  }
}
var AUT_PATH: CInt {
  get {
    return
  }
}
var AUT_PROCESS32_EX: CInt {
  get {
    return
  }
}
var AUT_PROCESS32: CInt {
  get {
    return
  }
}
var AUT_OTHER_FILE: CInt {
  get {
    return
  }
}
var AUT_OPAQUE: CInt {
  get {
    return
  }
}
var AUT_OTHER_FILE64: CInt {
  get {
    return
  }
}
var AUT_OTHER_FILE32: CInt {
  get {
    return
  }
}
var AUT_LIAISON: CInt {
  get {
    return
  }
}
var AUT_IPORT: CInt {
  get {
    return
  }
}
var AUT_LABEL: CInt {
  get {
    return
  }
}
var AUT_OHEADER: CInt {
  get {
    return
  }
}
var AUT_NEWGROUPS: CInt {
  get {
    return
  }
}
var AUT_IP: CInt {
  get {
    return
  }
}
var AUT_IN_ADDR_EX: CInt {
  get {
    return
  }
}
var AUT_IPC_PERM: CInt {
  get {
    return
  }
}
var AUT_IPC: CInt {
  get {
    return
  }
}
@exported import Darwin
var errno: Int32 {
  get {}
  set {}
}
@availability(*, unavailable, message="Please use threads or posix_spawn*()") func vfork() -> Int32
@availability(*, unavailable, message="Please use threads or posix_spawn*()") func fork() -> Int32
